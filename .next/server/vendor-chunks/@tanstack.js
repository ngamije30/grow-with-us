"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tanstack";
exports.ids = ["vendor-chunks/@tanstack"];
exports.modules = {

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/focusManager.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/focusManager.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FocusManager: () => (/* binding */ FocusManager),\n/* harmony export */   focusManager: () => (/* binding */ focusManager)\n/* harmony export */ });\n/* harmony import */ var _subscribable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/subscribable.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/utils.js\");\n// src/focusManager.ts\n\n\nvar FocusManager = class extends _subscribable_js__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    #focused;\n    #cleanup;\n    #setup;\n    constructor(){\n        super();\n        this.#setup = (onFocus)=>{\n            if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__.isServer && window.addEventListener) {\n                const listener = ()=>onFocus();\n                window.addEventListener(\"visibilitychange\", listener, false);\n                return ()=>{\n                    window.removeEventListener(\"visibilitychange\", listener);\n                };\n            }\n            return;\n        };\n    }\n    onSubscribe() {\n        if (!this.#cleanup) {\n            this.setEventListener(this.#setup);\n        }\n    }\n    onUnsubscribe() {\n        if (!this.hasListeners()) {\n            this.#cleanup?.();\n            this.#cleanup = void 0;\n        }\n    }\n    setEventListener(setup) {\n        this.#setup = setup;\n        this.#cleanup?.();\n        this.#cleanup = setup((focused)=>{\n            if (typeof focused === \"boolean\") {\n                this.setFocused(focused);\n            } else {\n                this.onFocus();\n            }\n        });\n    }\n    setFocused(focused) {\n        const changed = this.#focused !== focused;\n        if (changed) {\n            this.#focused = focused;\n            this.onFocus();\n        }\n    }\n    onFocus() {\n        const isFocused = this.isFocused();\n        this.listeners.forEach((listener)=>{\n            listener(isFocused);\n        });\n    }\n    isFocused() {\n        if (typeof this.#focused === \"boolean\") {\n            return this.#focused;\n        }\n        return globalThis.document?.visibilityState !== \"hidden\";\n    }\n};\nvar focusManager = new FocusManager();\n //# sourceMappingURL=focusManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbW9kZXJuL2ZvY3VzTWFuYWdlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsc0JBQXNCO0FBQzJCO0FBQ1g7QUFDdEMsSUFBSUUsZUFBZSxjQUFjRiwwREFBWUE7SUFDM0MsQ0FBQ0csT0FBTyxDQUFDO0lBQ1QsQ0FBQ0MsT0FBTyxDQUFDO0lBQ1QsQ0FBQ0MsS0FBSyxDQUFDO0lBQ1BDLGFBQWM7UUFDWixLQUFLO1FBQ0wsSUFBSSxDQUFDLENBQUNELEtBQUssR0FBRyxDQUFDRTtZQUNiLElBQUksQ0FBQ04sK0NBQVFBLElBQUlPLE9BQU9DLGdCQUFnQixFQUFFO2dCQUN4QyxNQUFNQyxXQUFXLElBQU1IO2dCQUN2QkMsT0FBT0MsZ0JBQWdCLENBQUMsb0JBQW9CQyxVQUFVO2dCQUN0RCxPQUFPO29CQUNMRixPQUFPRyxtQkFBbUIsQ0FBQyxvQkFBb0JEO2dCQUNqRDtZQUNGO1lBQ0E7UUFDRjtJQUNGO0lBQ0FFLGNBQWM7UUFDWixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUNSLE9BQU8sRUFBRTtZQUNsQixJQUFJLENBQUNTLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDUixLQUFLO1FBQ25DO0lBQ0Y7SUFDQVMsZ0JBQWdCO1FBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQ0MsWUFBWSxJQUFJO1lBQ3hCLElBQUksQ0FBQyxDQUFDWCxPQUFPO1lBQ2IsSUFBSSxDQUFDLENBQUNBLE9BQU8sR0FBRyxLQUFLO1FBQ3ZCO0lBQ0Y7SUFDQVMsaUJBQWlCUixLQUFLLEVBQUU7UUFDdEIsSUFBSSxDQUFDLENBQUNBLEtBQUssR0FBR0E7UUFDZCxJQUFJLENBQUMsQ0FBQ0QsT0FBTztRQUNiLElBQUksQ0FBQyxDQUFDQSxPQUFPLEdBQUdDLE1BQU0sQ0FBQ0Y7WUFDckIsSUFBSSxPQUFPQSxZQUFZLFdBQVc7Z0JBQ2hDLElBQUksQ0FBQ2EsVUFBVSxDQUFDYjtZQUNsQixPQUFPO2dCQUNMLElBQUksQ0FBQ0ksT0FBTztZQUNkO1FBQ0Y7SUFDRjtJQUNBUyxXQUFXYixPQUFPLEVBQUU7UUFDbEIsTUFBTWMsVUFBVSxJQUFJLENBQUMsQ0FBQ2QsT0FBTyxLQUFLQTtRQUNsQyxJQUFJYyxTQUFTO1lBQ1gsSUFBSSxDQUFDLENBQUNkLE9BQU8sR0FBR0E7WUFDaEIsSUFBSSxDQUFDSSxPQUFPO1FBQ2Q7SUFDRjtJQUNBQSxVQUFVO1FBQ1IsTUFBTVcsWUFBWSxJQUFJLENBQUNBLFNBQVM7UUFDaEMsSUFBSSxDQUFDQyxTQUFTLENBQUNDLE9BQU8sQ0FBQyxDQUFDVjtZQUN0QkEsU0FBU1E7UUFDWDtJQUNGO0lBQ0FBLFlBQVk7UUFDVixJQUFJLE9BQU8sSUFBSSxDQUFDLENBQUNmLE9BQU8sS0FBSyxXQUFXO1lBQ3RDLE9BQU8sSUFBSSxDQUFDLENBQUNBLE9BQU87UUFDdEI7UUFDQSxPQUFPa0IsV0FBV0MsUUFBUSxFQUFFQyxvQkFBb0I7SUFDbEQ7QUFDRjtBQUNBLElBQUlDLGVBQWUsSUFBSXRCO0FBSXJCLENBQ0Ysd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3Jvdy13aXRoLXVzLy4vbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9xdWVyeS1jb3JlL2J1aWxkL21vZGVybi9mb2N1c01hbmFnZXIuanM/YWJmMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvZm9jdXNNYW5hZ2VyLnRzXG5pbXBvcnQgeyBTdWJzY3JpYmFibGUgfSBmcm9tIFwiLi9zdWJzY3JpYmFibGUuanNcIjtcbmltcG9ydCB7IGlzU2VydmVyIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbnZhciBGb2N1c01hbmFnZXIgPSBjbGFzcyBleHRlbmRzIFN1YnNjcmliYWJsZSB7XG4gICNmb2N1c2VkO1xuICAjY2xlYW51cDtcbiAgI3NldHVwO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuI3NldHVwID0gKG9uRm9jdXMpID0+IHtcbiAgICAgIGlmICghaXNTZXJ2ZXIgJiYgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgY29uc3QgbGlzdGVuZXIgPSAoKSA9PiBvbkZvY3VzKCk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCBsaXN0ZW5lcik7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfTtcbiAgfVxuICBvblN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMuI2NsZWFudXApIHtcbiAgICAgIHRoaXMuc2V0RXZlbnRMaXN0ZW5lcih0aGlzLiNzZXR1cCk7XG4gICAgfVxuICB9XG4gIG9uVW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLmhhc0xpc3RlbmVycygpKSB7XG4gICAgICB0aGlzLiNjbGVhbnVwPy4oKTtcbiAgICAgIHRoaXMuI2NsZWFudXAgPSB2b2lkIDA7XG4gICAgfVxuICB9XG4gIHNldEV2ZW50TGlzdGVuZXIoc2V0dXApIHtcbiAgICB0aGlzLiNzZXR1cCA9IHNldHVwO1xuICAgIHRoaXMuI2NsZWFudXA/LigpO1xuICAgIHRoaXMuI2NsZWFudXAgPSBzZXR1cCgoZm9jdXNlZCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBmb2N1c2VkID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICB0aGlzLnNldEZvY3VzZWQoZm9jdXNlZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9uRm9jdXMoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBzZXRGb2N1c2VkKGZvY3VzZWQpIHtcbiAgICBjb25zdCBjaGFuZ2VkID0gdGhpcy4jZm9jdXNlZCAhPT0gZm9jdXNlZDtcbiAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgdGhpcy4jZm9jdXNlZCA9IGZvY3VzZWQ7XG4gICAgICB0aGlzLm9uRm9jdXMoKTtcbiAgICB9XG4gIH1cbiAgb25Gb2N1cygpIHtcbiAgICBjb25zdCBpc0ZvY3VzZWQgPSB0aGlzLmlzRm9jdXNlZCgpO1xuICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyKSA9PiB7XG4gICAgICBsaXN0ZW5lcihpc0ZvY3VzZWQpO1xuICAgIH0pO1xuICB9XG4gIGlzRm9jdXNlZCgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuI2ZvY3VzZWQgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICByZXR1cm4gdGhpcy4jZm9jdXNlZDtcbiAgICB9XG4gICAgcmV0dXJuIGdsb2JhbFRoaXMuZG9jdW1lbnQ/LnZpc2liaWxpdHlTdGF0ZSAhPT0gXCJoaWRkZW5cIjtcbiAgfVxufTtcbnZhciBmb2N1c01hbmFnZXIgPSBuZXcgRm9jdXNNYW5hZ2VyKCk7XG5leHBvcnQge1xuICBGb2N1c01hbmFnZXIsXG4gIGZvY3VzTWFuYWdlclxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvY3VzTWFuYWdlci5qcy5tYXAiXSwibmFtZXMiOlsiU3Vic2NyaWJhYmxlIiwiaXNTZXJ2ZXIiLCJGb2N1c01hbmFnZXIiLCJmb2N1c2VkIiwiY2xlYW51cCIsInNldHVwIiwiY29uc3RydWN0b3IiLCJvbkZvY3VzIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImxpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9uU3Vic2NyaWJlIiwic2V0RXZlbnRMaXN0ZW5lciIsIm9uVW5zdWJzY3JpYmUiLCJoYXNMaXN0ZW5lcnMiLCJzZXRGb2N1c2VkIiwiY2hhbmdlZCIsImlzRm9jdXNlZCIsImxpc3RlbmVycyIsImZvckVhY2giLCJnbG9iYWxUaGlzIiwiZG9jdW1lbnQiLCJ2aXNpYmlsaXR5U3RhdGUiLCJmb2N1c01hbmFnZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/focusManager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/infiniteQueryBehavior.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/infiniteQueryBehavior.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hasNextPage: () => (/* binding */ hasNextPage),\n/* harmony export */   hasPreviousPage: () => (/* binding */ hasPreviousPage),\n/* harmony export */   infiniteQueryBehavior: () => (/* binding */ infiniteQueryBehavior)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/utils.js\");\n// src/infiniteQueryBehavior.ts\n\nfunction infiniteQueryBehavior(pages) {\n    return {\n        onFetch: (context, query)=>{\n            const options = context.options;\n            const direction = context.fetchOptions?.meta?.fetchMore?.direction;\n            const oldPages = context.state.data?.pages || [];\n            const oldPageParams = context.state.data?.pageParams || [];\n            let result = {\n                pages: [],\n                pageParams: []\n            };\n            let currentPage = 0;\n            const fetchFn = async ()=>{\n                let cancelled = false;\n                const addSignalProperty = (object)=>{\n                    Object.defineProperty(object, \"signal\", {\n                        enumerable: true,\n                        get: ()=>{\n                            if (context.signal.aborted) {\n                                cancelled = true;\n                            } else {\n                                context.signal.addEventListener(\"abort\", ()=>{\n                                    cancelled = true;\n                                });\n                            }\n                            return context.signal;\n                        }\n                    });\n                };\n                const queryFn = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureQueryFn)(context.options, context.fetchOptions);\n                const fetchPage = async (data, param, previous)=>{\n                    if (cancelled) {\n                        return Promise.reject();\n                    }\n                    if (param == null && data.pages.length) {\n                        return Promise.resolve(data);\n                    }\n                    const queryFnContext = {\n                        client: context.client,\n                        queryKey: context.queryKey,\n                        pageParam: param,\n                        direction: previous ? \"backward\" : \"forward\",\n                        meta: context.options.meta\n                    };\n                    addSignalProperty(queryFnContext);\n                    const page = await queryFn(queryFnContext);\n                    const { maxPages } = context.options;\n                    const addTo = previous ? _utils_js__WEBPACK_IMPORTED_MODULE_0__.addToStart : _utils_js__WEBPACK_IMPORTED_MODULE_0__.addToEnd;\n                    return {\n                        pages: addTo(data.pages, page, maxPages),\n                        pageParams: addTo(data.pageParams, param, maxPages)\n                    };\n                };\n                if (direction && oldPages.length) {\n                    const previous = direction === \"backward\";\n                    const pageParamFn = previous ? getPreviousPageParam : getNextPageParam;\n                    const oldData = {\n                        pages: oldPages,\n                        pageParams: oldPageParams\n                    };\n                    const param = pageParamFn(options, oldData);\n                    result = await fetchPage(oldData, param, previous);\n                } else {\n                    const remainingPages = pages ?? oldPages.length;\n                    do {\n                        const param = currentPage === 0 ? oldPageParams[0] ?? options.initialPageParam : getNextPageParam(options, result);\n                        if (currentPage > 0 && param == null) {\n                            break;\n                        }\n                        result = await fetchPage(result, param);\n                        currentPage++;\n                    }while (currentPage < remainingPages);\n                }\n                return result;\n            };\n            if (context.options.persister) {\n                context.fetchFn = ()=>{\n                    return context.options.persister?.(fetchFn, {\n                        client: context.client,\n                        queryKey: context.queryKey,\n                        meta: context.options.meta,\n                        signal: context.signal\n                    }, query);\n                };\n            } else {\n                context.fetchFn = fetchFn;\n            }\n        }\n    };\n}\nfunction getNextPageParam(options, { pages, pageParams }) {\n    const lastIndex = pages.length - 1;\n    return pages.length > 0 ? options.getNextPageParam(pages[lastIndex], pages, pageParams[lastIndex], pageParams) : void 0;\n}\nfunction getPreviousPageParam(options, { pages, pageParams }) {\n    return pages.length > 0 ? options.getPreviousPageParam?.(pages[0], pages, pageParams[0], pageParams) : void 0;\n}\nfunction hasNextPage(options, data) {\n    if (!data) return false;\n    return getNextPageParam(options, data) != null;\n}\nfunction hasPreviousPage(options, data) {\n    if (!data || !options.getPreviousPageParam) return false;\n    return getPreviousPageParam(options, data) != null;\n}\n //# sourceMappingURL=infiniteQueryBehavior.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/infiniteQueryBehavior.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/mutation.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/mutation.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Mutation: () => (/* binding */ Mutation),\n/* harmony export */   getDefaultState: () => (/* binding */ getDefaultState)\n/* harmony export */ });\n/* harmony import */ var _notifyManager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./notifyManager.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/notifyManager.js\");\n/* harmony import */ var _removable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./removable.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/removable.js\");\n/* harmony import */ var _retryer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./retryer.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/retryer.js\");\n// src/mutation.ts\n\n\n\nvar Mutation = class extends _removable_js__WEBPACK_IMPORTED_MODULE_0__.Removable {\n    #observers;\n    #mutationCache;\n    #retryer;\n    constructor(config){\n        super();\n        this.mutationId = config.mutationId;\n        this.#mutationCache = config.mutationCache;\n        this.#observers = [];\n        this.state = config.state || getDefaultState();\n        this.setOptions(config.options);\n        this.scheduleGc();\n    }\n    setOptions(options) {\n        this.options = options;\n        this.updateGcTime(this.options.gcTime);\n    }\n    get meta() {\n        return this.options.meta;\n    }\n    addObserver(observer) {\n        if (!this.#observers.includes(observer)) {\n            this.#observers.push(observer);\n            this.clearGcTimeout();\n            this.#mutationCache.notify({\n                type: \"observerAdded\",\n                mutation: this,\n                observer\n            });\n        }\n    }\n    removeObserver(observer) {\n        this.#observers = this.#observers.filter((x)=>x !== observer);\n        this.scheduleGc();\n        this.#mutationCache.notify({\n            type: \"observerRemoved\",\n            mutation: this,\n            observer\n        });\n    }\n    optionalRemove() {\n        if (!this.#observers.length) {\n            if (this.state.status === \"pending\") {\n                this.scheduleGc();\n            } else {\n                this.#mutationCache.remove(this);\n            }\n        }\n    }\n    continue() {\n        return this.#retryer?.continue() ?? // continuing a mutation assumes that variables are set, mutation must have been dehydrated before\n        this.execute(this.state.variables);\n    }\n    async execute(variables) {\n        this.#retryer = (0,_retryer_js__WEBPACK_IMPORTED_MODULE_1__.createRetryer)({\n            fn: ()=>{\n                if (!this.options.mutationFn) {\n                    return Promise.reject(new Error(\"No mutationFn found\"));\n                }\n                return this.options.mutationFn(variables);\n            },\n            onFail: (failureCount, error)=>{\n                this.#dispatch({\n                    type: \"failed\",\n                    failureCount,\n                    error\n                });\n            },\n            onPause: ()=>{\n                this.#dispatch({\n                    type: \"pause\"\n                });\n            },\n            onContinue: ()=>{\n                this.#dispatch({\n                    type: \"continue\"\n                });\n            },\n            retry: this.options.retry ?? 0,\n            retryDelay: this.options.retryDelay,\n            networkMode: this.options.networkMode,\n            canRun: ()=>this.#mutationCache.canRun(this)\n        });\n        const restored = this.state.status === \"pending\";\n        const isPaused = !this.#retryer.canStart();\n        try {\n            if (!restored) {\n                this.#dispatch({\n                    type: \"pending\",\n                    variables,\n                    isPaused\n                });\n                await this.#mutationCache.config.onMutate?.(variables, this);\n                const context = await this.options.onMutate?.(variables);\n                if (context !== this.state.context) {\n                    this.#dispatch({\n                        type: \"pending\",\n                        context,\n                        variables,\n                        isPaused\n                    });\n                }\n            }\n            const data = await this.#retryer.start();\n            await this.#mutationCache.config.onSuccess?.(data, variables, this.state.context, this);\n            await this.options.onSuccess?.(data, variables, this.state.context);\n            await this.#mutationCache.config.onSettled?.(data, null, this.state.variables, this.state.context, this);\n            await this.options.onSettled?.(data, null, variables, this.state.context);\n            this.#dispatch({\n                type: \"success\",\n                data\n            });\n            return data;\n        } catch (error) {\n            try {\n                await this.#mutationCache.config.onError?.(error, variables, this.state.context, this);\n                await this.options.onError?.(error, variables, this.state.context);\n                await this.#mutationCache.config.onSettled?.(void 0, error, this.state.variables, this.state.context, this);\n                await this.options.onSettled?.(void 0, error, variables, this.state.context);\n                throw error;\n            } finally{\n                this.#dispatch({\n                    type: \"error\",\n                    error\n                });\n            }\n        } finally{\n            this.#mutationCache.runNext(this);\n        }\n    }\n    #dispatch(action) {\n        const reducer = (state)=>{\n            switch(action.type){\n                case \"failed\":\n                    return {\n                        ...state,\n                        failureCount: action.failureCount,\n                        failureReason: action.error\n                    };\n                case \"pause\":\n                    return {\n                        ...state,\n                        isPaused: true\n                    };\n                case \"continue\":\n                    return {\n                        ...state,\n                        isPaused: false\n                    };\n                case \"pending\":\n                    return {\n                        ...state,\n                        context: action.context,\n                        data: void 0,\n                        failureCount: 0,\n                        failureReason: null,\n                        error: null,\n                        isPaused: action.isPaused,\n                        status: \"pending\",\n                        variables: action.variables,\n                        submittedAt: Date.now()\n                    };\n                case \"success\":\n                    return {\n                        ...state,\n                        data: action.data,\n                        failureCount: 0,\n                        failureReason: null,\n                        error: null,\n                        status: \"success\",\n                        isPaused: false\n                    };\n                case \"error\":\n                    return {\n                        ...state,\n                        data: void 0,\n                        error: action.error,\n                        failureCount: state.failureCount + 1,\n                        failureReason: action.error,\n                        isPaused: false,\n                        status: \"error\"\n                    };\n            }\n        };\n        this.state = reducer(this.state);\n        _notifyManager_js__WEBPACK_IMPORTED_MODULE_2__.notifyManager.batch(()=>{\n            this.#observers.forEach((observer)=>{\n                observer.onMutationUpdate(action);\n            });\n            this.#mutationCache.notify({\n                mutation: this,\n                type: \"updated\",\n                action\n            });\n        });\n    }\n};\nfunction getDefaultState() {\n    return {\n        context: void 0,\n        data: void 0,\n        error: null,\n        failureCount: 0,\n        failureReason: null,\n        isPaused: false,\n        status: \"idle\",\n        variables: void 0,\n        submittedAt: 0\n    };\n}\n //# sourceMappingURL=mutation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbW9kZXJuL211dGF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsa0JBQWtCO0FBQ2lDO0FBQ1I7QUFDRTtBQUM3QyxJQUFJRyxXQUFXLGNBQWNGLG9EQUFTQTtJQUNwQyxDQUFDRyxTQUFTLENBQUM7SUFDWCxDQUFDQyxhQUFhLENBQUM7SUFDZixDQUFDQyxPQUFPLENBQUM7SUFDVEMsWUFBWUMsTUFBTSxDQUFFO1FBQ2xCLEtBQUs7UUFDTCxJQUFJLENBQUNDLFVBQVUsR0FBR0QsT0FBT0MsVUFBVTtRQUNuQyxJQUFJLENBQUMsQ0FBQ0osYUFBYSxHQUFHRyxPQUFPSCxhQUFhO1FBQzFDLElBQUksQ0FBQyxDQUFDRCxTQUFTLEdBQUcsRUFBRTtRQUNwQixJQUFJLENBQUNNLEtBQUssR0FBR0YsT0FBT0UsS0FBSyxJQUFJQztRQUM3QixJQUFJLENBQUNDLFVBQVUsQ0FBQ0osT0FBT0ssT0FBTztRQUM5QixJQUFJLENBQUNDLFVBQVU7SUFDakI7SUFDQUYsV0FBV0MsT0FBTyxFQUFFO1FBQ2xCLElBQUksQ0FBQ0EsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0UsWUFBWSxDQUFDLElBQUksQ0FBQ0YsT0FBTyxDQUFDRyxNQUFNO0lBQ3ZDO0lBQ0EsSUFBSUMsT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDSixPQUFPLENBQUNJLElBQUk7SUFDMUI7SUFDQUMsWUFBWUMsUUFBUSxFQUFFO1FBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQ2YsU0FBUyxDQUFDZ0IsUUFBUSxDQUFDRCxXQUFXO1lBQ3ZDLElBQUksQ0FBQyxDQUFDZixTQUFTLENBQUNpQixJQUFJLENBQUNGO1lBQ3JCLElBQUksQ0FBQ0csY0FBYztZQUNuQixJQUFJLENBQUMsQ0FBQ2pCLGFBQWEsQ0FBQ2tCLE1BQU0sQ0FBQztnQkFDekJDLE1BQU07Z0JBQ05DLFVBQVUsSUFBSTtnQkFDZE47WUFDRjtRQUNGO0lBQ0Y7SUFDQU8sZUFBZVAsUUFBUSxFQUFFO1FBQ3ZCLElBQUksQ0FBQyxDQUFDZixTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUNBLFNBQVMsQ0FBQ3VCLE1BQU0sQ0FBQyxDQUFDQyxJQUFNQSxNQUFNVDtRQUN0RCxJQUFJLENBQUNMLFVBQVU7UUFDZixJQUFJLENBQUMsQ0FBQ1QsYUFBYSxDQUFDa0IsTUFBTSxDQUFDO1lBQ3pCQyxNQUFNO1lBQ05DLFVBQVUsSUFBSTtZQUNkTjtRQUNGO0lBQ0Y7SUFDQVUsaUJBQWlCO1FBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDekIsU0FBUyxDQUFDMEIsTUFBTSxFQUFFO1lBQzNCLElBQUksSUFBSSxDQUFDcEIsS0FBSyxDQUFDcUIsTUFBTSxLQUFLLFdBQVc7Z0JBQ25DLElBQUksQ0FBQ2pCLFVBQVU7WUFDakIsT0FBTztnQkFDTCxJQUFJLENBQUMsQ0FBQ1QsYUFBYSxDQUFDMkIsTUFBTSxDQUFDLElBQUk7WUFDakM7UUFDRjtJQUNGO0lBQ0FDLFdBQVc7UUFDVCxPQUFPLElBQUksQ0FBQyxDQUFDM0IsT0FBTyxFQUFFMkIsY0FBYyxrR0FBa0c7UUFDdEksSUFBSSxDQUFDQyxPQUFPLENBQUMsSUFBSSxDQUFDeEIsS0FBSyxDQUFDeUIsU0FBUztJQUNuQztJQUNBLE1BQU1ELFFBQVFDLFNBQVMsRUFBRTtRQUN2QixJQUFJLENBQUMsQ0FBQzdCLE9BQU8sR0FBR0osMERBQWFBLENBQUM7WUFDNUJrQyxJQUFJO2dCQUNGLElBQUksQ0FBQyxJQUFJLENBQUN2QixPQUFPLENBQUN3QixVQUFVLEVBQUU7b0JBQzVCLE9BQU9DLFFBQVFDLE1BQU0sQ0FBQyxJQUFJQyxNQUFNO2dCQUNsQztnQkFDQSxPQUFPLElBQUksQ0FBQzNCLE9BQU8sQ0FBQ3dCLFVBQVUsQ0FBQ0Y7WUFDakM7WUFDQU0sUUFBUSxDQUFDQyxjQUFjQztnQkFDckIsSUFBSSxDQUFDLENBQUNDLFFBQVEsQ0FBQztvQkFBRXBCLE1BQU07b0JBQVVrQjtvQkFBY0M7Z0JBQU07WUFDdkQ7WUFDQUUsU0FBUztnQkFDUCxJQUFJLENBQUMsQ0FBQ0QsUUFBUSxDQUFDO29CQUFFcEIsTUFBTTtnQkFBUTtZQUNqQztZQUNBc0IsWUFBWTtnQkFDVixJQUFJLENBQUMsQ0FBQ0YsUUFBUSxDQUFDO29CQUFFcEIsTUFBTTtnQkFBVztZQUNwQztZQUNBdUIsT0FBTyxJQUFJLENBQUNsQyxPQUFPLENBQUNrQyxLQUFLLElBQUk7WUFDN0JDLFlBQVksSUFBSSxDQUFDbkMsT0FBTyxDQUFDbUMsVUFBVTtZQUNuQ0MsYUFBYSxJQUFJLENBQUNwQyxPQUFPLENBQUNvQyxXQUFXO1lBQ3JDQyxRQUFRLElBQU0sSUFBSSxDQUFDLENBQUM3QyxhQUFhLENBQUM2QyxNQUFNLENBQUMsSUFBSTtRQUMvQztRQUNBLE1BQU1DLFdBQVcsSUFBSSxDQUFDekMsS0FBSyxDQUFDcUIsTUFBTSxLQUFLO1FBQ3ZDLE1BQU1xQixXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM5QyxPQUFPLENBQUMrQyxRQUFRO1FBQ3hDLElBQUk7WUFDRixJQUFJLENBQUNGLFVBQVU7Z0JBQ2IsSUFBSSxDQUFDLENBQUNQLFFBQVEsQ0FBQztvQkFBRXBCLE1BQU07b0JBQVdXO29CQUFXaUI7Z0JBQVM7Z0JBQ3RELE1BQU0sSUFBSSxDQUFDLENBQUMvQyxhQUFhLENBQUNHLE1BQU0sQ0FBQzhDLFFBQVEsR0FDdkNuQixXQUNBLElBQUk7Z0JBRU4sTUFBTW9CLFVBQVUsTUFBTSxJQUFJLENBQUMxQyxPQUFPLENBQUN5QyxRQUFRLEdBQUduQjtnQkFDOUMsSUFBSW9CLFlBQVksSUFBSSxDQUFDN0MsS0FBSyxDQUFDNkMsT0FBTyxFQUFFO29CQUNsQyxJQUFJLENBQUMsQ0FBQ1gsUUFBUSxDQUFDO3dCQUNicEIsTUFBTTt3QkFDTitCO3dCQUNBcEI7d0JBQ0FpQjtvQkFDRjtnQkFDRjtZQUNGO1lBQ0EsTUFBTUksT0FBTyxNQUFNLElBQUksQ0FBQyxDQUFDbEQsT0FBTyxDQUFDbUQsS0FBSztZQUN0QyxNQUFNLElBQUksQ0FBQyxDQUFDcEQsYUFBYSxDQUFDRyxNQUFNLENBQUNrRCxTQUFTLEdBQ3hDRixNQUNBckIsV0FDQSxJQUFJLENBQUN6QixLQUFLLENBQUM2QyxPQUFPLEVBQ2xCLElBQUk7WUFFTixNQUFNLElBQUksQ0FBQzFDLE9BQU8sQ0FBQzZDLFNBQVMsR0FBR0YsTUFBTXJCLFdBQVcsSUFBSSxDQUFDekIsS0FBSyxDQUFDNkMsT0FBTztZQUNsRSxNQUFNLElBQUksQ0FBQyxDQUFDbEQsYUFBYSxDQUFDRyxNQUFNLENBQUNtRCxTQUFTLEdBQ3hDSCxNQUNBLE1BQ0EsSUFBSSxDQUFDOUMsS0FBSyxDQUFDeUIsU0FBUyxFQUNwQixJQUFJLENBQUN6QixLQUFLLENBQUM2QyxPQUFPLEVBQ2xCLElBQUk7WUFFTixNQUFNLElBQUksQ0FBQzFDLE9BQU8sQ0FBQzhDLFNBQVMsR0FBR0gsTUFBTSxNQUFNckIsV0FBVyxJQUFJLENBQUN6QixLQUFLLENBQUM2QyxPQUFPO1lBQ3hFLElBQUksQ0FBQyxDQUFDWCxRQUFRLENBQUM7Z0JBQUVwQixNQUFNO2dCQUFXZ0M7WUFBSztZQUN2QyxPQUFPQTtRQUNULEVBQUUsT0FBT2IsT0FBTztZQUNkLElBQUk7Z0JBQ0YsTUFBTSxJQUFJLENBQUMsQ0FBQ3RDLGFBQWEsQ0FBQ0csTUFBTSxDQUFDb0QsT0FBTyxHQUN0Q2pCLE9BQ0FSLFdBQ0EsSUFBSSxDQUFDekIsS0FBSyxDQUFDNkMsT0FBTyxFQUNsQixJQUFJO2dCQUVOLE1BQU0sSUFBSSxDQUFDMUMsT0FBTyxDQUFDK0MsT0FBTyxHQUN4QmpCLE9BQ0FSLFdBQ0EsSUFBSSxDQUFDekIsS0FBSyxDQUFDNkMsT0FBTztnQkFFcEIsTUFBTSxJQUFJLENBQUMsQ0FBQ2xELGFBQWEsQ0FBQ0csTUFBTSxDQUFDbUQsU0FBUyxHQUN4QyxLQUFLLEdBQ0xoQixPQUNBLElBQUksQ0FBQ2pDLEtBQUssQ0FBQ3lCLFNBQVMsRUFDcEIsSUFBSSxDQUFDekIsS0FBSyxDQUFDNkMsT0FBTyxFQUNsQixJQUFJO2dCQUVOLE1BQU0sSUFBSSxDQUFDMUMsT0FBTyxDQUFDOEMsU0FBUyxHQUMxQixLQUFLLEdBQ0xoQixPQUNBUixXQUNBLElBQUksQ0FBQ3pCLEtBQUssQ0FBQzZDLE9BQU87Z0JBRXBCLE1BQU1aO1lBQ1IsU0FBVTtnQkFDUixJQUFJLENBQUMsQ0FBQ0MsUUFBUSxDQUFDO29CQUFFcEIsTUFBTTtvQkFBU21CO2dCQUFNO1lBQ3hDO1FBQ0YsU0FBVTtZQUNSLElBQUksQ0FBQyxDQUFDdEMsYUFBYSxDQUFDd0QsT0FBTyxDQUFDLElBQUk7UUFDbEM7SUFDRjtJQUNBLENBQUNqQixRQUFRLENBQUNrQixNQUFNO1FBQ2QsTUFBTUMsVUFBVSxDQUFDckQ7WUFDZixPQUFRb0QsT0FBT3RDLElBQUk7Z0JBQ2pCLEtBQUs7b0JBQ0gsT0FBTzt3QkFDTCxHQUFHZCxLQUFLO3dCQUNSZ0MsY0FBY29CLE9BQU9wQixZQUFZO3dCQUNqQ3NCLGVBQWVGLE9BQU9uQixLQUFLO29CQUM3QjtnQkFDRixLQUFLO29CQUNILE9BQU87d0JBQ0wsR0FBR2pDLEtBQUs7d0JBQ1IwQyxVQUFVO29CQUNaO2dCQUNGLEtBQUs7b0JBQ0gsT0FBTzt3QkFDTCxHQUFHMUMsS0FBSzt3QkFDUjBDLFVBQVU7b0JBQ1o7Z0JBQ0YsS0FBSztvQkFDSCxPQUFPO3dCQUNMLEdBQUcxQyxLQUFLO3dCQUNSNkMsU0FBU08sT0FBT1AsT0FBTzt3QkFDdkJDLE1BQU0sS0FBSzt3QkFDWGQsY0FBYzt3QkFDZHNCLGVBQWU7d0JBQ2ZyQixPQUFPO3dCQUNQUyxVQUFVVSxPQUFPVixRQUFRO3dCQUN6QnJCLFFBQVE7d0JBQ1JJLFdBQVcyQixPQUFPM0IsU0FBUzt3QkFDM0I4QixhQUFhQyxLQUFLQyxHQUFHO29CQUN2QjtnQkFDRixLQUFLO29CQUNILE9BQU87d0JBQ0wsR0FBR3pELEtBQUs7d0JBQ1I4QyxNQUFNTSxPQUFPTixJQUFJO3dCQUNqQmQsY0FBYzt3QkFDZHNCLGVBQWU7d0JBQ2ZyQixPQUFPO3dCQUNQWixRQUFRO3dCQUNScUIsVUFBVTtvQkFDWjtnQkFDRixLQUFLO29CQUNILE9BQU87d0JBQ0wsR0FBRzFDLEtBQUs7d0JBQ1I4QyxNQUFNLEtBQUs7d0JBQ1hiLE9BQU9tQixPQUFPbkIsS0FBSzt3QkFDbkJELGNBQWNoQyxNQUFNZ0MsWUFBWSxHQUFHO3dCQUNuQ3NCLGVBQWVGLE9BQU9uQixLQUFLO3dCQUMzQlMsVUFBVTt3QkFDVnJCLFFBQVE7b0JBQ1Y7WUFDSjtRQUNGO1FBQ0EsSUFBSSxDQUFDckIsS0FBSyxHQUFHcUQsUUFBUSxJQUFJLENBQUNyRCxLQUFLO1FBQy9CViw0REFBYUEsQ0FBQ29FLEtBQUssQ0FBQztZQUNsQixJQUFJLENBQUMsQ0FBQ2hFLFNBQVMsQ0FBQ2lFLE9BQU8sQ0FBQyxDQUFDbEQ7Z0JBQ3ZCQSxTQUFTbUQsZ0JBQWdCLENBQUNSO1lBQzVCO1lBQ0EsSUFBSSxDQUFDLENBQUN6RCxhQUFhLENBQUNrQixNQUFNLENBQUM7Z0JBQ3pCRSxVQUFVLElBQUk7Z0JBQ2RELE1BQU07Z0JBQ05zQztZQUNGO1FBQ0Y7SUFDRjtBQUNGO0FBQ0EsU0FBU25EO0lBQ1AsT0FBTztRQUNMNEMsU0FBUyxLQUFLO1FBQ2RDLE1BQU0sS0FBSztRQUNYYixPQUFPO1FBQ1BELGNBQWM7UUFDZHNCLGVBQWU7UUFDZlosVUFBVTtRQUNWckIsUUFBUTtRQUNSSSxXQUFXLEtBQUs7UUFDaEI4QixhQUFhO0lBQ2Y7QUFDRjtBQUlFLENBQ0Ysb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3Jvdy13aXRoLXVzLy4vbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9xdWVyeS1jb3JlL2J1aWxkL21vZGVybi9tdXRhdGlvbi5qcz8zODQ5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9tdXRhdGlvbi50c1xuaW1wb3J0IHsgbm90aWZ5TWFuYWdlciB9IGZyb20gXCIuL25vdGlmeU1hbmFnZXIuanNcIjtcbmltcG9ydCB7IFJlbW92YWJsZSB9IGZyb20gXCIuL3JlbW92YWJsZS5qc1wiO1xuaW1wb3J0IHsgY3JlYXRlUmV0cnllciB9IGZyb20gXCIuL3JldHJ5ZXIuanNcIjtcbnZhciBNdXRhdGlvbiA9IGNsYXNzIGV4dGVuZHMgUmVtb3ZhYmxlIHtcbiAgI29ic2VydmVycztcbiAgI211dGF0aW9uQ2FjaGU7XG4gICNyZXRyeWVyO1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMubXV0YXRpb25JZCA9IGNvbmZpZy5tdXRhdGlvbklkO1xuICAgIHRoaXMuI211dGF0aW9uQ2FjaGUgPSBjb25maWcubXV0YXRpb25DYWNoZTtcbiAgICB0aGlzLiNvYnNlcnZlcnMgPSBbXTtcbiAgICB0aGlzLnN0YXRlID0gY29uZmlnLnN0YXRlIHx8IGdldERlZmF1bHRTdGF0ZSgpO1xuICAgIHRoaXMuc2V0T3B0aW9ucyhjb25maWcub3B0aW9ucyk7XG4gICAgdGhpcy5zY2hlZHVsZUdjKCk7XG4gIH1cbiAgc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLnVwZGF0ZUdjVGltZSh0aGlzLm9wdGlvbnMuZ2NUaW1lKTtcbiAgfVxuICBnZXQgbWV0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLm1ldGE7XG4gIH1cbiAgYWRkT2JzZXJ2ZXIob2JzZXJ2ZXIpIHtcbiAgICBpZiAoIXRoaXMuI29ic2VydmVycy5pbmNsdWRlcyhvYnNlcnZlcikpIHtcbiAgICAgIHRoaXMuI29ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcbiAgICAgIHRoaXMuY2xlYXJHY1RpbWVvdXQoKTtcbiAgICAgIHRoaXMuI211dGF0aW9uQ2FjaGUubm90aWZ5KHtcbiAgICAgICAgdHlwZTogXCJvYnNlcnZlckFkZGVkXCIsXG4gICAgICAgIG11dGF0aW9uOiB0aGlzLFxuICAgICAgICBvYnNlcnZlclxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJlbW92ZU9ic2VydmVyKG9ic2VydmVyKSB7XG4gICAgdGhpcy4jb2JzZXJ2ZXJzID0gdGhpcy4jb2JzZXJ2ZXJzLmZpbHRlcigoeCkgPT4geCAhPT0gb2JzZXJ2ZXIpO1xuICAgIHRoaXMuc2NoZWR1bGVHYygpO1xuICAgIHRoaXMuI211dGF0aW9uQ2FjaGUubm90aWZ5KHtcbiAgICAgIHR5cGU6IFwib2JzZXJ2ZXJSZW1vdmVkXCIsXG4gICAgICBtdXRhdGlvbjogdGhpcyxcbiAgICAgIG9ic2VydmVyXG4gICAgfSk7XG4gIH1cbiAgb3B0aW9uYWxSZW1vdmUoKSB7XG4gICAgaWYgKCF0aGlzLiNvYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5zdGF0dXMgPT09IFwicGVuZGluZ1wiKSB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVHYygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4jbXV0YXRpb25DYWNoZS5yZW1vdmUodGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbnRpbnVlKCkge1xuICAgIHJldHVybiB0aGlzLiNyZXRyeWVyPy5jb250aW51ZSgpID8/IC8vIGNvbnRpbnVpbmcgYSBtdXRhdGlvbiBhc3N1bWVzIHRoYXQgdmFyaWFibGVzIGFyZSBzZXQsIG11dGF0aW9uIG11c3QgaGF2ZSBiZWVuIGRlaHlkcmF0ZWQgYmVmb3JlXG4gICAgdGhpcy5leGVjdXRlKHRoaXMuc3RhdGUudmFyaWFibGVzKTtcbiAgfVxuICBhc3luYyBleGVjdXRlKHZhcmlhYmxlcykge1xuICAgIHRoaXMuI3JldHJ5ZXIgPSBjcmVhdGVSZXRyeWVyKHtcbiAgICAgIGZuOiAoKSA9PiB7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLm11dGF0aW9uRm4pIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gbXV0YXRpb25GbiBmb3VuZFwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5tdXRhdGlvbkZuKHZhcmlhYmxlcyk7XG4gICAgICB9LFxuICAgICAgb25GYWlsOiAoZmFpbHVyZUNvdW50LCBlcnJvcikgPT4ge1xuICAgICAgICB0aGlzLiNkaXNwYXRjaCh7IHR5cGU6IFwiZmFpbGVkXCIsIGZhaWx1cmVDb3VudCwgZXJyb3IgfSk7XG4gICAgICB9LFxuICAgICAgb25QYXVzZTogKCkgPT4ge1xuICAgICAgICB0aGlzLiNkaXNwYXRjaCh7IHR5cGU6IFwicGF1c2VcIiB9KTtcbiAgICAgIH0sXG4gICAgICBvbkNvbnRpbnVlOiAoKSA9PiB7XG4gICAgICAgIHRoaXMuI2Rpc3BhdGNoKHsgdHlwZTogXCJjb250aW51ZVwiIH0pO1xuICAgICAgfSxcbiAgICAgIHJldHJ5OiB0aGlzLm9wdGlvbnMucmV0cnkgPz8gMCxcbiAgICAgIHJldHJ5RGVsYXk6IHRoaXMub3B0aW9ucy5yZXRyeURlbGF5LFxuICAgICAgbmV0d29ya01vZGU6IHRoaXMub3B0aW9ucy5uZXR3b3JrTW9kZSxcbiAgICAgIGNhblJ1bjogKCkgPT4gdGhpcy4jbXV0YXRpb25DYWNoZS5jYW5SdW4odGhpcylcbiAgICB9KTtcbiAgICBjb25zdCByZXN0b3JlZCA9IHRoaXMuc3RhdGUuc3RhdHVzID09PSBcInBlbmRpbmdcIjtcbiAgICBjb25zdCBpc1BhdXNlZCA9ICF0aGlzLiNyZXRyeWVyLmNhblN0YXJ0KCk7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghcmVzdG9yZWQpIHtcbiAgICAgICAgdGhpcy4jZGlzcGF0Y2goeyB0eXBlOiBcInBlbmRpbmdcIiwgdmFyaWFibGVzLCBpc1BhdXNlZCB9KTtcbiAgICAgICAgYXdhaXQgdGhpcy4jbXV0YXRpb25DYWNoZS5jb25maWcub25NdXRhdGU/LihcbiAgICAgICAgICB2YXJpYWJsZXMsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gYXdhaXQgdGhpcy5vcHRpb25zLm9uTXV0YXRlPy4odmFyaWFibGVzKTtcbiAgICAgICAgaWYgKGNvbnRleHQgIT09IHRoaXMuc3RhdGUuY29udGV4dCkge1xuICAgICAgICAgIHRoaXMuI2Rpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6IFwicGVuZGluZ1wiLFxuICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgIHZhcmlhYmxlcyxcbiAgICAgICAgICAgIGlzUGF1c2VkXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLiNyZXRyeWVyLnN0YXJ0KCk7XG4gICAgICBhd2FpdCB0aGlzLiNtdXRhdGlvbkNhY2hlLmNvbmZpZy5vblN1Y2Nlc3M/LihcbiAgICAgICAgZGF0YSxcbiAgICAgICAgdmFyaWFibGVzLFxuICAgICAgICB0aGlzLnN0YXRlLmNvbnRleHQsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgICBhd2FpdCB0aGlzLm9wdGlvbnMub25TdWNjZXNzPy4oZGF0YSwgdmFyaWFibGVzLCB0aGlzLnN0YXRlLmNvbnRleHQpO1xuICAgICAgYXdhaXQgdGhpcy4jbXV0YXRpb25DYWNoZS5jb25maWcub25TZXR0bGVkPy4oXG4gICAgICAgIGRhdGEsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHRoaXMuc3RhdGUudmFyaWFibGVzLFxuICAgICAgICB0aGlzLnN0YXRlLmNvbnRleHQsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgICBhd2FpdCB0aGlzLm9wdGlvbnMub25TZXR0bGVkPy4oZGF0YSwgbnVsbCwgdmFyaWFibGVzLCB0aGlzLnN0YXRlLmNvbnRleHQpO1xuICAgICAgdGhpcy4jZGlzcGF0Y2goeyB0eXBlOiBcInN1Y2Nlc3NcIiwgZGF0YSB9KTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCB0aGlzLiNtdXRhdGlvbkNhY2hlLmNvbmZpZy5vbkVycm9yPy4oXG4gICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgdmFyaWFibGVzLFxuICAgICAgICAgIHRoaXMuc3RhdGUuY29udGV4dCxcbiAgICAgICAgICB0aGlzXG4gICAgICAgICk7XG4gICAgICAgIGF3YWl0IHRoaXMub3B0aW9ucy5vbkVycm9yPy4oXG4gICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgdmFyaWFibGVzLFxuICAgICAgICAgIHRoaXMuc3RhdGUuY29udGV4dFxuICAgICAgICApO1xuICAgICAgICBhd2FpdCB0aGlzLiNtdXRhdGlvbkNhY2hlLmNvbmZpZy5vblNldHRsZWQ/LihcbiAgICAgICAgICB2b2lkIDAsXG4gICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgdGhpcy5zdGF0ZS52YXJpYWJsZXMsXG4gICAgICAgICAgdGhpcy5zdGF0ZS5jb250ZXh0LFxuICAgICAgICAgIHRoaXNcbiAgICAgICAgKTtcbiAgICAgICAgYXdhaXQgdGhpcy5vcHRpb25zLm9uU2V0dGxlZD8uKFxuICAgICAgICAgIHZvaWQgMCxcbiAgICAgICAgICBlcnJvcixcbiAgICAgICAgICB2YXJpYWJsZXMsXG4gICAgICAgICAgdGhpcy5zdGF0ZS5jb250ZXh0XG4gICAgICAgICk7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhpcy4jZGlzcGF0Y2goeyB0eXBlOiBcImVycm9yXCIsIGVycm9yIH0pO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLiNtdXRhdGlvbkNhY2hlLnJ1bk5leHQodGhpcyk7XG4gICAgfVxuICB9XG4gICNkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBjb25zdCByZWR1Y2VyID0gKHN0YXRlKSA9PiB7XG4gICAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgXCJmYWlsZWRcIjpcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICBmYWlsdXJlQ291bnQ6IGFjdGlvbi5mYWlsdXJlQ291bnQsXG4gICAgICAgICAgICBmYWlsdXJlUmVhc29uOiBhY3Rpb24uZXJyb3JcbiAgICAgICAgICB9O1xuICAgICAgICBjYXNlIFwicGF1c2VcIjpcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICBpc1BhdXNlZDogdHJ1ZVxuICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgXCJjb250aW51ZVwiOlxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgIGlzUGF1c2VkOiBmYWxzZVxuICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgXCJwZW5kaW5nXCI6XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgY29udGV4dDogYWN0aW9uLmNvbnRleHQsXG4gICAgICAgICAgICBkYXRhOiB2b2lkIDAsXG4gICAgICAgICAgICBmYWlsdXJlQ291bnQ6IDAsXG4gICAgICAgICAgICBmYWlsdXJlUmVhc29uOiBudWxsLFxuICAgICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgICAgICBpc1BhdXNlZDogYWN0aW9uLmlzUGF1c2VkLFxuICAgICAgICAgICAgc3RhdHVzOiBcInBlbmRpbmdcIixcbiAgICAgICAgICAgIHZhcmlhYmxlczogYWN0aW9uLnZhcmlhYmxlcyxcbiAgICAgICAgICAgIHN1Ym1pdHRlZEF0OiBEYXRlLm5vdygpXG4gICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBcInN1Y2Nlc3NcIjpcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICBkYXRhOiBhY3Rpb24uZGF0YSxcbiAgICAgICAgICAgIGZhaWx1cmVDb3VudDogMCxcbiAgICAgICAgICAgIGZhaWx1cmVSZWFzb246IG51bGwsXG4gICAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgICAgIHN0YXR1czogXCJzdWNjZXNzXCIsXG4gICAgICAgICAgICBpc1BhdXNlZDogZmFsc2VcbiAgICAgICAgICB9O1xuICAgICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICBkYXRhOiB2b2lkIDAsXG4gICAgICAgICAgICBlcnJvcjogYWN0aW9uLmVycm9yLFxuICAgICAgICAgICAgZmFpbHVyZUNvdW50OiBzdGF0ZS5mYWlsdXJlQ291bnQgKyAxLFxuICAgICAgICAgICAgZmFpbHVyZVJlYXNvbjogYWN0aW9uLmVycm9yLFxuICAgICAgICAgICAgaXNQYXVzZWQ6IGZhbHNlLFxuICAgICAgICAgICAgc3RhdHVzOiBcImVycm9yXCJcbiAgICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5zdGF0ZSA9IHJlZHVjZXIodGhpcy5zdGF0ZSk7XG4gICAgbm90aWZ5TWFuYWdlci5iYXRjaCgoKSA9PiB7XG4gICAgICB0aGlzLiNvYnNlcnZlcnMuZm9yRWFjaCgob2JzZXJ2ZXIpID0+IHtcbiAgICAgICAgb2JzZXJ2ZXIub25NdXRhdGlvblVwZGF0ZShhY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICB0aGlzLiNtdXRhdGlvbkNhY2hlLm5vdGlmeSh7XG4gICAgICAgIG11dGF0aW9uOiB0aGlzLFxuICAgICAgICB0eXBlOiBcInVwZGF0ZWRcIixcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGdldERlZmF1bHRTdGF0ZSgpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250ZXh0OiB2b2lkIDAsXG4gICAgZGF0YTogdm9pZCAwLFxuICAgIGVycm9yOiBudWxsLFxuICAgIGZhaWx1cmVDb3VudDogMCxcbiAgICBmYWlsdXJlUmVhc29uOiBudWxsLFxuICAgIGlzUGF1c2VkOiBmYWxzZSxcbiAgICBzdGF0dXM6IFwiaWRsZVwiLFxuICAgIHZhcmlhYmxlczogdm9pZCAwLFxuICAgIHN1Ym1pdHRlZEF0OiAwXG4gIH07XG59XG5leHBvcnQge1xuICBNdXRhdGlvbixcbiAgZ2V0RGVmYXVsdFN0YXRlXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXV0YXRpb24uanMubWFwIl0sIm5hbWVzIjpbIm5vdGlmeU1hbmFnZXIiLCJSZW1vdmFibGUiLCJjcmVhdGVSZXRyeWVyIiwiTXV0YXRpb24iLCJvYnNlcnZlcnMiLCJtdXRhdGlvbkNhY2hlIiwicmV0cnllciIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwibXV0YXRpb25JZCIsInN0YXRlIiwiZ2V0RGVmYXVsdFN0YXRlIiwic2V0T3B0aW9ucyIsIm9wdGlvbnMiLCJzY2hlZHVsZUdjIiwidXBkYXRlR2NUaW1lIiwiZ2NUaW1lIiwibWV0YSIsImFkZE9ic2VydmVyIiwib2JzZXJ2ZXIiLCJpbmNsdWRlcyIsInB1c2giLCJjbGVhckdjVGltZW91dCIsIm5vdGlmeSIsInR5cGUiLCJtdXRhdGlvbiIsInJlbW92ZU9ic2VydmVyIiwiZmlsdGVyIiwieCIsIm9wdGlvbmFsUmVtb3ZlIiwibGVuZ3RoIiwic3RhdHVzIiwicmVtb3ZlIiwiY29udGludWUiLCJleGVjdXRlIiwidmFyaWFibGVzIiwiZm4iLCJtdXRhdGlvbkZuIiwiUHJvbWlzZSIsInJlamVjdCIsIkVycm9yIiwib25GYWlsIiwiZmFpbHVyZUNvdW50IiwiZXJyb3IiLCJkaXNwYXRjaCIsIm9uUGF1c2UiLCJvbkNvbnRpbnVlIiwicmV0cnkiLCJyZXRyeURlbGF5IiwibmV0d29ya01vZGUiLCJjYW5SdW4iLCJyZXN0b3JlZCIsImlzUGF1c2VkIiwiY2FuU3RhcnQiLCJvbk11dGF0ZSIsImNvbnRleHQiLCJkYXRhIiwic3RhcnQiLCJvblN1Y2Nlc3MiLCJvblNldHRsZWQiLCJvbkVycm9yIiwicnVuTmV4dCIsImFjdGlvbiIsInJlZHVjZXIiLCJmYWlsdXJlUmVhc29uIiwic3VibWl0dGVkQXQiLCJEYXRlIiwibm93IiwiYmF0Y2giLCJmb3JFYWNoIiwib25NdXRhdGlvblVwZGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/mutation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/mutationCache.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/mutationCache.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MutationCache: () => (/* binding */ MutationCache)\n/* harmony export */ });\n/* harmony import */ var _notifyManager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./notifyManager.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/notifyManager.js\");\n/* harmony import */ var _mutation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mutation.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/mutation.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/utils.js\");\n/* harmony import */ var _subscribable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/subscribable.js\");\n// src/mutationCache.ts\n\n\n\n\nvar MutationCache = class extends _subscribable_js__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    constructor(config = {}){\n        super();\n        this.config = config;\n        this.#mutations = /* @__PURE__ */ new Set();\n        this.#scopes = /* @__PURE__ */ new Map();\n        this.#mutationId = 0;\n    }\n    #mutations;\n    #scopes;\n    #mutationId;\n    build(client, options, state) {\n        const mutation = new _mutation_js__WEBPACK_IMPORTED_MODULE_1__.Mutation({\n            mutationCache: this,\n            mutationId: ++this.#mutationId,\n            options: client.defaultMutationOptions(options),\n            state\n        });\n        this.add(mutation);\n        return mutation;\n    }\n    add(mutation) {\n        this.#mutations.add(mutation);\n        const scope = scopeFor(mutation);\n        if (typeof scope === \"string\") {\n            const scopedMutations = this.#scopes.get(scope);\n            if (scopedMutations) {\n                scopedMutations.push(mutation);\n            } else {\n                this.#scopes.set(scope, [\n                    mutation\n                ]);\n            }\n        }\n        this.notify({\n            type: \"added\",\n            mutation\n        });\n    }\n    remove(mutation) {\n        if (this.#mutations.delete(mutation)) {\n            const scope = scopeFor(mutation);\n            if (typeof scope === \"string\") {\n                const scopedMutations = this.#scopes.get(scope);\n                if (scopedMutations) {\n                    if (scopedMutations.length > 1) {\n                        const index = scopedMutations.indexOf(mutation);\n                        if (index !== -1) {\n                            scopedMutations.splice(index, 1);\n                        }\n                    } else if (scopedMutations[0] === mutation) {\n                        this.#scopes.delete(scope);\n                    }\n                }\n            }\n        }\n        this.notify({\n            type: \"removed\",\n            mutation\n        });\n    }\n    canRun(mutation) {\n        const scope = scopeFor(mutation);\n        if (typeof scope === \"string\") {\n            const mutationsWithSameScope = this.#scopes.get(scope);\n            const firstPendingMutation = mutationsWithSameScope?.find((m)=>m.state.status === \"pending\");\n            return !firstPendingMutation || firstPendingMutation === mutation;\n        } else {\n            return true;\n        }\n    }\n    runNext(mutation) {\n        const scope = scopeFor(mutation);\n        if (typeof scope === \"string\") {\n            const foundMutation = this.#scopes.get(scope)?.find((m)=>m !== mutation && m.state.isPaused);\n            return foundMutation?.continue() ?? Promise.resolve();\n        } else {\n            return Promise.resolve();\n        }\n    }\n    clear() {\n        _notifyManager_js__WEBPACK_IMPORTED_MODULE_2__.notifyManager.batch(()=>{\n            this.#mutations.forEach((mutation)=>{\n                this.notify({\n                    type: \"removed\",\n                    mutation\n                });\n            });\n            this.#mutations.clear();\n            this.#scopes.clear();\n        });\n    }\n    getAll() {\n        return Array.from(this.#mutations);\n    }\n    find(filters) {\n        const defaultedFilters = {\n            exact: true,\n            ...filters\n        };\n        return this.getAll().find((mutation)=>(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.matchMutation)(defaultedFilters, mutation));\n    }\n    findAll(filters = {}) {\n        return this.getAll().filter((mutation)=>(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.matchMutation)(filters, mutation));\n    }\n    notify(event) {\n        _notifyManager_js__WEBPACK_IMPORTED_MODULE_2__.notifyManager.batch(()=>{\n            this.listeners.forEach((listener)=>{\n                listener(event);\n            });\n        });\n    }\n    resumePausedMutations() {\n        const pausedMutations = this.getAll().filter((x)=>x.state.isPaused);\n        return _notifyManager_js__WEBPACK_IMPORTED_MODULE_2__.notifyManager.batch(()=>Promise.all(pausedMutations.map((mutation)=>mutation.continue().catch(_utils_js__WEBPACK_IMPORTED_MODULE_3__.noop))));\n    }\n};\nfunction scopeFor(mutation) {\n    return mutation.options.scope?.id;\n}\n //# sourceMappingURL=mutationCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/mutationCache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/notifyManager.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/notifyManager.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createNotifyManager: () => (/* binding */ createNotifyManager),\n/* harmony export */   defaultScheduler: () => (/* binding */ defaultScheduler),\n/* harmony export */   notifyManager: () => (/* binding */ notifyManager)\n/* harmony export */ });\n// src/notifyManager.ts\nvar defaultScheduler = (cb)=>setTimeout(cb, 0);\nfunction createNotifyManager() {\n    let queue = [];\n    let transactions = 0;\n    let notifyFn = (callback)=>{\n        callback();\n    };\n    let batchNotifyFn = (callback)=>{\n        callback();\n    };\n    let scheduleFn = defaultScheduler;\n    const schedule = (callback)=>{\n        if (transactions) {\n            queue.push(callback);\n        } else {\n            scheduleFn(()=>{\n                notifyFn(callback);\n            });\n        }\n    };\n    const flush = ()=>{\n        const originalQueue = queue;\n        queue = [];\n        if (originalQueue.length) {\n            scheduleFn(()=>{\n                batchNotifyFn(()=>{\n                    originalQueue.forEach((callback)=>{\n                        notifyFn(callback);\n                    });\n                });\n            });\n        }\n    };\n    return {\n        batch: (callback)=>{\n            let result;\n            transactions++;\n            try {\n                result = callback();\n            } finally{\n                transactions--;\n                if (!transactions) {\n                    flush();\n                }\n            }\n            return result;\n        },\n        /**\n     * All calls to the wrapped function will be batched.\n     */ batchCalls: (callback)=>{\n            return (...args)=>{\n                schedule(()=>{\n                    callback(...args);\n                });\n            };\n        },\n        schedule,\n        /**\n     * Use this method to set a custom notify function.\n     * This can be used to for example wrap notifications with `React.act` while running tests.\n     */ setNotifyFunction: (fn)=>{\n            notifyFn = fn;\n        },\n        /**\n     * Use this method to set a custom function to batch notifications together into a single tick.\n     * By default React Query will use the batch function provided by ReactDOM or React Native.\n     */ setBatchNotifyFunction: (fn)=>{\n            batchNotifyFn = fn;\n        },\n        setScheduler: (fn)=>{\n            scheduleFn = fn;\n        }\n    };\n}\nvar notifyManager = createNotifyManager();\n //# sourceMappingURL=notifyManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbW9kZXJuL25vdGlmeU1hbmFnZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsdUJBQXVCO0FBQ3ZCLElBQUlBLG1CQUFtQixDQUFDQyxLQUFPQyxXQUFXRCxJQUFJO0FBQzlDLFNBQVNFO0lBQ1AsSUFBSUMsUUFBUSxFQUFFO0lBQ2QsSUFBSUMsZUFBZTtJQUNuQixJQUFJQyxXQUFXLENBQUNDO1FBQ2RBO0lBQ0Y7SUFDQSxJQUFJQyxnQkFBZ0IsQ0FBQ0Q7UUFDbkJBO0lBQ0Y7SUFDQSxJQUFJRSxhQUFhVDtJQUNqQixNQUFNVSxXQUFXLENBQUNIO1FBQ2hCLElBQUlGLGNBQWM7WUFDaEJELE1BQU1PLElBQUksQ0FBQ0o7UUFDYixPQUFPO1lBQ0xFLFdBQVc7Z0JBQ1RILFNBQVNDO1lBQ1g7UUFDRjtJQUNGO0lBQ0EsTUFBTUssUUFBUTtRQUNaLE1BQU1DLGdCQUFnQlQ7UUFDdEJBLFFBQVEsRUFBRTtRQUNWLElBQUlTLGNBQWNDLE1BQU0sRUFBRTtZQUN4QkwsV0FBVztnQkFDVEQsY0FBYztvQkFDWkssY0FBY0UsT0FBTyxDQUFDLENBQUNSO3dCQUNyQkQsU0FBU0M7b0JBQ1g7Z0JBQ0Y7WUFDRjtRQUNGO0lBQ0Y7SUFDQSxPQUFPO1FBQ0xTLE9BQU8sQ0FBQ1Q7WUFDTixJQUFJVTtZQUNKWjtZQUNBLElBQUk7Z0JBQ0ZZLFNBQVNWO1lBQ1gsU0FBVTtnQkFDUkY7Z0JBQ0EsSUFBSSxDQUFDQSxjQUFjO29CQUNqQk87Z0JBQ0Y7WUFDRjtZQUNBLE9BQU9LO1FBQ1Q7UUFDQTs7S0FFQyxHQUNEQyxZQUFZLENBQUNYO1lBQ1gsT0FBTyxDQUFDLEdBQUdZO2dCQUNUVCxTQUFTO29CQUNQSCxZQUFZWTtnQkFDZDtZQUNGO1FBQ0Y7UUFDQVQ7UUFDQTs7O0tBR0MsR0FDRFUsbUJBQW1CLENBQUNDO1lBQ2xCZixXQUFXZTtRQUNiO1FBQ0E7OztLQUdDLEdBQ0RDLHdCQUF3QixDQUFDRDtZQUN2QmIsZ0JBQWdCYTtRQUNsQjtRQUNBRSxjQUFjLENBQUNGO1lBQ2JaLGFBQWFZO1FBQ2Y7SUFDRjtBQUNGO0FBQ0EsSUFBSUcsZ0JBQWdCckI7QUFLbEIsQ0FDRix5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncm93LXdpdGgtdXMvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbW9kZXJuL25vdGlmeU1hbmFnZXIuanM/ZjY1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvbm90aWZ5TWFuYWdlci50c1xudmFyIGRlZmF1bHRTY2hlZHVsZXIgPSAoY2IpID0+IHNldFRpbWVvdXQoY2IsIDApO1xuZnVuY3Rpb24gY3JlYXRlTm90aWZ5TWFuYWdlcigpIHtcbiAgbGV0IHF1ZXVlID0gW107XG4gIGxldCB0cmFuc2FjdGlvbnMgPSAwO1xuICBsZXQgbm90aWZ5Rm4gPSAoY2FsbGJhY2spID0+IHtcbiAgICBjYWxsYmFjaygpO1xuICB9O1xuICBsZXQgYmF0Y2hOb3RpZnlGbiA9IChjYWxsYmFjaykgPT4ge1xuICAgIGNhbGxiYWNrKCk7XG4gIH07XG4gIGxldCBzY2hlZHVsZUZuID0gZGVmYXVsdFNjaGVkdWxlcjtcbiAgY29uc3Qgc2NoZWR1bGUgPSAoY2FsbGJhY2spID0+IHtcbiAgICBpZiAodHJhbnNhY3Rpb25zKSB7XG4gICAgICBxdWV1ZS5wdXNoKGNhbGxiYWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NoZWR1bGVGbigoKSA9PiB7XG4gICAgICAgIG5vdGlmeUZuKGNhbGxiYWNrKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgZmx1c2ggPSAoKSA9PiB7XG4gICAgY29uc3Qgb3JpZ2luYWxRdWV1ZSA9IHF1ZXVlO1xuICAgIHF1ZXVlID0gW107XG4gICAgaWYgKG9yaWdpbmFsUXVldWUubGVuZ3RoKSB7XG4gICAgICBzY2hlZHVsZUZuKCgpID0+IHtcbiAgICAgICAgYmF0Y2hOb3RpZnlGbigoKSA9PiB7XG4gICAgICAgICAgb3JpZ2luYWxRdWV1ZS5mb3JFYWNoKChjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgbm90aWZ5Rm4oY2FsbGJhY2spO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBiYXRjaDogKGNhbGxiYWNrKSA9PiB7XG4gICAgICBsZXQgcmVzdWx0O1xuICAgICAgdHJhbnNhY3Rpb25zKys7XG4gICAgICB0cnkge1xuICAgICAgICByZXN1bHQgPSBjYWxsYmFjaygpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdHJhbnNhY3Rpb25zLS07XG4gICAgICAgIGlmICghdHJhbnNhY3Rpb25zKSB7XG4gICAgICAgICAgZmx1c2goKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEFsbCBjYWxscyB0byB0aGUgd3JhcHBlZCBmdW5jdGlvbiB3aWxsIGJlIGJhdGNoZWQuXG4gICAgICovXG4gICAgYmF0Y2hDYWxsczogKGNhbGxiYWNrKSA9PiB7XG4gICAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgc2NoZWR1bGUoKCkgPT4ge1xuICAgICAgICAgIGNhbGxiYWNrKC4uLmFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSxcbiAgICBzY2hlZHVsZSxcbiAgICAvKipcbiAgICAgKiBVc2UgdGhpcyBtZXRob2QgdG8gc2V0IGEgY3VzdG9tIG5vdGlmeSBmdW5jdGlvbi5cbiAgICAgKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGZvciBleGFtcGxlIHdyYXAgbm90aWZpY2F0aW9ucyB3aXRoIGBSZWFjdC5hY3RgIHdoaWxlIHJ1bm5pbmcgdGVzdHMuXG4gICAgICovXG4gICAgc2V0Tm90aWZ5RnVuY3Rpb246IChmbikgPT4ge1xuICAgICAgbm90aWZ5Rm4gPSBmbjtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFVzZSB0aGlzIG1ldGhvZCB0byBzZXQgYSBjdXN0b20gZnVuY3Rpb24gdG8gYmF0Y2ggbm90aWZpY2F0aW9ucyB0b2dldGhlciBpbnRvIGEgc2luZ2xlIHRpY2suXG4gICAgICogQnkgZGVmYXVsdCBSZWFjdCBRdWVyeSB3aWxsIHVzZSB0aGUgYmF0Y2ggZnVuY3Rpb24gcHJvdmlkZWQgYnkgUmVhY3RET00gb3IgUmVhY3QgTmF0aXZlLlxuICAgICAqL1xuICAgIHNldEJhdGNoTm90aWZ5RnVuY3Rpb246IChmbikgPT4ge1xuICAgICAgYmF0Y2hOb3RpZnlGbiA9IGZuO1xuICAgIH0sXG4gICAgc2V0U2NoZWR1bGVyOiAoZm4pID0+IHtcbiAgICAgIHNjaGVkdWxlRm4gPSBmbjtcbiAgICB9XG4gIH07XG59XG52YXIgbm90aWZ5TWFuYWdlciA9IGNyZWF0ZU5vdGlmeU1hbmFnZXIoKTtcbmV4cG9ydCB7XG4gIGNyZWF0ZU5vdGlmeU1hbmFnZXIsXG4gIGRlZmF1bHRTY2hlZHVsZXIsXG4gIG5vdGlmeU1hbmFnZXJcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub3RpZnlNYW5hZ2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJkZWZhdWx0U2NoZWR1bGVyIiwiY2IiLCJzZXRUaW1lb3V0IiwiY3JlYXRlTm90aWZ5TWFuYWdlciIsInF1ZXVlIiwidHJhbnNhY3Rpb25zIiwibm90aWZ5Rm4iLCJjYWxsYmFjayIsImJhdGNoTm90aWZ5Rm4iLCJzY2hlZHVsZUZuIiwic2NoZWR1bGUiLCJwdXNoIiwiZmx1c2giLCJvcmlnaW5hbFF1ZXVlIiwibGVuZ3RoIiwiZm9yRWFjaCIsImJhdGNoIiwicmVzdWx0IiwiYmF0Y2hDYWxscyIsImFyZ3MiLCJzZXROb3RpZnlGdW5jdGlvbiIsImZuIiwic2V0QmF0Y2hOb3RpZnlGdW5jdGlvbiIsInNldFNjaGVkdWxlciIsIm5vdGlmeU1hbmFnZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/notifyManager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/onlineManager.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/onlineManager.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OnlineManager: () => (/* binding */ OnlineManager),\n/* harmony export */   onlineManager: () => (/* binding */ onlineManager)\n/* harmony export */ });\n/* harmony import */ var _subscribable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/subscribable.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/utils.js\");\n// src/onlineManager.ts\n\n\nvar OnlineManager = class extends _subscribable_js__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    #online;\n    #cleanup;\n    #setup;\n    constructor(){\n        super();\n        this.#online = true;\n        this.#setup = (onOnline)=>{\n            if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__.isServer && window.addEventListener) {\n                const onlineListener = ()=>onOnline(true);\n                const offlineListener = ()=>onOnline(false);\n                window.addEventListener(\"online\", onlineListener, false);\n                window.addEventListener(\"offline\", offlineListener, false);\n                return ()=>{\n                    window.removeEventListener(\"online\", onlineListener);\n                    window.removeEventListener(\"offline\", offlineListener);\n                };\n            }\n            return;\n        };\n    }\n    onSubscribe() {\n        if (!this.#cleanup) {\n            this.setEventListener(this.#setup);\n        }\n    }\n    onUnsubscribe() {\n        if (!this.hasListeners()) {\n            this.#cleanup?.();\n            this.#cleanup = void 0;\n        }\n    }\n    setEventListener(setup) {\n        this.#setup = setup;\n        this.#cleanup?.();\n        this.#cleanup = setup(this.setOnline.bind(this));\n    }\n    setOnline(online) {\n        const changed = this.#online !== online;\n        if (changed) {\n            this.#online = online;\n            this.listeners.forEach((listener)=>{\n                listener(online);\n            });\n        }\n    }\n    isOnline() {\n        return this.#online;\n    }\n};\nvar onlineManager = new OnlineManager();\n //# sourceMappingURL=onlineManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbW9kZXJuL29ubGluZU1hbmFnZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLHVCQUF1QjtBQUMwQjtBQUNYO0FBQ3RDLElBQUlFLGdCQUFnQixjQUFjRiwwREFBWUE7SUFDNUMsQ0FBQ0csTUFBTSxDQUFRO0lBQ2YsQ0FBQ0MsT0FBTyxDQUFDO0lBQ1QsQ0FBQ0MsS0FBSyxDQUFDO0lBQ1BDLGFBQWM7UUFDWixLQUFLO2FBSlAsQ0FBQ0gsTUFBTSxHQUFHO1FBS1IsSUFBSSxDQUFDLENBQUNFLEtBQUssR0FBRyxDQUFDRTtZQUNiLElBQUksQ0FBQ04sK0NBQVFBLElBQUlPLE9BQU9DLGdCQUFnQixFQUFFO2dCQUN4QyxNQUFNQyxpQkFBaUIsSUFBTUgsU0FBUztnQkFDdEMsTUFBTUksa0JBQWtCLElBQU1KLFNBQVM7Z0JBQ3ZDQyxPQUFPQyxnQkFBZ0IsQ0FBQyxVQUFVQyxnQkFBZ0I7Z0JBQ2xERixPQUFPQyxnQkFBZ0IsQ0FBQyxXQUFXRSxpQkFBaUI7Z0JBQ3BELE9BQU87b0JBQ0xILE9BQU9JLG1CQUFtQixDQUFDLFVBQVVGO29CQUNyQ0YsT0FBT0ksbUJBQW1CLENBQUMsV0FBV0Q7Z0JBQ3hDO1lBQ0Y7WUFDQTtRQUNGO0lBQ0Y7SUFDQUUsY0FBYztRQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQ1QsT0FBTyxFQUFFO1lBQ2xCLElBQUksQ0FBQ1UsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUNULEtBQUs7UUFDbkM7SUFDRjtJQUNBVSxnQkFBZ0I7UUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDQyxZQUFZLElBQUk7WUFDeEIsSUFBSSxDQUFDLENBQUNaLE9BQU87WUFDYixJQUFJLENBQUMsQ0FBQ0EsT0FBTyxHQUFHLEtBQUs7UUFDdkI7SUFDRjtJQUNBVSxpQkFBaUJULEtBQUssRUFBRTtRQUN0QixJQUFJLENBQUMsQ0FBQ0EsS0FBSyxHQUFHQTtRQUNkLElBQUksQ0FBQyxDQUFDRCxPQUFPO1FBQ2IsSUFBSSxDQUFDLENBQUNBLE9BQU8sR0FBR0MsTUFBTSxJQUFJLENBQUNZLFNBQVMsQ0FBQ0MsSUFBSSxDQUFDLElBQUk7SUFDaEQ7SUFDQUQsVUFBVWQsTUFBTSxFQUFFO1FBQ2hCLE1BQU1nQixVQUFVLElBQUksQ0FBQyxDQUFDaEIsTUFBTSxLQUFLQTtRQUNqQyxJQUFJZ0IsU0FBUztZQUNYLElBQUksQ0FBQyxDQUFDaEIsTUFBTSxHQUFHQTtZQUNmLElBQUksQ0FBQ2lCLFNBQVMsQ0FBQ0MsT0FBTyxDQUFDLENBQUNDO2dCQUN0QkEsU0FBU25CO1lBQ1g7UUFDRjtJQUNGO0lBQ0FvQixXQUFXO1FBQ1QsT0FBTyxJQUFJLENBQUMsQ0FBQ3BCLE1BQU07SUFDckI7QUFDRjtBQUNBLElBQUlxQixnQkFBZ0IsSUFBSXRCO0FBSXRCLENBQ0YseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3Jvdy13aXRoLXVzLy4vbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9xdWVyeS1jb3JlL2J1aWxkL21vZGVybi9vbmxpbmVNYW5hZ2VyLmpzP2UyYTMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL29ubGluZU1hbmFnZXIudHNcbmltcG9ydCB7IFN1YnNjcmliYWJsZSB9IGZyb20gXCIuL3N1YnNjcmliYWJsZS5qc1wiO1xuaW1wb3J0IHsgaXNTZXJ2ZXIgfSBmcm9tIFwiLi91dGlscy5qc1wiO1xudmFyIE9ubGluZU1hbmFnZXIgPSBjbGFzcyBleHRlbmRzIFN1YnNjcmliYWJsZSB7XG4gICNvbmxpbmUgPSB0cnVlO1xuICAjY2xlYW51cDtcbiAgI3NldHVwO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuI3NldHVwID0gKG9uT25saW5lKSA9PiB7XG4gICAgICBpZiAoIWlzU2VydmVyICYmIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgIGNvbnN0IG9ubGluZUxpc3RlbmVyID0gKCkgPT4gb25PbmxpbmUodHJ1ZSk7XG4gICAgICAgIGNvbnN0IG9mZmxpbmVMaXN0ZW5lciA9ICgpID0+IG9uT25saW5lKGZhbHNlKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvbmxpbmVcIiwgb25saW5lTGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvZmZsaW5lXCIsIG9mZmxpbmVMaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwib25saW5lXCIsIG9ubGluZUxpc3RlbmVyKTtcbiAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm9mZmxpbmVcIiwgb2ZmbGluZUxpc3RlbmVyKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9O1xuICB9XG4gIG9uU3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy4jY2xlYW51cCkge1xuICAgICAgdGhpcy5zZXRFdmVudExpc3RlbmVyKHRoaXMuI3NldHVwKTtcbiAgICB9XG4gIH1cbiAgb25VbnN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMuaGFzTGlzdGVuZXJzKCkpIHtcbiAgICAgIHRoaXMuI2NsZWFudXA/LigpO1xuICAgICAgdGhpcy4jY2xlYW51cCA9IHZvaWQgMDtcbiAgICB9XG4gIH1cbiAgc2V0RXZlbnRMaXN0ZW5lcihzZXR1cCkge1xuICAgIHRoaXMuI3NldHVwID0gc2V0dXA7XG4gICAgdGhpcy4jY2xlYW51cD8uKCk7XG4gICAgdGhpcy4jY2xlYW51cCA9IHNldHVwKHRoaXMuc2V0T25saW5lLmJpbmQodGhpcykpO1xuICB9XG4gIHNldE9ubGluZShvbmxpbmUpIHtcbiAgICBjb25zdCBjaGFuZ2VkID0gdGhpcy4jb25saW5lICE9PSBvbmxpbmU7XG4gICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgIHRoaXMuI29ubGluZSA9IG9ubGluZTtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyKSA9PiB7XG4gICAgICAgIGxpc3RlbmVyKG9ubGluZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgaXNPbmxpbmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuI29ubGluZTtcbiAgfVxufTtcbnZhciBvbmxpbmVNYW5hZ2VyID0gbmV3IE9ubGluZU1hbmFnZXIoKTtcbmV4cG9ydCB7XG4gIE9ubGluZU1hbmFnZXIsXG4gIG9ubGluZU1hbmFnZXJcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbmxpbmVNYW5hZ2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJTdWJzY3JpYmFibGUiLCJpc1NlcnZlciIsIk9ubGluZU1hbmFnZXIiLCJvbmxpbmUiLCJjbGVhbnVwIiwic2V0dXAiLCJjb25zdHJ1Y3RvciIsIm9uT25saW5lIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9ubGluZUxpc3RlbmVyIiwib2ZmbGluZUxpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9uU3Vic2NyaWJlIiwic2V0RXZlbnRMaXN0ZW5lciIsIm9uVW5zdWJzY3JpYmUiLCJoYXNMaXN0ZW5lcnMiLCJzZXRPbmxpbmUiLCJiaW5kIiwiY2hhbmdlZCIsImxpc3RlbmVycyIsImZvckVhY2giLCJsaXN0ZW5lciIsImlzT25saW5lIiwib25saW5lTWFuYWdlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/onlineManager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/query.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/query.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Query: () => (/* binding */ Query),\n/* harmony export */   fetchState: () => (/* binding */ fetchState)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/utils.js\");\n/* harmony import */ var _notifyManager_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./notifyManager.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/notifyManager.js\");\n/* harmony import */ var _retryer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./retryer.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/retryer.js\");\n/* harmony import */ var _removable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./removable.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/removable.js\");\n// src/query.ts\n\n\n\n\nvar Query = class extends _removable_js__WEBPACK_IMPORTED_MODULE_0__.Removable {\n    #initialState;\n    #revertState;\n    #cache;\n    #client;\n    #retryer;\n    #defaultOptions;\n    #abortSignalConsumed;\n    constructor(config){\n        super();\n        this.#abortSignalConsumed = false;\n        this.#defaultOptions = config.defaultOptions;\n        this.setOptions(config.options);\n        this.observers = [];\n        this.#client = config.client;\n        this.#cache = this.#client.getQueryCache();\n        this.queryKey = config.queryKey;\n        this.queryHash = config.queryHash;\n        this.#initialState = getDefaultState(this.options);\n        this.state = config.state ?? this.#initialState;\n        this.scheduleGc();\n    }\n    get meta() {\n        return this.options.meta;\n    }\n    get promise() {\n        return this.#retryer?.promise;\n    }\n    setOptions(options) {\n        this.options = {\n            ...this.#defaultOptions,\n            ...options\n        };\n        this.updateGcTime(this.options.gcTime);\n    }\n    optionalRemove() {\n        if (!this.observers.length && this.state.fetchStatus === \"idle\") {\n            this.#cache.remove(this);\n        }\n    }\n    setData(newData, options) {\n        const data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.replaceData)(this.state.data, newData, this.options);\n        this.#dispatch({\n            data,\n            type: \"success\",\n            dataUpdatedAt: options?.updatedAt,\n            manual: options?.manual\n        });\n        return data;\n    }\n    setState(state, setStateOptions) {\n        this.#dispatch({\n            type: \"setState\",\n            state,\n            setStateOptions\n        });\n    }\n    cancel(options) {\n        const promise = this.#retryer?.promise;\n        this.#retryer?.cancel(options);\n        return promise ? promise.then(_utils_js__WEBPACK_IMPORTED_MODULE_1__.noop).catch(_utils_js__WEBPACK_IMPORTED_MODULE_1__.noop) : Promise.resolve();\n    }\n    destroy() {\n        super.destroy();\n        this.cancel({\n            silent: true\n        });\n    }\n    reset() {\n        this.destroy();\n        this.setState(this.#initialState);\n    }\n    isActive() {\n        return this.observers.some((observer)=>(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.resolveEnabled)(observer.options.enabled, this) !== false);\n    }\n    isDisabled() {\n        if (this.getObserversCount() > 0) {\n            return !this.isActive();\n        }\n        return this.options.queryFn === _utils_js__WEBPACK_IMPORTED_MODULE_1__.skipToken || this.state.dataUpdateCount + this.state.errorUpdateCount === 0;\n    }\n    isStale() {\n        if (this.state.isInvalidated) {\n            return true;\n        }\n        if (this.getObserversCount() > 0) {\n            return this.observers.some((observer)=>observer.getCurrentResult().isStale);\n        }\n        return this.state.data === void 0;\n    }\n    isStaleByTime(staleTime = 0) {\n        return this.state.isInvalidated || this.state.data === void 0 || !(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.timeUntilStale)(this.state.dataUpdatedAt, staleTime);\n    }\n    onFocus() {\n        const observer = this.observers.find((x)=>x.shouldFetchOnWindowFocus());\n        observer?.refetch({\n            cancelRefetch: false\n        });\n        this.#retryer?.continue();\n    }\n    onOnline() {\n        const observer = this.observers.find((x)=>x.shouldFetchOnReconnect());\n        observer?.refetch({\n            cancelRefetch: false\n        });\n        this.#retryer?.continue();\n    }\n    addObserver(observer) {\n        if (!this.observers.includes(observer)) {\n            this.observers.push(observer);\n            this.clearGcTimeout();\n            this.#cache.notify({\n                type: \"observerAdded\",\n                query: this,\n                observer\n            });\n        }\n    }\n    removeObserver(observer) {\n        if (this.observers.includes(observer)) {\n            this.observers = this.observers.filter((x)=>x !== observer);\n            if (!this.observers.length) {\n                if (this.#retryer) {\n                    if (this.#abortSignalConsumed) {\n                        this.#retryer.cancel({\n                            revert: true\n                        });\n                    } else {\n                        this.#retryer.cancelRetry();\n                    }\n                }\n                this.scheduleGc();\n            }\n            this.#cache.notify({\n                type: \"observerRemoved\",\n                query: this,\n                observer\n            });\n        }\n    }\n    getObserversCount() {\n        return this.observers.length;\n    }\n    invalidate() {\n        if (!this.state.isInvalidated) {\n            this.#dispatch({\n                type: \"invalidate\"\n            });\n        }\n    }\n    fetch(options, fetchOptions) {\n        if (this.state.fetchStatus !== \"idle\") {\n            if (this.state.data !== void 0 && fetchOptions?.cancelRefetch) {\n                this.cancel({\n                    silent: true\n                });\n            } else if (this.#retryer) {\n                this.#retryer.continueRetry();\n                return this.#retryer.promise;\n            }\n        }\n        if (options) {\n            this.setOptions(options);\n        }\n        if (!this.options.queryFn) {\n            const observer = this.observers.find((x)=>x.options.queryFn);\n            if (observer) {\n                this.setOptions(observer.options);\n            }\n        }\n        if (true) {\n            if (!Array.isArray(this.options.queryKey)) {\n                console.error(`As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`);\n            }\n        }\n        const abortController = new AbortController();\n        const addSignalProperty = (object)=>{\n            Object.defineProperty(object, \"signal\", {\n                enumerable: true,\n                get: ()=>{\n                    this.#abortSignalConsumed = true;\n                    return abortController.signal;\n                }\n            });\n        };\n        const fetchFn = ()=>{\n            const queryFn = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureQueryFn)(this.options, fetchOptions);\n            const queryFnContext = {\n                client: this.#client,\n                queryKey: this.queryKey,\n                meta: this.meta\n            };\n            addSignalProperty(queryFnContext);\n            this.#abortSignalConsumed = false;\n            if (this.options.persister) {\n                return this.options.persister(queryFn, queryFnContext, this);\n            }\n            return queryFn(queryFnContext);\n        };\n        const context = {\n            fetchOptions,\n            options: this.options,\n            queryKey: this.queryKey,\n            client: this.#client,\n            state: this.state,\n            fetchFn\n        };\n        addSignalProperty(context);\n        this.options.behavior?.onFetch(context, this);\n        this.#revertState = this.state;\n        if (this.state.fetchStatus === \"idle\" || this.state.fetchMeta !== context.fetchOptions?.meta) {\n            this.#dispatch({\n                type: \"fetch\",\n                meta: context.fetchOptions?.meta\n            });\n        }\n        const onError = (error)=>{\n            if (!((0,_retryer_js__WEBPACK_IMPORTED_MODULE_2__.isCancelledError)(error) && error.silent)) {\n                this.#dispatch({\n                    type: \"error\",\n                    error\n                });\n            }\n            if (!(0,_retryer_js__WEBPACK_IMPORTED_MODULE_2__.isCancelledError)(error)) {\n                this.#cache.config.onError?.(error, this);\n                this.#cache.config.onSettled?.(this.state.data, error, this);\n            }\n            this.scheduleGc();\n        };\n        this.#retryer = (0,_retryer_js__WEBPACK_IMPORTED_MODULE_2__.createRetryer)({\n            initialPromise: fetchOptions?.initialPromise,\n            fn: context.fetchFn,\n            abort: abortController.abort.bind(abortController),\n            onSuccess: (data)=>{\n                if (data === void 0) {\n                    if (true) {\n                        console.error(`Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`);\n                    }\n                    onError(new Error(`${this.queryHash} data is undefined`));\n                    return;\n                }\n                try {\n                    this.setData(data);\n                } catch (error) {\n                    onError(error);\n                    return;\n                }\n                this.#cache.config.onSuccess?.(data, this);\n                this.#cache.config.onSettled?.(data, this.state.error, this);\n                this.scheduleGc();\n            },\n            onError,\n            onFail: (failureCount, error)=>{\n                this.#dispatch({\n                    type: \"failed\",\n                    failureCount,\n                    error\n                });\n            },\n            onPause: ()=>{\n                this.#dispatch({\n                    type: \"pause\"\n                });\n            },\n            onContinue: ()=>{\n                this.#dispatch({\n                    type: \"continue\"\n                });\n            },\n            retry: context.options.retry,\n            retryDelay: context.options.retryDelay,\n            networkMode: context.options.networkMode,\n            canRun: ()=>true\n        });\n        return this.#retryer.start();\n    }\n    #dispatch(action) {\n        const reducer = (state)=>{\n            switch(action.type){\n                case \"failed\":\n                    return {\n                        ...state,\n                        fetchFailureCount: action.failureCount,\n                        fetchFailureReason: action.error\n                    };\n                case \"pause\":\n                    return {\n                        ...state,\n                        fetchStatus: \"paused\"\n                    };\n                case \"continue\":\n                    return {\n                        ...state,\n                        fetchStatus: \"fetching\"\n                    };\n                case \"fetch\":\n                    return {\n                        ...state,\n                        ...fetchState(state.data, this.options),\n                        fetchMeta: action.meta ?? null\n                    };\n                case \"success\":\n                    return {\n                        ...state,\n                        data: action.data,\n                        dataUpdateCount: state.dataUpdateCount + 1,\n                        dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n                        error: null,\n                        isInvalidated: false,\n                        status: \"success\",\n                        ...!action.manual && {\n                            fetchStatus: \"idle\",\n                            fetchFailureCount: 0,\n                            fetchFailureReason: null\n                        }\n                    };\n                case \"error\":\n                    const error = action.error;\n                    if ((0,_retryer_js__WEBPACK_IMPORTED_MODULE_2__.isCancelledError)(error) && error.revert && this.#revertState) {\n                        return {\n                            ...this.#revertState,\n                            fetchStatus: \"idle\"\n                        };\n                    }\n                    return {\n                        ...state,\n                        error,\n                        errorUpdateCount: state.errorUpdateCount + 1,\n                        errorUpdatedAt: Date.now(),\n                        fetchFailureCount: state.fetchFailureCount + 1,\n                        fetchFailureReason: error,\n                        fetchStatus: \"idle\",\n                        status: \"error\"\n                    };\n                case \"invalidate\":\n                    return {\n                        ...state,\n                        isInvalidated: true\n                    };\n                case \"setState\":\n                    return {\n                        ...state,\n                        ...action.state\n                    };\n            }\n        };\n        this.state = reducer(this.state);\n        _notifyManager_js__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            this.observers.forEach((observer)=>{\n                observer.onQueryUpdate();\n            });\n            this.#cache.notify({\n                query: this,\n                type: \"updated\",\n                action\n            });\n        });\n    }\n};\nfunction fetchState(data, options) {\n    return {\n        fetchFailureCount: 0,\n        fetchFailureReason: null,\n        fetchStatus: (0,_retryer_js__WEBPACK_IMPORTED_MODULE_2__.canFetch)(options.networkMode) ? \"fetching\" : \"paused\",\n        ...data === void 0 && {\n            error: null,\n            status: \"pending\"\n        }\n    };\n}\nfunction getDefaultState(options) {\n    const data = typeof options.initialData === \"function\" ? options.initialData() : options.initialData;\n    const hasData = data !== void 0;\n    const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === \"function\" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n    return {\n        data,\n        dataUpdateCount: 0,\n        dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n        error: null,\n        errorUpdateCount: 0,\n        errorUpdatedAt: 0,\n        fetchFailureCount: 0,\n        fetchFailureReason: null,\n        fetchMeta: null,\n        isInvalidated: false,\n        status: hasData ? \"success\" : \"pending\",\n        fetchStatus: \"idle\"\n    };\n}\n //# sourceMappingURL=query.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/query.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/queryCache.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/queryCache.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryCache: () => (/* binding */ QueryCache)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/utils.js\");\n/* harmony import */ var _query_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./query.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/query.js\");\n/* harmony import */ var _notifyManager_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./notifyManager.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/notifyManager.js\");\n/* harmony import */ var _subscribable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/subscribable.js\");\n// src/queryCache.ts\n\n\n\n\nvar QueryCache = class extends _subscribable_js__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    constructor(config = {}){\n        super();\n        this.config = config;\n        this.#queries = /* @__PURE__ */ new Map();\n    }\n    #queries;\n    build(client, options, state) {\n        const queryKey = options.queryKey;\n        const queryHash = options.queryHash ?? (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.hashQueryKeyByOptions)(queryKey, options);\n        let query = this.get(queryHash);\n        if (!query) {\n            query = new _query_js__WEBPACK_IMPORTED_MODULE_2__.Query({\n                client,\n                queryKey,\n                queryHash,\n                options: client.defaultQueryOptions(options),\n                state,\n                defaultOptions: client.getQueryDefaults(queryKey)\n            });\n            this.add(query);\n        }\n        return query;\n    }\n    add(query) {\n        if (!this.#queries.has(query.queryHash)) {\n            this.#queries.set(query.queryHash, query);\n            this.notify({\n                type: \"added\",\n                query\n            });\n        }\n    }\n    remove(query) {\n        const queryInMap = this.#queries.get(query.queryHash);\n        if (queryInMap) {\n            query.destroy();\n            if (queryInMap === query) {\n                this.#queries.delete(query.queryHash);\n            }\n            this.notify({\n                type: \"removed\",\n                query\n            });\n        }\n    }\n    clear() {\n        _notifyManager_js__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            this.getAll().forEach((query)=>{\n                this.remove(query);\n            });\n        });\n    }\n    get(queryHash) {\n        return this.#queries.get(queryHash);\n    }\n    getAll() {\n        return [\n            ...this.#queries.values()\n        ];\n    }\n    find(filters) {\n        const defaultedFilters = {\n            exact: true,\n            ...filters\n        };\n        return this.getAll().find((query)=>(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.matchQuery)(defaultedFilters, query));\n    }\n    findAll(filters = {}) {\n        const queries = this.getAll();\n        return Object.keys(filters).length > 0 ? queries.filter((query)=>(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.matchQuery)(filters, query)) : queries;\n    }\n    notify(event) {\n        _notifyManager_js__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            this.listeners.forEach((listener)=>{\n                listener(event);\n            });\n        });\n    }\n    onFocus() {\n        _notifyManager_js__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            this.getAll().forEach((query)=>{\n                query.onFocus();\n            });\n        });\n    }\n    onOnline() {\n        _notifyManager_js__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            this.getAll().forEach((query)=>{\n                query.onOnline();\n            });\n        });\n    }\n};\n //# sourceMappingURL=queryCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbW9kZXJuL3F1ZXJ5Q2FjaGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxvQkFBb0I7QUFDMkM7QUFDNUI7QUFDZ0I7QUFDRjtBQUNqRCxJQUFJSyxhQUFhLGNBQWNELDBEQUFZQTtJQUN6Q0UsWUFBWUMsU0FBUyxDQUFDLENBQUMsQ0FBRTtRQUN2QixLQUFLO1FBQ0wsSUFBSSxDQUFDQSxNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDLENBQUNDLE9BQU8sR0FBRyxhQUFhLEdBQUcsSUFBSUM7SUFDdEM7SUFDQSxDQUFDRCxPQUFPLENBQUM7SUFDVEUsTUFBTUMsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLEtBQUssRUFBRTtRQUM1QixNQUFNQyxXQUFXRixRQUFRRSxRQUFRO1FBQ2pDLE1BQU1DLFlBQVlILFFBQVFHLFNBQVMsSUFBSWYsZ0VBQXFCQSxDQUFDYyxVQUFVRjtRQUN2RSxJQUFJSSxRQUFRLElBQUksQ0FBQ0MsR0FBRyxDQUFDRjtRQUNyQixJQUFJLENBQUNDLE9BQU87WUFDVkEsUUFBUSxJQUFJZCw0Q0FBS0EsQ0FBQztnQkFDaEJTO2dCQUNBRztnQkFDQUM7Z0JBQ0FILFNBQVNELE9BQU9PLG1CQUFtQixDQUFDTjtnQkFDcENDO2dCQUNBTSxnQkFBZ0JSLE9BQU9TLGdCQUFnQixDQUFDTjtZQUMxQztZQUNBLElBQUksQ0FBQ08sR0FBRyxDQUFDTDtRQUNYO1FBQ0EsT0FBT0E7SUFDVDtJQUNBSyxJQUFJTCxLQUFLLEVBQUU7UUFDVCxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUNSLE9BQU8sQ0FBQ2MsR0FBRyxDQUFDTixNQUFNRCxTQUFTLEdBQUc7WUFDdkMsSUFBSSxDQUFDLENBQUNQLE9BQU8sQ0FBQ2UsR0FBRyxDQUFDUCxNQUFNRCxTQUFTLEVBQUVDO1lBQ25DLElBQUksQ0FBQ1EsTUFBTSxDQUFDO2dCQUNWQyxNQUFNO2dCQUNOVDtZQUNGO1FBQ0Y7SUFDRjtJQUNBVSxPQUFPVixLQUFLLEVBQUU7UUFDWixNQUFNVyxhQUFhLElBQUksQ0FBQyxDQUFDbkIsT0FBTyxDQUFDUyxHQUFHLENBQUNELE1BQU1ELFNBQVM7UUFDcEQsSUFBSVksWUFBWTtZQUNkWCxNQUFNWSxPQUFPO1lBQ2IsSUFBSUQsZUFBZVgsT0FBTztnQkFDeEIsSUFBSSxDQUFDLENBQUNSLE9BQU8sQ0FBQ3FCLE1BQU0sQ0FBQ2IsTUFBTUQsU0FBUztZQUN0QztZQUNBLElBQUksQ0FBQ1MsTUFBTSxDQUFDO2dCQUFFQyxNQUFNO2dCQUFXVDtZQUFNO1FBQ3ZDO0lBQ0Y7SUFDQWMsUUFBUTtRQUNOM0IsNERBQWFBLENBQUM0QixLQUFLLENBQUM7WUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxDQUFDakI7Z0JBQ3JCLElBQUksQ0FBQ1UsTUFBTSxDQUFDVjtZQUNkO1FBQ0Y7SUFDRjtJQUNBQyxJQUFJRixTQUFTLEVBQUU7UUFDYixPQUFPLElBQUksQ0FBQyxDQUFDUCxPQUFPLENBQUNTLEdBQUcsQ0FBQ0Y7SUFDM0I7SUFDQWlCLFNBQVM7UUFDUCxPQUFPO2VBQUksSUFBSSxDQUFDLENBQUN4QixPQUFPLENBQUMwQixNQUFNO1NBQUc7SUFDcEM7SUFDQUMsS0FBS0MsT0FBTyxFQUFFO1FBQ1osTUFBTUMsbUJBQW1CO1lBQUVDLE9BQU87WUFBTSxHQUFHRixPQUFPO1FBQUM7UUFDbkQsT0FBTyxJQUFJLENBQUNKLE1BQU0sR0FBR0csSUFBSSxDQUN2QixDQUFDbkIsUUFBVWYscURBQVVBLENBQUNvQyxrQkFBa0JyQjtJQUU1QztJQUNBdUIsUUFBUUgsVUFBVSxDQUFDLENBQUMsRUFBRTtRQUNwQixNQUFNNUIsVUFBVSxJQUFJLENBQUN3QixNQUFNO1FBQzNCLE9BQU9RLE9BQU9DLElBQUksQ0FBQ0wsU0FBU00sTUFBTSxHQUFHLElBQUlsQyxRQUFRbUMsTUFBTSxDQUFDLENBQUMzQixRQUFVZixxREFBVUEsQ0FBQ21DLFNBQVNwQixVQUFVUjtJQUNuRztJQUNBZ0IsT0FBT29CLEtBQUssRUFBRTtRQUNaekMsNERBQWFBLENBQUM0QixLQUFLLENBQUM7WUFDbEIsSUFBSSxDQUFDYyxTQUFTLENBQUNaLE9BQU8sQ0FBQyxDQUFDYTtnQkFDdEJBLFNBQVNGO1lBQ1g7UUFDRjtJQUNGO0lBQ0FHLFVBQVU7UUFDUjVDLDREQUFhQSxDQUFDNEIsS0FBSyxDQUFDO1lBQ2xCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQyxPQUFPLENBQUMsQ0FBQ2pCO2dCQUNyQkEsTUFBTStCLE9BQU87WUFDZjtRQUNGO0lBQ0Y7SUFDQUMsV0FBVztRQUNUN0MsNERBQWFBLENBQUM0QixLQUFLLENBQUM7WUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxDQUFDakI7Z0JBQ3JCQSxNQUFNZ0MsUUFBUTtZQUNoQjtRQUNGO0lBQ0Y7QUFDRjtBQUdFLENBQ0Ysc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3Jvdy13aXRoLXVzLy4vbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9xdWVyeS1jb3JlL2J1aWxkL21vZGVybi9xdWVyeUNhY2hlLmpzP2I5ZWEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3F1ZXJ5Q2FjaGUudHNcbmltcG9ydCB7IGhhc2hRdWVyeUtleUJ5T3B0aW9ucywgbWF0Y2hRdWVyeSB9IGZyb20gXCIuL3V0aWxzLmpzXCI7XG5pbXBvcnQgeyBRdWVyeSB9IGZyb20gXCIuL3F1ZXJ5LmpzXCI7XG5pbXBvcnQgeyBub3RpZnlNYW5hZ2VyIH0gZnJvbSBcIi4vbm90aWZ5TWFuYWdlci5qc1wiO1xuaW1wb3J0IHsgU3Vic2NyaWJhYmxlIH0gZnJvbSBcIi4vc3Vic2NyaWJhYmxlLmpzXCI7XG52YXIgUXVlcnlDYWNoZSA9IGNsYXNzIGV4dGVuZHMgU3Vic2NyaWJhYmxlIHtcbiAgY29uc3RydWN0b3IoY29uZmlnID0ge30pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIHRoaXMuI3F1ZXJpZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICB9XG4gICNxdWVyaWVzO1xuICBidWlsZChjbGllbnQsIG9wdGlvbnMsIHN0YXRlKSB7XG4gICAgY29uc3QgcXVlcnlLZXkgPSBvcHRpb25zLnF1ZXJ5S2V5O1xuICAgIGNvbnN0IHF1ZXJ5SGFzaCA9IG9wdGlvbnMucXVlcnlIYXNoID8/IGhhc2hRdWVyeUtleUJ5T3B0aW9ucyhxdWVyeUtleSwgb3B0aW9ucyk7XG4gICAgbGV0IHF1ZXJ5ID0gdGhpcy5nZXQocXVlcnlIYXNoKTtcbiAgICBpZiAoIXF1ZXJ5KSB7XG4gICAgICBxdWVyeSA9IG5ldyBRdWVyeSh7XG4gICAgICAgIGNsaWVudCxcbiAgICAgICAgcXVlcnlLZXksXG4gICAgICAgIHF1ZXJ5SGFzaCxcbiAgICAgICAgb3B0aW9uczogY2xpZW50LmRlZmF1bHRRdWVyeU9wdGlvbnMob3B0aW9ucyksXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBkZWZhdWx0T3B0aW9uczogY2xpZW50LmdldFF1ZXJ5RGVmYXVsdHMocXVlcnlLZXkpXG4gICAgICB9KTtcbiAgICAgIHRoaXMuYWRkKHF1ZXJ5KTtcbiAgICB9XG4gICAgcmV0dXJuIHF1ZXJ5O1xuICB9XG4gIGFkZChxdWVyeSkge1xuICAgIGlmICghdGhpcy4jcXVlcmllcy5oYXMocXVlcnkucXVlcnlIYXNoKSkge1xuICAgICAgdGhpcy4jcXVlcmllcy5zZXQocXVlcnkucXVlcnlIYXNoLCBxdWVyeSk7XG4gICAgICB0aGlzLm5vdGlmeSh7XG4gICAgICAgIHR5cGU6IFwiYWRkZWRcIixcbiAgICAgICAgcXVlcnlcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICByZW1vdmUocXVlcnkpIHtcbiAgICBjb25zdCBxdWVyeUluTWFwID0gdGhpcy4jcXVlcmllcy5nZXQocXVlcnkucXVlcnlIYXNoKTtcbiAgICBpZiAocXVlcnlJbk1hcCkge1xuICAgICAgcXVlcnkuZGVzdHJveSgpO1xuICAgICAgaWYgKHF1ZXJ5SW5NYXAgPT09IHF1ZXJ5KSB7XG4gICAgICAgIHRoaXMuI3F1ZXJpZXMuZGVsZXRlKHF1ZXJ5LnF1ZXJ5SGFzaCk7XG4gICAgICB9XG4gICAgICB0aGlzLm5vdGlmeSh7IHR5cGU6IFwicmVtb3ZlZFwiLCBxdWVyeSB9KTtcbiAgICB9XG4gIH1cbiAgY2xlYXIoKSB7XG4gICAgbm90aWZ5TWFuYWdlci5iYXRjaCgoKSA9PiB7XG4gICAgICB0aGlzLmdldEFsbCgpLmZvckVhY2goKHF1ZXJ5KSA9PiB7XG4gICAgICAgIHRoaXMucmVtb3ZlKHF1ZXJ5KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGdldChxdWVyeUhhc2gpIHtcbiAgICByZXR1cm4gdGhpcy4jcXVlcmllcy5nZXQocXVlcnlIYXNoKTtcbiAgfVxuICBnZXRBbGwoKSB7XG4gICAgcmV0dXJuIFsuLi50aGlzLiNxdWVyaWVzLnZhbHVlcygpXTtcbiAgfVxuICBmaW5kKGZpbHRlcnMpIHtcbiAgICBjb25zdCBkZWZhdWx0ZWRGaWx0ZXJzID0geyBleGFjdDogdHJ1ZSwgLi4uZmlsdGVycyB9O1xuICAgIHJldHVybiB0aGlzLmdldEFsbCgpLmZpbmQoXG4gICAgICAocXVlcnkpID0+IG1hdGNoUXVlcnkoZGVmYXVsdGVkRmlsdGVycywgcXVlcnkpXG4gICAgKTtcbiAgfVxuICBmaW5kQWxsKGZpbHRlcnMgPSB7fSkge1xuICAgIGNvbnN0IHF1ZXJpZXMgPSB0aGlzLmdldEFsbCgpO1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhmaWx0ZXJzKS5sZW5ndGggPiAwID8gcXVlcmllcy5maWx0ZXIoKHF1ZXJ5KSA9PiBtYXRjaFF1ZXJ5KGZpbHRlcnMsIHF1ZXJ5KSkgOiBxdWVyaWVzO1xuICB9XG4gIG5vdGlmeShldmVudCkge1xuICAgIG5vdGlmeU1hbmFnZXIuYmF0Y2goKCkgPT4ge1xuICAgICAgdGhpcy5saXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXIpID0+IHtcbiAgICAgICAgbGlzdGVuZXIoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgb25Gb2N1cygpIHtcbiAgICBub3RpZnlNYW5hZ2VyLmJhdGNoKCgpID0+IHtcbiAgICAgIHRoaXMuZ2V0QWxsKCkuZm9yRWFjaCgocXVlcnkpID0+IHtcbiAgICAgICAgcXVlcnkub25Gb2N1cygpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgb25PbmxpbmUoKSB7XG4gICAgbm90aWZ5TWFuYWdlci5iYXRjaCgoKSA9PiB7XG4gICAgICB0aGlzLmdldEFsbCgpLmZvckVhY2goKHF1ZXJ5KSA9PiB7XG4gICAgICAgIHF1ZXJ5Lm9uT25saW5lKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufTtcbmV4cG9ydCB7XG4gIFF1ZXJ5Q2FjaGVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1xdWVyeUNhY2hlLmpzLm1hcCJdLCJuYW1lcyI6WyJoYXNoUXVlcnlLZXlCeU9wdGlvbnMiLCJtYXRjaFF1ZXJ5IiwiUXVlcnkiLCJub3RpZnlNYW5hZ2VyIiwiU3Vic2NyaWJhYmxlIiwiUXVlcnlDYWNoZSIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwicXVlcmllcyIsIk1hcCIsImJ1aWxkIiwiY2xpZW50Iiwib3B0aW9ucyIsInN0YXRlIiwicXVlcnlLZXkiLCJxdWVyeUhhc2giLCJxdWVyeSIsImdldCIsImRlZmF1bHRRdWVyeU9wdGlvbnMiLCJkZWZhdWx0T3B0aW9ucyIsImdldFF1ZXJ5RGVmYXVsdHMiLCJhZGQiLCJoYXMiLCJzZXQiLCJub3RpZnkiLCJ0eXBlIiwicmVtb3ZlIiwicXVlcnlJbk1hcCIsImRlc3Ryb3kiLCJkZWxldGUiLCJjbGVhciIsImJhdGNoIiwiZ2V0QWxsIiwiZm9yRWFjaCIsInZhbHVlcyIsImZpbmQiLCJmaWx0ZXJzIiwiZGVmYXVsdGVkRmlsdGVycyIsImV4YWN0IiwiZmluZEFsbCIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJmaWx0ZXIiLCJldmVudCIsImxpc3RlbmVycyIsImxpc3RlbmVyIiwib25Gb2N1cyIsIm9uT25saW5lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/queryCache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/queryClient.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/queryClient.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryClient: () => (/* binding */ QueryClient)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/utils.js\");\n/* harmony import */ var _queryCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./queryCache.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/queryCache.js\");\n/* harmony import */ var _mutationCache_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mutationCache.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/mutationCache.js\");\n/* harmony import */ var _focusManager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./focusManager.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/focusManager.js\");\n/* harmony import */ var _onlineManager_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./onlineManager.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/onlineManager.js\");\n/* harmony import */ var _notifyManager_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./notifyManager.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/notifyManager.js\");\n/* harmony import */ var _infiniteQueryBehavior_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./infiniteQueryBehavior.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/infiniteQueryBehavior.js\");\n// src/queryClient.ts\n\n\n\n\n\n\n\nvar QueryClient = class {\n    #queryCache;\n    #mutationCache;\n    #defaultOptions;\n    #queryDefaults;\n    #mutationDefaults;\n    #mountCount;\n    #unsubscribeFocus;\n    #unsubscribeOnline;\n    constructor(config = {}){\n        this.#queryCache = config.queryCache || new _queryCache_js__WEBPACK_IMPORTED_MODULE_0__.QueryCache();\n        this.#mutationCache = config.mutationCache || new _mutationCache_js__WEBPACK_IMPORTED_MODULE_1__.MutationCache();\n        this.#defaultOptions = config.defaultOptions || {};\n        this.#queryDefaults = /* @__PURE__ */ new Map();\n        this.#mutationDefaults = /* @__PURE__ */ new Map();\n        this.#mountCount = 0;\n    }\n    mount() {\n        this.#mountCount++;\n        if (this.#mountCount !== 1) return;\n        this.#unsubscribeFocus = _focusManager_js__WEBPACK_IMPORTED_MODULE_2__.focusManager.subscribe(async (focused)=>{\n            if (focused) {\n                await this.resumePausedMutations();\n                this.#queryCache.onFocus();\n            }\n        });\n        this.#unsubscribeOnline = _onlineManager_js__WEBPACK_IMPORTED_MODULE_3__.onlineManager.subscribe(async (online)=>{\n            if (online) {\n                await this.resumePausedMutations();\n                this.#queryCache.onOnline();\n            }\n        });\n    }\n    unmount() {\n        this.#mountCount--;\n        if (this.#mountCount !== 0) return;\n        this.#unsubscribeFocus?.();\n        this.#unsubscribeFocus = void 0;\n        this.#unsubscribeOnline?.();\n        this.#unsubscribeOnline = void 0;\n    }\n    isFetching(filters) {\n        return this.#queryCache.findAll({\n            ...filters,\n            fetchStatus: \"fetching\"\n        }).length;\n    }\n    isMutating(filters) {\n        return this.#mutationCache.findAll({\n            ...filters,\n            status: \"pending\"\n        }).length;\n    }\n    /**\n   * Imperative (non-reactive) way to retrieve data for a QueryKey.\n   * Should only be used in callbacks or functions where reading the latest data is necessary, e.g. for optimistic updates.\n   *\n   * Hint: Do not use this function inside a component, because it won't receive updates.\n   * Use `useQuery` to create a `QueryObserver` that subscribes to changes.\n   */ getQueryData(queryKey) {\n        const options = this.defaultQueryOptions({\n            queryKey\n        });\n        return this.#queryCache.get(options.queryHash)?.state.data;\n    }\n    ensureQueryData(options) {\n        const defaultedOptions = this.defaultQueryOptions(options);\n        const query = this.#queryCache.build(this, defaultedOptions);\n        const cachedData = query.state.data;\n        if (cachedData === void 0) {\n            return this.fetchQuery(options);\n        }\n        if (options.revalidateIfStale && query.isStaleByTime((0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.resolveStaleTime)(defaultedOptions.staleTime, query))) {\n            void this.prefetchQuery(defaultedOptions);\n        }\n        return Promise.resolve(cachedData);\n    }\n    getQueriesData(filters) {\n        return this.#queryCache.findAll(filters).map(({ queryKey, state })=>{\n            const data = state.data;\n            return [\n                queryKey,\n                data\n            ];\n        });\n    }\n    setQueryData(queryKey, updater, options) {\n        const defaultedOptions = this.defaultQueryOptions({\n            queryKey\n        });\n        const query = this.#queryCache.get(defaultedOptions.queryHash);\n        const prevData = query?.state.data;\n        const data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.functionalUpdate)(updater, prevData);\n        if (data === void 0) {\n            return void 0;\n        }\n        return this.#queryCache.build(this, defaultedOptions).setData(data, {\n            ...options,\n            manual: true\n        });\n    }\n    setQueriesData(filters, updater, options) {\n        return _notifyManager_js__WEBPACK_IMPORTED_MODULE_5__.notifyManager.batch(()=>this.#queryCache.findAll(filters).map(({ queryKey })=>[\n                    queryKey,\n                    this.setQueryData(queryKey, updater, options)\n                ]));\n    }\n    getQueryState(queryKey) {\n        const options = this.defaultQueryOptions({\n            queryKey\n        });\n        return this.#queryCache.get(options.queryHash)?.state;\n    }\n    removeQueries(filters) {\n        const queryCache = this.#queryCache;\n        _notifyManager_js__WEBPACK_IMPORTED_MODULE_5__.notifyManager.batch(()=>{\n            queryCache.findAll(filters).forEach((query)=>{\n                queryCache.remove(query);\n            });\n        });\n    }\n    resetQueries(filters, options) {\n        const queryCache = this.#queryCache;\n        return _notifyManager_js__WEBPACK_IMPORTED_MODULE_5__.notifyManager.batch(()=>{\n            queryCache.findAll(filters).forEach((query)=>{\n                query.reset();\n            });\n            return this.refetchQueries({\n                type: \"active\",\n                ...filters\n            }, options);\n        });\n    }\n    cancelQueries(filters, cancelOptions = {}) {\n        const defaultedCancelOptions = {\n            revert: true,\n            ...cancelOptions\n        };\n        const promises = _notifyManager_js__WEBPACK_IMPORTED_MODULE_5__.notifyManager.batch(()=>this.#queryCache.findAll(filters).map((query)=>query.cancel(defaultedCancelOptions)));\n        return Promise.all(promises).then(_utils_js__WEBPACK_IMPORTED_MODULE_4__.noop).catch(_utils_js__WEBPACK_IMPORTED_MODULE_4__.noop);\n    }\n    invalidateQueries(filters, options = {}) {\n        return _notifyManager_js__WEBPACK_IMPORTED_MODULE_5__.notifyManager.batch(()=>{\n            this.#queryCache.findAll(filters).forEach((query)=>{\n                query.invalidate();\n            });\n            if (filters?.refetchType === \"none\") {\n                return Promise.resolve();\n            }\n            return this.refetchQueries({\n                ...filters,\n                type: filters?.refetchType ?? filters?.type ?? \"active\"\n            }, options);\n        });\n    }\n    refetchQueries(filters, options = {}) {\n        const fetchOptions = {\n            ...options,\n            cancelRefetch: options.cancelRefetch ?? true\n        };\n        const promises = _notifyManager_js__WEBPACK_IMPORTED_MODULE_5__.notifyManager.batch(()=>this.#queryCache.findAll(filters).filter((query)=>!query.isDisabled()).map((query)=>{\n                let promise = query.fetch(void 0, fetchOptions);\n                if (!fetchOptions.throwOnError) {\n                    promise = promise.catch(_utils_js__WEBPACK_IMPORTED_MODULE_4__.noop);\n                }\n                return query.state.fetchStatus === \"paused\" ? Promise.resolve() : promise;\n            }));\n        return Promise.all(promises).then(_utils_js__WEBPACK_IMPORTED_MODULE_4__.noop);\n    }\n    fetchQuery(options) {\n        const defaultedOptions = this.defaultQueryOptions(options);\n        if (defaultedOptions.retry === void 0) {\n            defaultedOptions.retry = false;\n        }\n        const query = this.#queryCache.build(this, defaultedOptions);\n        return query.isStaleByTime((0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.resolveStaleTime)(defaultedOptions.staleTime, query)) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n    }\n    prefetchQuery(options) {\n        return this.fetchQuery(options).then(_utils_js__WEBPACK_IMPORTED_MODULE_4__.noop).catch(_utils_js__WEBPACK_IMPORTED_MODULE_4__.noop);\n    }\n    fetchInfiniteQuery(options) {\n        options.behavior = (0,_infiniteQueryBehavior_js__WEBPACK_IMPORTED_MODULE_6__.infiniteQueryBehavior)(options.pages);\n        return this.fetchQuery(options);\n    }\n    prefetchInfiniteQuery(options) {\n        return this.fetchInfiniteQuery(options).then(_utils_js__WEBPACK_IMPORTED_MODULE_4__.noop).catch(_utils_js__WEBPACK_IMPORTED_MODULE_4__.noop);\n    }\n    ensureInfiniteQueryData(options) {\n        options.behavior = (0,_infiniteQueryBehavior_js__WEBPACK_IMPORTED_MODULE_6__.infiniteQueryBehavior)(options.pages);\n        return this.ensureQueryData(options);\n    }\n    resumePausedMutations() {\n        if (_onlineManager_js__WEBPACK_IMPORTED_MODULE_3__.onlineManager.isOnline()) {\n            return this.#mutationCache.resumePausedMutations();\n        }\n        return Promise.resolve();\n    }\n    getQueryCache() {\n        return this.#queryCache;\n    }\n    getMutationCache() {\n        return this.#mutationCache;\n    }\n    getDefaultOptions() {\n        return this.#defaultOptions;\n    }\n    setDefaultOptions(options) {\n        this.#defaultOptions = options;\n    }\n    setQueryDefaults(queryKey, options) {\n        this.#queryDefaults.set((0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.hashKey)(queryKey), {\n            queryKey,\n            defaultOptions: options\n        });\n    }\n    getQueryDefaults(queryKey) {\n        const defaults = [\n            ...this.#queryDefaults.values()\n        ];\n        const result = {};\n        defaults.forEach((queryDefault)=>{\n            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.partialMatchKey)(queryKey, queryDefault.queryKey)) {\n                Object.assign(result, queryDefault.defaultOptions);\n            }\n        });\n        return result;\n    }\n    setMutationDefaults(mutationKey, options) {\n        this.#mutationDefaults.set((0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.hashKey)(mutationKey), {\n            mutationKey,\n            defaultOptions: options\n        });\n    }\n    getMutationDefaults(mutationKey) {\n        const defaults = [\n            ...this.#mutationDefaults.values()\n        ];\n        const result = {};\n        defaults.forEach((queryDefault)=>{\n            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.partialMatchKey)(mutationKey, queryDefault.mutationKey)) {\n                Object.assign(result, queryDefault.defaultOptions);\n            }\n        });\n        return result;\n    }\n    defaultQueryOptions(options) {\n        if (options._defaulted) {\n            return options;\n        }\n        const defaultedOptions = {\n            ...this.#defaultOptions.queries,\n            ...this.getQueryDefaults(options.queryKey),\n            ...options,\n            _defaulted: true\n        };\n        if (!defaultedOptions.queryHash) {\n            defaultedOptions.queryHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.hashQueryKeyByOptions)(defaultedOptions.queryKey, defaultedOptions);\n        }\n        if (defaultedOptions.refetchOnReconnect === void 0) {\n            defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== \"always\";\n        }\n        if (defaultedOptions.throwOnError === void 0) {\n            defaultedOptions.throwOnError = !!defaultedOptions.suspense;\n        }\n        if (!defaultedOptions.networkMode && defaultedOptions.persister) {\n            defaultedOptions.networkMode = \"offlineFirst\";\n        }\n        if (defaultedOptions.queryFn === _utils_js__WEBPACK_IMPORTED_MODULE_4__.skipToken) {\n            defaultedOptions.enabled = false;\n        }\n        return defaultedOptions;\n    }\n    defaultMutationOptions(options) {\n        if (options?._defaulted) {\n            return options;\n        }\n        return {\n            ...this.#defaultOptions.mutations,\n            ...options?.mutationKey && this.getMutationDefaults(options.mutationKey),\n            ...options,\n            _defaulted: true\n        };\n    }\n    clear() {\n        this.#queryCache.clear();\n        this.#mutationCache.clear();\n    }\n};\n //# sourceMappingURL=queryClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/queryClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/removable.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/removable.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Removable: () => (/* binding */ Removable)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/utils.js\");\n// src/removable.ts\n\nvar Removable = class {\n    #gcTimeout;\n    destroy() {\n        this.clearGcTimeout();\n    }\n    scheduleGc() {\n        this.clearGcTimeout();\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isValidTimeout)(this.gcTime)) {\n            this.#gcTimeout = setTimeout(()=>{\n                this.optionalRemove();\n            }, this.gcTime);\n        }\n    }\n    updateGcTime(newGcTime) {\n        this.gcTime = Math.max(this.gcTime || 0, newGcTime ?? (_utils_js__WEBPACK_IMPORTED_MODULE_0__.isServer ? Infinity : 5 * 60 * 1e3));\n    }\n    clearGcTimeout() {\n        if (this.#gcTimeout) {\n            clearTimeout(this.#gcTimeout);\n            this.#gcTimeout = void 0;\n        }\n    }\n};\n //# sourceMappingURL=removable.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbW9kZXJuL3JlbW92YWJsZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLG1CQUFtQjtBQUNtQztBQUN0RCxJQUFJRSxZQUFZO0lBQ2QsQ0FBQ0MsU0FBUyxDQUFDO0lBQ1hDLFVBQVU7UUFDUixJQUFJLENBQUNDLGNBQWM7SUFDckI7SUFDQUMsYUFBYTtRQUNYLElBQUksQ0FBQ0QsY0FBYztRQUNuQixJQUFJSix5REFBY0EsQ0FBQyxJQUFJLENBQUNNLE1BQU0sR0FBRztZQUMvQixJQUFJLENBQUMsQ0FBQ0osU0FBUyxHQUFHSyxXQUFXO2dCQUMzQixJQUFJLENBQUNDLGNBQWM7WUFDckIsR0FBRyxJQUFJLENBQUNGLE1BQU07UUFDaEI7SUFDRjtJQUNBRyxhQUFhQyxTQUFTLEVBQUU7UUFDdEIsSUFBSSxDQUFDSixNQUFNLEdBQUdLLEtBQUtDLEdBQUcsQ0FDcEIsSUFBSSxDQUFDTixNQUFNLElBQUksR0FDZkksYUFBY1gsQ0FBQUEsK0NBQVFBLEdBQUdjLFdBQVcsSUFBSSxLQUFLLEdBQUU7SUFFbkQ7SUFDQVQsaUJBQWlCO1FBQ2YsSUFBSSxJQUFJLENBQUMsQ0FBQ0YsU0FBUyxFQUFFO1lBQ25CWSxhQUFhLElBQUksQ0FBQyxDQUFDWixTQUFTO1lBQzVCLElBQUksQ0FBQyxDQUFDQSxTQUFTLEdBQUcsS0FBSztRQUN6QjtJQUNGO0FBQ0Y7QUFHRSxDQUNGLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2dyb3ctd2l0aC11cy8uL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcXVlcnktY29yZS9idWlsZC9tb2Rlcm4vcmVtb3ZhYmxlLmpzPzU5NzgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3JlbW92YWJsZS50c1xuaW1wb3J0IHsgaXNTZXJ2ZXIsIGlzVmFsaWRUaW1lb3V0IH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbnZhciBSZW1vdmFibGUgPSBjbGFzcyB7XG4gICNnY1RpbWVvdXQ7XG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5jbGVhckdjVGltZW91dCgpO1xuICB9XG4gIHNjaGVkdWxlR2MoKSB7XG4gICAgdGhpcy5jbGVhckdjVGltZW91dCgpO1xuICAgIGlmIChpc1ZhbGlkVGltZW91dCh0aGlzLmdjVGltZSkpIHtcbiAgICAgIHRoaXMuI2djVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLm9wdGlvbmFsUmVtb3ZlKCk7XG4gICAgICB9LCB0aGlzLmdjVGltZSk7XG4gICAgfVxuICB9XG4gIHVwZGF0ZUdjVGltZShuZXdHY1RpbWUpIHtcbiAgICB0aGlzLmdjVGltZSA9IE1hdGgubWF4KFxuICAgICAgdGhpcy5nY1RpbWUgfHwgMCxcbiAgICAgIG5ld0djVGltZSA/PyAoaXNTZXJ2ZXIgPyBJbmZpbml0eSA6IDUgKiA2MCAqIDFlMylcbiAgICApO1xuICB9XG4gIGNsZWFyR2NUaW1lb3V0KCkge1xuICAgIGlmICh0aGlzLiNnY1RpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLiNnY1RpbWVvdXQpO1xuICAgICAgdGhpcy4jZ2NUaW1lb3V0ID0gdm9pZCAwO1xuICAgIH1cbiAgfVxufTtcbmV4cG9ydCB7XG4gIFJlbW92YWJsZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlbW92YWJsZS5qcy5tYXAiXSwibmFtZXMiOlsiaXNTZXJ2ZXIiLCJpc1ZhbGlkVGltZW91dCIsIlJlbW92YWJsZSIsImdjVGltZW91dCIsImRlc3Ryb3kiLCJjbGVhckdjVGltZW91dCIsInNjaGVkdWxlR2MiLCJnY1RpbWUiLCJzZXRUaW1lb3V0Iiwib3B0aW9uYWxSZW1vdmUiLCJ1cGRhdGVHY1RpbWUiLCJuZXdHY1RpbWUiLCJNYXRoIiwibWF4IiwiSW5maW5pdHkiLCJjbGVhclRpbWVvdXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/removable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/retryer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/retryer.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CancelledError: () => (/* binding */ CancelledError),\n/* harmony export */   canFetch: () => (/* binding */ canFetch),\n/* harmony export */   createRetryer: () => (/* binding */ createRetryer),\n/* harmony export */   isCancelledError: () => (/* binding */ isCancelledError)\n/* harmony export */ });\n/* harmony import */ var _focusManager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./focusManager.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/focusManager.js\");\n/* harmony import */ var _onlineManager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./onlineManager.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/onlineManager.js\");\n/* harmony import */ var _thenable_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./thenable.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/thenable.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/utils.js\");\n// src/retryer.ts\n\n\n\n\nfunction defaultRetryDelay(failureCount) {\n    return Math.min(1e3 * 2 ** failureCount, 3e4);\n}\nfunction canFetch(networkMode) {\n    return (networkMode ?? \"online\") === \"online\" ? _onlineManager_js__WEBPACK_IMPORTED_MODULE_0__.onlineManager.isOnline() : true;\n}\nvar CancelledError = class extends Error {\n    constructor(options){\n        super(\"CancelledError\");\n        this.revert = options?.revert;\n        this.silent = options?.silent;\n    }\n};\nfunction isCancelledError(value) {\n    return value instanceof CancelledError;\n}\nfunction createRetryer(config) {\n    let isRetryCancelled = false;\n    let failureCount = 0;\n    let isResolved = false;\n    let continueFn;\n    const thenable = (0,_thenable_js__WEBPACK_IMPORTED_MODULE_1__.pendingThenable)();\n    const cancel = (cancelOptions)=>{\n        if (!isResolved) {\n            reject(new CancelledError(cancelOptions));\n            config.abort?.();\n        }\n    };\n    const cancelRetry = ()=>{\n        isRetryCancelled = true;\n    };\n    const continueRetry = ()=>{\n        isRetryCancelled = false;\n    };\n    const canContinue = ()=>_focusManager_js__WEBPACK_IMPORTED_MODULE_2__.focusManager.isFocused() && (config.networkMode === \"always\" || _onlineManager_js__WEBPACK_IMPORTED_MODULE_0__.onlineManager.isOnline()) && config.canRun();\n    const canStart = ()=>canFetch(config.networkMode) && config.canRun();\n    const resolve = (value)=>{\n        if (!isResolved) {\n            isResolved = true;\n            config.onSuccess?.(value);\n            continueFn?.();\n            thenable.resolve(value);\n        }\n    };\n    const reject = (value)=>{\n        if (!isResolved) {\n            isResolved = true;\n            config.onError?.(value);\n            continueFn?.();\n            thenable.reject(value);\n        }\n    };\n    const pause = ()=>{\n        return new Promise((continueResolve)=>{\n            continueFn = (value)=>{\n                if (isResolved || canContinue()) {\n                    continueResolve(value);\n                }\n            };\n            config.onPause?.();\n        }).then(()=>{\n            continueFn = void 0;\n            if (!isResolved) {\n                config.onContinue?.();\n            }\n        });\n    };\n    const run = ()=>{\n        if (isResolved) {\n            return;\n        }\n        let promiseOrValue;\n        const initialPromise = failureCount === 0 ? config.initialPromise : void 0;\n        try {\n            promiseOrValue = initialPromise ?? config.fn();\n        } catch (error) {\n            promiseOrValue = Promise.reject(error);\n        }\n        Promise.resolve(promiseOrValue).then(resolve).catch((error)=>{\n            if (isResolved) {\n                return;\n            }\n            const retry = config.retry ?? (_utils_js__WEBPACK_IMPORTED_MODULE_3__.isServer ? 0 : 3);\n            const retryDelay = config.retryDelay ?? defaultRetryDelay;\n            const delay = typeof retryDelay === \"function\" ? retryDelay(failureCount, error) : retryDelay;\n            const shouldRetry = retry === true || typeof retry === \"number\" && failureCount < retry || typeof retry === \"function\" && retry(failureCount, error);\n            if (isRetryCancelled || !shouldRetry) {\n                reject(error);\n                return;\n            }\n            failureCount++;\n            config.onFail?.(failureCount, error);\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.sleep)(delay).then(()=>{\n                return canContinue() ? void 0 : pause();\n            }).then(()=>{\n                if (isRetryCancelled) {\n                    reject(error);\n                } else {\n                    run();\n                }\n            });\n        });\n    };\n    return {\n        promise: thenable,\n        cancel,\n        continue: ()=>{\n            continueFn?.();\n            return thenable;\n        },\n        cancelRetry,\n        continueRetry,\n        canStart,\n        start: ()=>{\n            if (canStart()) {\n                run();\n            } else {\n                pause().then(run);\n            }\n            return thenable;\n        }\n    };\n}\n //# sourceMappingURL=retryer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/retryer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/subscribable.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/subscribable.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Subscribable: () => (/* binding */ Subscribable)\n/* harmony export */ });\n// src/subscribable.ts\nvar Subscribable = class {\n    constructor(){\n        this.listeners = /* @__PURE__ */ new Set();\n        this.subscribe = this.subscribe.bind(this);\n    }\n    subscribe(listener) {\n        this.listeners.add(listener);\n        this.onSubscribe();\n        return ()=>{\n            this.listeners.delete(listener);\n            this.onUnsubscribe();\n        };\n    }\n    hasListeners() {\n        return this.listeners.size > 0;\n    }\n    onSubscribe() {}\n    onUnsubscribe() {}\n};\n //# sourceMappingURL=subscribable.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbW9kZXJuL3N1YnNjcmliYWJsZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsc0JBQXNCO0FBQ3RCLElBQUlBLGVBQWU7SUFDakJDLGFBQWM7UUFDWixJQUFJLENBQUNDLFNBQVMsR0FBRyxhQUFhLEdBQUcsSUFBSUM7UUFDckMsSUFBSSxDQUFDQyxTQUFTLEdBQUcsSUFBSSxDQUFDQSxTQUFTLENBQUNDLElBQUksQ0FBQyxJQUFJO0lBQzNDO0lBQ0FELFVBQVVFLFFBQVEsRUFBRTtRQUNsQixJQUFJLENBQUNKLFNBQVMsQ0FBQ0ssR0FBRyxDQUFDRDtRQUNuQixJQUFJLENBQUNFLFdBQVc7UUFDaEIsT0FBTztZQUNMLElBQUksQ0FBQ04sU0FBUyxDQUFDTyxNQUFNLENBQUNIO1lBQ3RCLElBQUksQ0FBQ0ksYUFBYTtRQUNwQjtJQUNGO0lBQ0FDLGVBQWU7UUFDYixPQUFPLElBQUksQ0FBQ1QsU0FBUyxDQUFDVSxJQUFJLEdBQUc7SUFDL0I7SUFDQUosY0FBYyxDQUNkO0lBQ0FFLGdCQUFnQixDQUNoQjtBQUNGO0FBR0UsQ0FDRix3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncm93LXdpdGgtdXMvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbW9kZXJuL3N1YnNjcmliYWJsZS5qcz9iZWJjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9zdWJzY3JpYmFibGUudHNcbnZhciBTdWJzY3JpYmFibGUgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubGlzdGVuZXJzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgICB0aGlzLnN1YnNjcmliZSA9IHRoaXMuc3Vic2NyaWJlLmJpbmQodGhpcyk7XG4gIH1cbiAgc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMuYWRkKGxpc3RlbmVyKTtcbiAgICB0aGlzLm9uU3Vic2NyaWJlKCk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgICB0aGlzLm9uVW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9XG4gIGhhc0xpc3RlbmVycygpIHtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lcnMuc2l6ZSA+IDA7XG4gIH1cbiAgb25TdWJzY3JpYmUoKSB7XG4gIH1cbiAgb25VbnN1YnNjcmliZSgpIHtcbiAgfVxufTtcbmV4cG9ydCB7XG4gIFN1YnNjcmliYWJsZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliYWJsZS5qcy5tYXAiXSwibmFtZXMiOlsiU3Vic2NyaWJhYmxlIiwiY29uc3RydWN0b3IiLCJsaXN0ZW5lcnMiLCJTZXQiLCJzdWJzY3JpYmUiLCJiaW5kIiwibGlzdGVuZXIiLCJhZGQiLCJvblN1YnNjcmliZSIsImRlbGV0ZSIsIm9uVW5zdWJzY3JpYmUiLCJoYXNMaXN0ZW5lcnMiLCJzaXplIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/subscribable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/thenable.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/thenable.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pendingThenable: () => (/* binding */ pendingThenable)\n/* harmony export */ });\n// src/thenable.ts\nfunction pendingThenable() {\n    let resolve;\n    let reject;\n    const thenable = new Promise((_resolve, _reject)=>{\n        resolve = _resolve;\n        reject = _reject;\n    });\n    thenable.status = \"pending\";\n    thenable.catch(()=>{});\n    function finalize(data) {\n        Object.assign(thenable, data);\n        delete thenable.resolve;\n        delete thenable.reject;\n    }\n    thenable.resolve = (value)=>{\n        finalize({\n            status: \"fulfilled\",\n            value\n        });\n        resolve(value);\n    };\n    thenable.reject = (reason)=>{\n        finalize({\n            status: \"rejected\",\n            reason\n        });\n        reject(reason);\n    };\n    return thenable;\n}\n //# sourceMappingURL=thenable.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbW9kZXJuL3RoZW5hYmxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxrQkFBa0I7QUFDbEIsU0FBU0E7SUFDUCxJQUFJQztJQUNKLElBQUlDO0lBQ0osTUFBTUMsV0FBVyxJQUFJQyxRQUFRLENBQUNDLFVBQVVDO1FBQ3RDTCxVQUFVSTtRQUNWSCxTQUFTSTtJQUNYO0lBQ0FILFNBQVNJLE1BQU0sR0FBRztJQUNsQkosU0FBU0ssS0FBSyxDQUFDLEtBQ2Y7SUFDQSxTQUFTQyxTQUFTQyxJQUFJO1FBQ3BCQyxPQUFPQyxNQUFNLENBQUNULFVBQVVPO1FBQ3hCLE9BQU9QLFNBQVNGLE9BQU87UUFDdkIsT0FBT0UsU0FBU0QsTUFBTTtJQUN4QjtJQUNBQyxTQUFTRixPQUFPLEdBQUcsQ0FBQ1k7UUFDbEJKLFNBQVM7WUFDUEYsUUFBUTtZQUNSTTtRQUNGO1FBQ0FaLFFBQVFZO0lBQ1Y7SUFDQVYsU0FBU0QsTUFBTSxHQUFHLENBQUNZO1FBQ2pCTCxTQUFTO1lBQ1BGLFFBQVE7WUFDUk87UUFDRjtRQUNBWixPQUFPWTtJQUNUO0lBQ0EsT0FBT1g7QUFDVDtBQUdFLENBQ0Ysb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3Jvdy13aXRoLXVzLy4vbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9xdWVyeS1jb3JlL2J1aWxkL21vZGVybi90aGVuYWJsZS5qcz9iOTFlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy90aGVuYWJsZS50c1xuZnVuY3Rpb24gcGVuZGluZ1RoZW5hYmxlKCkge1xuICBsZXQgcmVzb2x2ZTtcbiAgbGV0IHJlamVjdDtcbiAgY29uc3QgdGhlbmFibGUgPSBuZXcgUHJvbWlzZSgoX3Jlc29sdmUsIF9yZWplY3QpID0+IHtcbiAgICByZXNvbHZlID0gX3Jlc29sdmU7XG4gICAgcmVqZWN0ID0gX3JlamVjdDtcbiAgfSk7XG4gIHRoZW5hYmxlLnN0YXR1cyA9IFwicGVuZGluZ1wiO1xuICB0aGVuYWJsZS5jYXRjaCgoKSA9PiB7XG4gIH0pO1xuICBmdW5jdGlvbiBmaW5hbGl6ZShkYXRhKSB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGVuYWJsZSwgZGF0YSk7XG4gICAgZGVsZXRlIHRoZW5hYmxlLnJlc29sdmU7XG4gICAgZGVsZXRlIHRoZW5hYmxlLnJlamVjdDtcbiAgfVxuICB0aGVuYWJsZS5yZXNvbHZlID0gKHZhbHVlKSA9PiB7XG4gICAgZmluYWxpemUoe1xuICAgICAgc3RhdHVzOiBcImZ1bGZpbGxlZFwiLFxuICAgICAgdmFsdWVcbiAgICB9KTtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfTtcbiAgdGhlbmFibGUucmVqZWN0ID0gKHJlYXNvbikgPT4ge1xuICAgIGZpbmFsaXplKHtcbiAgICAgIHN0YXR1czogXCJyZWplY3RlZFwiLFxuICAgICAgcmVhc29uXG4gICAgfSk7XG4gICAgcmVqZWN0KHJlYXNvbik7XG4gIH07XG4gIHJldHVybiB0aGVuYWJsZTtcbn1cbmV4cG9ydCB7XG4gIHBlbmRpbmdUaGVuYWJsZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRoZW5hYmxlLmpzLm1hcCJdLCJuYW1lcyI6WyJwZW5kaW5nVGhlbmFibGUiLCJyZXNvbHZlIiwicmVqZWN0IiwidGhlbmFibGUiLCJQcm9taXNlIiwiX3Jlc29sdmUiLCJfcmVqZWN0Iiwic3RhdHVzIiwiY2F0Y2giLCJmaW5hbGl6ZSIsImRhdGEiLCJPYmplY3QiLCJhc3NpZ24iLCJ2YWx1ZSIsInJlYXNvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/thenable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/utils.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/utils.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addToEnd: () => (/* binding */ addToEnd),\n/* harmony export */   addToStart: () => (/* binding */ addToStart),\n/* harmony export */   ensureQueryFn: () => (/* binding */ ensureQueryFn),\n/* harmony export */   functionalUpdate: () => (/* binding */ functionalUpdate),\n/* harmony export */   hashKey: () => (/* binding */ hashKey),\n/* harmony export */   hashQueryKeyByOptions: () => (/* binding */ hashQueryKeyByOptions),\n/* harmony export */   isPlainArray: () => (/* binding */ isPlainArray),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isServer: () => (/* binding */ isServer),\n/* harmony export */   isValidTimeout: () => (/* binding */ isValidTimeout),\n/* harmony export */   keepPreviousData: () => (/* binding */ keepPreviousData),\n/* harmony export */   matchMutation: () => (/* binding */ matchMutation),\n/* harmony export */   matchQuery: () => (/* binding */ matchQuery),\n/* harmony export */   noop: () => (/* binding */ noop),\n/* harmony export */   partialMatchKey: () => (/* binding */ partialMatchKey),\n/* harmony export */   replaceData: () => (/* binding */ replaceData),\n/* harmony export */   replaceEqualDeep: () => (/* binding */ replaceEqualDeep),\n/* harmony export */   resolveEnabled: () => (/* binding */ resolveEnabled),\n/* harmony export */   resolveStaleTime: () => (/* binding */ resolveStaleTime),\n/* harmony export */   shallowEqualObjects: () => (/* binding */ shallowEqualObjects),\n/* harmony export */   skipToken: () => (/* binding */ skipToken),\n/* harmony export */   sleep: () => (/* binding */ sleep),\n/* harmony export */   timeUntilStale: () => (/* binding */ timeUntilStale)\n/* harmony export */ });\n// src/utils.ts\nvar isServer =  true || 0;\nfunction noop() {}\nfunction functionalUpdate(updater, input) {\n    return typeof updater === \"function\" ? updater(input) : updater;\n}\nfunction isValidTimeout(value) {\n    return typeof value === \"number\" && value >= 0 && value !== Infinity;\n}\nfunction timeUntilStale(updatedAt, staleTime) {\n    return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);\n}\nfunction resolveStaleTime(staleTime, query) {\n    return typeof staleTime === \"function\" ? staleTime(query) : staleTime;\n}\nfunction resolveEnabled(enabled, query) {\n    return typeof enabled === \"function\" ? enabled(query) : enabled;\n}\nfunction matchQuery(filters, query) {\n    const { type = \"all\", exact, fetchStatus, predicate, queryKey, stale } = filters;\n    if (queryKey) {\n        if (exact) {\n            if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n                return false;\n            }\n        } else if (!partialMatchKey(query.queryKey, queryKey)) {\n            return false;\n        }\n    }\n    if (type !== \"all\") {\n        const isActive = query.isActive();\n        if (type === \"active\" && !isActive) {\n            return false;\n        }\n        if (type === \"inactive\" && isActive) {\n            return false;\n        }\n    }\n    if (typeof stale === \"boolean\" && query.isStale() !== stale) {\n        return false;\n    }\n    if (fetchStatus && fetchStatus !== query.state.fetchStatus) {\n        return false;\n    }\n    if (predicate && !predicate(query)) {\n        return false;\n    }\n    return true;\n}\nfunction matchMutation(filters, mutation) {\n    const { exact, status, predicate, mutationKey } = filters;\n    if (mutationKey) {\n        if (!mutation.options.mutationKey) {\n            return false;\n        }\n        if (exact) {\n            if (hashKey(mutation.options.mutationKey) !== hashKey(mutationKey)) {\n                return false;\n            }\n        } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n            return false;\n        }\n    }\n    if (status && mutation.state.status !== status) {\n        return false;\n    }\n    if (predicate && !predicate(mutation)) {\n        return false;\n    }\n    return true;\n}\nfunction hashQueryKeyByOptions(queryKey, options) {\n    const hashFn = options?.queryKeyHashFn || hashKey;\n    return hashFn(queryKey);\n}\nfunction hashKey(queryKey) {\n    return JSON.stringify(queryKey, (_, val)=>isPlainObject(val) ? Object.keys(val).sort().reduce((result, key)=>{\n            result[key] = val[key];\n            return result;\n        }, {}) : val);\n}\nfunction partialMatchKey(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (typeof a !== typeof b) {\n        return false;\n    }\n    if (a && b && typeof a === \"object\" && typeof b === \"object\") {\n        return Object.keys(b).every((key)=>partialMatchKey(a[key], b[key]));\n    }\n    return false;\n}\nfunction replaceEqualDeep(a, b) {\n    if (a === b) {\n        return a;\n    }\n    const array = isPlainArray(a) && isPlainArray(b);\n    if (array || isPlainObject(a) && isPlainObject(b)) {\n        const aItems = array ? a : Object.keys(a);\n        const aSize = aItems.length;\n        const bItems = array ? b : Object.keys(b);\n        const bSize = bItems.length;\n        const copy = array ? [] : {};\n        let equalItems = 0;\n        for(let i = 0; i < bSize; i++){\n            const key = array ? i : bItems[i];\n            if ((!array && aItems.includes(key) || array) && a[key] === void 0 && b[key] === void 0) {\n                copy[key] = void 0;\n                equalItems++;\n            } else {\n                copy[key] = replaceEqualDeep(a[key], b[key]);\n                if (copy[key] === a[key] && a[key] !== void 0) {\n                    equalItems++;\n                }\n            }\n        }\n        return aSize === bSize && equalItems === aSize ? a : copy;\n    }\n    return b;\n}\nfunction shallowEqualObjects(a, b) {\n    if (!b || Object.keys(a).length !== Object.keys(b).length) {\n        return false;\n    }\n    for(const key in a){\n        if (a[key] !== b[key]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isPlainArray(value) {\n    return Array.isArray(value) && value.length === Object.keys(value).length;\n}\nfunction isPlainObject(o) {\n    if (!hasObjectPrototype(o)) {\n        return false;\n    }\n    const ctor = o.constructor;\n    if (ctor === void 0) {\n        return true;\n    }\n    const prot = ctor.prototype;\n    if (!hasObjectPrototype(prot)) {\n        return false;\n    }\n    if (!prot.hasOwnProperty(\"isPrototypeOf\")) {\n        return false;\n    }\n    if (Object.getPrototypeOf(o) !== Object.prototype) {\n        return false;\n    }\n    return true;\n}\nfunction hasObjectPrototype(o) {\n    return Object.prototype.toString.call(o) === \"[object Object]\";\n}\nfunction sleep(timeout) {\n    return new Promise((resolve)=>{\n        setTimeout(resolve, timeout);\n    });\n}\nfunction replaceData(prevData, data, options) {\n    if (typeof options.structuralSharing === \"function\") {\n        return options.structuralSharing(prevData, data);\n    } else if (options.structuralSharing !== false) {\n        if (true) {\n            try {\n                return replaceEqualDeep(prevData, data);\n            } catch (error) {\n                console.error(`Structural sharing requires data to be JSON serializable. To fix this, turn off structuralSharing or return JSON-serializable data from your queryFn. [${options.queryHash}]: ${error}`);\n                throw error;\n            }\n        }\n        return replaceEqualDeep(prevData, data);\n    }\n    return data;\n}\nfunction keepPreviousData(previousData) {\n    return previousData;\n}\nfunction addToEnd(items, item, max = 0) {\n    const newItems = [\n        ...items,\n        item\n    ];\n    return max && newItems.length > max ? newItems.slice(1) : newItems;\n}\nfunction addToStart(items, item, max = 0) {\n    const newItems = [\n        item,\n        ...items\n    ];\n    return max && newItems.length > max ? newItems.slice(0, -1) : newItems;\n}\nvar skipToken = Symbol();\nfunction ensureQueryFn(options, fetchOptions) {\n    if (true) {\n        if (options.queryFn === skipToken) {\n            console.error(`Attempted to invoke queryFn when set to skipToken. This is likely a configuration error. Query hash: '${options.queryHash}'`);\n        }\n    }\n    if (!options.queryFn && fetchOptions?.initialPromise) {\n        return ()=>fetchOptions.initialPromise;\n    }\n    if (!options.queryFn || options.queryFn === skipToken) {\n        return ()=>Promise.reject(new Error(`Missing queryFn: '${options.queryHash}'`));\n    }\n    return options.queryFn;\n}\n //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-devtools/build/DevtoolsComponent/SUXNJKMM.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tanstack/query-devtools/build/DevtoolsComponent/SUXNJKMM.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DevtoolsComponent_default)\n/* harmony export */ });\n/* harmony import */ var _chunk_DZBXNQB4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../chunk/DZBXNQB4.js */ \"(ssr)/./node_modules/@tanstack/query-devtools/build/chunk/DZBXNQB4.js\");\n/* harmony import */ var _chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../chunk/V5T5VJKG.js */ \"(ssr)/./node_modules/@tanstack/query-devtools/build/chunk/V5T5VJKG.js\");\n\n\n// src/DevtoolsComponent.tsx\nvar DevtoolsComponent = (props)=>{\n    const [localStore, setLocalStore] = (0,_chunk_DZBXNQB4_js__WEBPACK_IMPORTED_MODULE_0__.createLocalStorage)({\n        prefix: \"TanstackQueryDevtools\"\n    });\n    const colorScheme = (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_1__.getPreferredColorScheme)();\n    const theme = (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_1__.createMemo)(()=>{\n        const preference = localStore.theme_preference || _chunk_DZBXNQB4_js__WEBPACK_IMPORTED_MODULE_0__.THEME_PREFERENCE;\n        if (preference !== \"system\") return preference;\n        return colorScheme();\n    });\n    return (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_1__.createComponent)(_chunk_DZBXNQB4_js__WEBPACK_IMPORTED_MODULE_0__.QueryDevtoolsContext.Provider, {\n        value: props,\n        get children () {\n            return (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_1__.createComponent)(_chunk_DZBXNQB4_js__WEBPACK_IMPORTED_MODULE_0__.PiPProvider, {\n                localStore,\n                setLocalStore,\n                get children () {\n                    return (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_1__.createComponent)(_chunk_DZBXNQB4_js__WEBPACK_IMPORTED_MODULE_0__.ThemeContext.Provider, {\n                        value: theme,\n                        get children () {\n                            return (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_1__.createComponent)(_chunk_DZBXNQB4_js__WEBPACK_IMPORTED_MODULE_0__.Devtools, {\n                                localStore,\n                                setLocalStore\n                            });\n                        }\n                    });\n                }\n            });\n        }\n    });\n};\nvar DevtoolsComponent_default = DevtoolsComponent;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWRldnRvb2xzL2J1aWxkL0RldnRvb2xzQ29tcG9uZW50L1NVWE5KS01NLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF1STtBQUMzQztBQUU1Riw0QkFBNEI7QUFDNUIsSUFBSVMsb0JBQW9CLENBQUNDO0lBQ3ZCLE1BQU0sQ0FBQ0MsWUFBWUMsY0FBYyxHQUFHWixzRUFBa0JBLENBQUM7UUFDckRhLFFBQVE7SUFDVjtJQUNBLE1BQU1DLGNBQWNSLDJFQUF1QkE7SUFDM0MsTUFBTVMsUUFBUVIsOERBQVVBLENBQUM7UUFDdkIsTUFBTVMsYUFBYUwsV0FBV00sZ0JBQWdCLElBQUloQixnRUFBZ0JBO1FBQ2xFLElBQUllLGVBQWUsVUFBVSxPQUFPQTtRQUNwQyxPQUFPRjtJQUNUO0lBQ0EsT0FBT04sbUVBQWVBLENBQUNOLG9FQUFvQkEsQ0FBQ2dCLFFBQVEsRUFBRTtRQUNwREMsT0FBT1Q7UUFDUCxJQUFJVSxZQUFXO1lBQ2IsT0FBT1osbUVBQWVBLENBQUNMLDJEQUFXQSxFQUFFO2dCQUNsQ1E7Z0JBQ0FDO2dCQUNBLElBQUlRLFlBQVc7b0JBQ2IsT0FBT1osbUVBQWVBLENBQUNKLDREQUFZQSxDQUFDYyxRQUFRLEVBQUU7d0JBQzVDQyxPQUFPSjt3QkFDUCxJQUFJSyxZQUFXOzRCQUNiLE9BQU9aLG1FQUFlQSxDQUFDSCx3REFBUUEsRUFBRTtnQ0FDL0JNO2dDQUNBQzs0QkFDRjt3QkFDRjtvQkFDRjtnQkFDRjtZQUNGO1FBQ0Y7SUFDRjtBQUNGO0FBQ0EsSUFBSVMsNEJBQTRCWjtBQUVnQiIsInNvdXJjZXMiOlsid2VicGFjazovL2dyb3ctd2l0aC11cy8uL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcXVlcnktZGV2dG9vbHMvYnVpbGQvRGV2dG9vbHNDb21wb25lbnQvU1VYTkpLTU0uanM/ZjJmNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVMb2NhbFN0b3JhZ2UsIFRIRU1FX1BSRUZFUkVOQ0UsIFF1ZXJ5RGV2dG9vbHNDb250ZXh0LCBQaVBQcm92aWRlciwgVGhlbWVDb250ZXh0LCBEZXZ0b29scyB9IGZyb20gJy4uL2NodW5rL0RaQlhOUUI0LmpzJztcbmltcG9ydCB7IGdldFByZWZlcnJlZENvbG9yU2NoZW1lLCBjcmVhdGVNZW1vLCBjcmVhdGVDb21wb25lbnQgfSBmcm9tICcuLi9jaHVuay9WNVQ1VkpLRy5qcyc7XG5cbi8vIHNyYy9EZXZ0b29sc0NvbXBvbmVudC50c3hcbnZhciBEZXZ0b29sc0NvbXBvbmVudCA9IChwcm9wcykgPT4ge1xuICBjb25zdCBbbG9jYWxTdG9yZSwgc2V0TG9jYWxTdG9yZV0gPSBjcmVhdGVMb2NhbFN0b3JhZ2Uoe1xuICAgIHByZWZpeDogXCJUYW5zdGFja1F1ZXJ5RGV2dG9vbHNcIlxuICB9KTtcbiAgY29uc3QgY29sb3JTY2hlbWUgPSBnZXRQcmVmZXJyZWRDb2xvclNjaGVtZSgpO1xuICBjb25zdCB0aGVtZSA9IGNyZWF0ZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IHByZWZlcmVuY2UgPSBsb2NhbFN0b3JlLnRoZW1lX3ByZWZlcmVuY2UgfHwgVEhFTUVfUFJFRkVSRU5DRTtcbiAgICBpZiAocHJlZmVyZW5jZSAhPT0gXCJzeXN0ZW1cIikgcmV0dXJuIHByZWZlcmVuY2U7XG4gICAgcmV0dXJuIGNvbG9yU2NoZW1lKCk7XG4gIH0pO1xuICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KFF1ZXJ5RGV2dG9vbHNDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHByb3BzLFxuICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgIHJldHVybiBjcmVhdGVDb21wb25lbnQoUGlQUHJvdmlkZXIsIHtcbiAgICAgICAgbG9jYWxTdG9yZSxcbiAgICAgICAgc2V0TG9jYWxTdG9yZSxcbiAgICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVDb21wb25lbnQoVGhlbWVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgICAgICB2YWx1ZTogdGhlbWUsXG4gICAgICAgICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjcmVhdGVDb21wb25lbnQoRGV2dG9vbHMsIHtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JlLFxuICAgICAgICAgICAgICAgIHNldExvY2FsU3RvcmVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyIERldnRvb2xzQ29tcG9uZW50X2RlZmF1bHQgPSBEZXZ0b29sc0NvbXBvbmVudDtcblxuZXhwb3J0IHsgRGV2dG9vbHNDb21wb25lbnRfZGVmYXVsdCBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOlsiY3JlYXRlTG9jYWxTdG9yYWdlIiwiVEhFTUVfUFJFRkVSRU5DRSIsIlF1ZXJ5RGV2dG9vbHNDb250ZXh0IiwiUGlQUHJvdmlkZXIiLCJUaGVtZUNvbnRleHQiLCJEZXZ0b29scyIsImdldFByZWZlcnJlZENvbG9yU2NoZW1lIiwiY3JlYXRlTWVtbyIsImNyZWF0ZUNvbXBvbmVudCIsIkRldnRvb2xzQ29tcG9uZW50IiwicHJvcHMiLCJsb2NhbFN0b3JlIiwic2V0TG9jYWxTdG9yZSIsInByZWZpeCIsImNvbG9yU2NoZW1lIiwidGhlbWUiLCJwcmVmZXJlbmNlIiwidGhlbWVfcHJlZmVyZW5jZSIsIlByb3ZpZGVyIiwidmFsdWUiLCJjaGlsZHJlbiIsIkRldnRvb2xzQ29tcG9uZW50X2RlZmF1bHQiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-devtools/build/DevtoolsComponent/SUXNJKMM.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-devtools/build/DevtoolsPanelComponent/LDUQ2GE4.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@tanstack/query-devtools/build/DevtoolsPanelComponent/LDUQ2GE4.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DevtoolsPanelComponent_default)\n/* harmony export */ });\n/* harmony import */ var _chunk_DZBXNQB4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../chunk/DZBXNQB4.js */ \"(ssr)/./node_modules/@tanstack/query-devtools/build/chunk/DZBXNQB4.js\");\n/* harmony import */ var _chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../chunk/V5T5VJKG.js */ \"(ssr)/./node_modules/@tanstack/query-devtools/build/chunk/V5T5VJKG.js\");\n\n\n// src/DevtoolsPanelComponent.tsx\nvar DevtoolsPanelComponent = (props)=>{\n    const [localStore, setLocalStore] = (0,_chunk_DZBXNQB4_js__WEBPACK_IMPORTED_MODULE_0__.createLocalStorage)({\n        prefix: \"TanstackQueryDevtools\"\n    });\n    const colorScheme = (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_1__.getPreferredColorScheme)();\n    const theme = (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_1__.createMemo)(()=>{\n        const preference = localStore.theme_preference || _chunk_DZBXNQB4_js__WEBPACK_IMPORTED_MODULE_0__.THEME_PREFERENCE;\n        if (preference !== \"system\") return preference;\n        return colorScheme();\n    });\n    return (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_1__.createComponent)(_chunk_DZBXNQB4_js__WEBPACK_IMPORTED_MODULE_0__.QueryDevtoolsContext.Provider, {\n        value: props,\n        get children () {\n            return (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_1__.createComponent)(_chunk_DZBXNQB4_js__WEBPACK_IMPORTED_MODULE_0__.PiPProvider, {\n                disabled: true,\n                localStore,\n                setLocalStore,\n                get children () {\n                    return (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_1__.createComponent)(_chunk_DZBXNQB4_js__WEBPACK_IMPORTED_MODULE_0__.ThemeContext.Provider, {\n                        value: theme,\n                        get children () {\n                            return (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_1__.createComponent)(_chunk_DZBXNQB4_js__WEBPACK_IMPORTED_MODULE_0__.ParentPanel, {\n                                get children () {\n                                    return (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_1__.createComponent)(_chunk_DZBXNQB4_js__WEBPACK_IMPORTED_MODULE_0__.ContentView, {\n                                        localStore,\n                                        setLocalStore,\n                                        get onClose () {\n                                            return props.onClose;\n                                        },\n                                        showPanelViewOnly: true\n                                    });\n                                }\n                            });\n                        }\n                    });\n                }\n            });\n        }\n    });\n};\nvar DevtoolsPanelComponent_default = DevtoolsPanelComponent;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWRldnRvb2xzL2J1aWxkL0RldnRvb2xzUGFuZWxDb21wb25lbnQvTERVUTJHRTQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXVKO0FBQzNEO0FBRTVGLGlDQUFpQztBQUNqQyxJQUFJVSx5QkFBeUIsQ0FBQ0M7SUFDNUIsTUFBTSxDQUFDQyxZQUFZQyxjQUFjLEdBQUdiLHNFQUFrQkEsQ0FBQztRQUNyRGMsUUFBUTtJQUNWO0lBQ0EsTUFBTUMsY0FBY1IsMkVBQXVCQTtJQUMzQyxNQUFNUyxRQUFRUiw4REFBVUEsQ0FBQztRQUN2QixNQUFNUyxhQUFhTCxXQUFXTSxnQkFBZ0IsSUFBSWpCLGdFQUFnQkE7UUFDbEUsSUFBSWdCLGVBQWUsVUFBVSxPQUFPQTtRQUNwQyxPQUFPRjtJQUNUO0lBQ0EsT0FBT04sbUVBQWVBLENBQUNQLG9FQUFvQkEsQ0FBQ2lCLFFBQVEsRUFBRTtRQUNwREMsT0FBT1Q7UUFDUCxJQUFJVSxZQUFXO1lBQ2IsT0FBT1osbUVBQWVBLENBQUNOLDJEQUFXQSxFQUFFO2dCQUNsQ21CLFVBQVU7Z0JBQ1ZWO2dCQUNBQztnQkFDQSxJQUFJUSxZQUFXO29CQUNiLE9BQU9aLG1FQUFlQSxDQUFDTCw0REFBWUEsQ0FBQ2UsUUFBUSxFQUFFO3dCQUM1Q0MsT0FBT0o7d0JBQ1AsSUFBSUssWUFBVzs0QkFDYixPQUFPWixtRUFBZUEsQ0FBQ0osMkRBQVdBLEVBQUU7Z0NBQ2xDLElBQUlnQixZQUFXO29DQUNiLE9BQU9aLG1FQUFlQSxDQUFDSCwyREFBV0EsRUFBRTt3Q0FDbENNO3dDQUNBQzt3Q0FDQSxJQUFJVSxXQUFVOzRDQUNaLE9BQU9aLE1BQU1ZLE9BQU87d0NBQ3RCO3dDQUNBQyxtQkFBbUI7b0NBQ3JCO2dDQUNGOzRCQUNGO3dCQUNGO29CQUNGO2dCQUNGO1lBQ0Y7UUFDRjtJQUNGO0FBQ0Y7QUFDQSxJQUFJQyxpQ0FBaUNmO0FBRWdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3Jvdy13aXRoLXVzLy4vbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9xdWVyeS1kZXZ0b29scy9idWlsZC9EZXZ0b29sc1BhbmVsQ29tcG9uZW50L0xEVVEyR0U0LmpzPzIxYTgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlTG9jYWxTdG9yYWdlLCBUSEVNRV9QUkVGRVJFTkNFLCBRdWVyeURldnRvb2xzQ29udGV4dCwgUGlQUHJvdmlkZXIsIFRoZW1lQ29udGV4dCwgUGFyZW50UGFuZWwsIENvbnRlbnRWaWV3IH0gZnJvbSAnLi4vY2h1bmsvRFpCWE5RQjQuanMnO1xuaW1wb3J0IHsgZ2V0UHJlZmVycmVkQ29sb3JTY2hlbWUsIGNyZWF0ZU1lbW8sIGNyZWF0ZUNvbXBvbmVudCB9IGZyb20gJy4uL2NodW5rL1Y1VDVWSktHLmpzJztcblxuLy8gc3JjL0RldnRvb2xzUGFuZWxDb21wb25lbnQudHN4XG52YXIgRGV2dG9vbHNQYW5lbENvbXBvbmVudCA9IChwcm9wcykgPT4ge1xuICBjb25zdCBbbG9jYWxTdG9yZSwgc2V0TG9jYWxTdG9yZV0gPSBjcmVhdGVMb2NhbFN0b3JhZ2Uoe1xuICAgIHByZWZpeDogXCJUYW5zdGFja1F1ZXJ5RGV2dG9vbHNcIlxuICB9KTtcbiAgY29uc3QgY29sb3JTY2hlbWUgPSBnZXRQcmVmZXJyZWRDb2xvclNjaGVtZSgpO1xuICBjb25zdCB0aGVtZSA9IGNyZWF0ZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IHByZWZlcmVuY2UgPSBsb2NhbFN0b3JlLnRoZW1lX3ByZWZlcmVuY2UgfHwgVEhFTUVfUFJFRkVSRU5DRTtcbiAgICBpZiAocHJlZmVyZW5jZSAhPT0gXCJzeXN0ZW1cIikgcmV0dXJuIHByZWZlcmVuY2U7XG4gICAgcmV0dXJuIGNvbG9yU2NoZW1lKCk7XG4gIH0pO1xuICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KFF1ZXJ5RGV2dG9vbHNDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHByb3BzLFxuICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgIHJldHVybiBjcmVhdGVDb21wb25lbnQoUGlQUHJvdmlkZXIsIHtcbiAgICAgICAgZGlzYWJsZWQ6IHRydWUsXG4gICAgICAgIGxvY2FsU3RvcmUsXG4gICAgICAgIHNldExvY2FsU3RvcmUsXG4gICAgICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KFRoZW1lQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICAgICAgdmFsdWU6IHRoZW1lLFxuICAgICAgICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KFBhcmVudFBhbmVsLCB7XG4gICAgICAgICAgICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChDb250ZW50Vmlldywge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JlLFxuICAgICAgICAgICAgICAgICAgICBzZXRMb2NhbFN0b3JlLFxuICAgICAgICAgICAgICAgICAgICBnZXQgb25DbG9zZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHMub25DbG9zZTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc2hvd1BhbmVsVmlld09ubHk6IHRydWVcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyIERldnRvb2xzUGFuZWxDb21wb25lbnRfZGVmYXVsdCA9IERldnRvb2xzUGFuZWxDb21wb25lbnQ7XG5cbmV4cG9ydCB7IERldnRvb2xzUGFuZWxDb21wb25lbnRfZGVmYXVsdCBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOlsiY3JlYXRlTG9jYWxTdG9yYWdlIiwiVEhFTUVfUFJFRkVSRU5DRSIsIlF1ZXJ5RGV2dG9vbHNDb250ZXh0IiwiUGlQUHJvdmlkZXIiLCJUaGVtZUNvbnRleHQiLCJQYXJlbnRQYW5lbCIsIkNvbnRlbnRWaWV3IiwiZ2V0UHJlZmVycmVkQ29sb3JTY2hlbWUiLCJjcmVhdGVNZW1vIiwiY3JlYXRlQ29tcG9uZW50IiwiRGV2dG9vbHNQYW5lbENvbXBvbmVudCIsInByb3BzIiwibG9jYWxTdG9yZSIsInNldExvY2FsU3RvcmUiLCJwcmVmaXgiLCJjb2xvclNjaGVtZSIsInRoZW1lIiwicHJlZmVyZW5jZSIsInRoZW1lX3ByZWZlcmVuY2UiLCJQcm92aWRlciIsInZhbHVlIiwiY2hpbGRyZW4iLCJkaXNhYmxlZCIsIm9uQ2xvc2UiLCJzaG93UGFuZWxWaWV3T25seSIsIkRldnRvb2xzUGFuZWxDb21wb25lbnRfZGVmYXVsdCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-devtools/build/DevtoolsPanelComponent/LDUQ2GE4.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-devtools/build/chunk/DZBXNQB4.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tanstack/query-devtools/build/chunk/DZBXNQB4.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentView: () => (/* binding */ ContentView),\n/* harmony export */   Devtools: () => (/* binding */ Devtools),\n/* harmony export */   ParentPanel: () => (/* binding */ ParentPanel),\n/* harmony export */   PiPProvider: () => (/* binding */ PiPProvider),\n/* harmony export */   QueryDevtoolsContext: () => (/* binding */ QueryDevtoolsContext),\n/* harmony export */   THEME_PREFERENCE: () => (/* binding */ THEME_PREFERENCE),\n/* harmony export */   ThemeContext: () => (/* binding */ ThemeContext),\n/* harmony export */   createLocalStorage: () => (/* binding */ createLocalStorage)\n/* harmony export */ });\n/* harmony import */ var _V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./V5T5VJKG.js */ \"(ssr)/./node_modules/@tanstack/query-devtools/build/chunk/V5T5VJKG.js\");\n\n// ../../node_modules/.pnpm/@solid-primitives+utils@6.2.3_solid-js@1.9.5/node_modules/@solid-primitives/utils/dist/chunk/R5675YMU.js\nvar isClient = !_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.isServer;\nvar isDev = isClient && !!_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.DEV;\nvar noop = ()=>void 0;\nvar isNonNullable = (i2)=>i2 != null;\nvar filterNonNullable = (arr)=>arr.filter(isNonNullable);\nfunction chain(callbacks) {\n    return (...args)=>{\n        for (const callback of callbacks)callback && callback(...args);\n    };\n}\nvar access = (v)=>typeof v === \"function\" && !v.length ? v() : v;\nvar asArray = (value)=>Array.isArray(value) ? value : value ? [\n        value\n    ] : [];\nfunction accessWith(valueOrFn, ...args) {\n    return typeof valueOrFn === \"function\" ? valueOrFn(...args) : valueOrFn;\n}\nvar tryOnCleanup = isDev ? (fn)=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.getOwner)() ? (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(fn) : fn : _V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup;\nfunction handleDiffArray(current, prev, handleAdded, handleRemoved) {\n    const currLength = current.length;\n    const prevLength = prev.length;\n    let i2 = 0;\n    if (!prevLength) {\n        for(; i2 < currLength; i2++)handleAdded(current[i2]);\n        return;\n    }\n    if (!currLength) {\n        for(; i2 < prevLength; i2++)handleRemoved(prev[i2]);\n        return;\n    }\n    for(; i2 < prevLength; i2++){\n        if (prev[i2] !== current[i2]) break;\n    }\n    let prevEl;\n    let currEl;\n    prev = prev.slice(i2);\n    current = current.slice(i2);\n    for (prevEl of prev){\n        if (!current.includes(prevEl)) handleRemoved(prevEl);\n    }\n    for (currEl of current){\n        if (!prev.includes(currEl)) handleAdded(currEl);\n    }\n}\n// ../../node_modules/.pnpm/@solid-primitives+storage@1.3.11_solid-js@1.9.5/node_modules/@solid-primitives/storage/dist/index.js\nfunction createStorage(props) {\n    const [error, setError] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const handleError = props?.throw ? (err, fallback)=>{\n        setError(err instanceof Error ? err : new Error(fallback));\n        throw err;\n    } : (err, fallback)=>{\n        setError(err instanceof Error ? err : new Error(fallback));\n    };\n    const apis = props?.api ? Array.isArray(props.api) ? props.api : [\n        props.api\n    ] : [\n        globalThis.localStorage\n    ].filter(Boolean);\n    const prefix = props?.prefix ? `${props.prefix}.` : \"\";\n    const signals = /* @__PURE__ */ new Map();\n    const store = new Proxy({}, {\n        get (_, key) {\n            let node = signals.get(key);\n            if (!node) {\n                node = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(void 0, {\n                    equals: false\n                });\n                signals.set(key, node);\n            }\n            node[0]();\n            const value = apis.reduce((result, api)=>{\n                if (result !== null || !api) {\n                    return result;\n                }\n                try {\n                    return api.getItem(`${prefix}${key}`);\n                } catch (err) {\n                    handleError(err, `Error reading ${prefix}${key} from ${api[\"name\"]}`);\n                    return null;\n                }\n            }, null);\n            if (value !== null && props?.deserializer) {\n                return props.deserializer(value, key, props.options);\n            }\n            return value;\n        }\n    });\n    const setter = (key, value, options)=>{\n        const filteredValue = props?.serializer ? props.serializer(value, key, options ?? props.options) : value;\n        const apiKey = `${prefix}${key}`;\n        apis.forEach((api)=>{\n            try {\n                api.getItem(apiKey) !== filteredValue && api.setItem(apiKey, filteredValue);\n            } catch (err) {\n                handleError(err, `Error setting ${prefix}${key} to ${filteredValue} in ${api.name}`);\n            }\n        });\n        const node = signals.get(key);\n        node && node[1]();\n    };\n    const remove = (key)=>apis.forEach((api)=>{\n            try {\n                api.removeItem(`${prefix}${key}`);\n            } catch (err) {\n                handleError(err, `Error removing ${prefix}${key} from ${api.name}`);\n            }\n        });\n    const clear = ()=>apis.forEach((api)=>{\n            try {\n                api.clear();\n            } catch (err) {\n                handleError(err, `Error clearing ${api.name}`);\n            }\n        });\n    const toJSON = ()=>{\n        const result = {};\n        const addValue = (key, value)=>{\n            if (!result.hasOwnProperty(key)) {\n                const filteredValue = value && props?.deserializer ? props.deserializer(value, key, props.options) : value;\n                if (filteredValue) {\n                    result[key] = filteredValue;\n                }\n            }\n        };\n        apis.forEach((api)=>{\n            if (typeof api.getAll === \"function\") {\n                let values;\n                try {\n                    values = api.getAll();\n                } catch (err) {\n                    handleError(err, `Error getting all values from in ${api.name}`);\n                }\n                for (const key of values){\n                    addValue(key, values[key]);\n                }\n            } else {\n                let index = 0, key;\n                try {\n                    while(key = api.key(index++)){\n                        if (!result.hasOwnProperty(key)) {\n                            addValue(key, api.getItem(key));\n                        }\n                    }\n                } catch (err) {\n                    handleError(err, `Error getting all values from ${api.name}`);\n                }\n            }\n        });\n        return result;\n    };\n    props?.sync !== false && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onMount)(()=>{\n        const listener = (ev)=>{\n            let changed = false;\n            apis.forEach((api)=>{\n                try {\n                    if (api !== ev.storageArea && ev.key && ev.newValue !== api.getItem(ev.key)) {\n                        ev.newValue ? api.setItem(ev.key, ev.newValue) : api.removeItem(ev.key);\n                        changed = true;\n                    }\n                } catch (err) {\n                    handleError(err, `Error synching api ${api.name} from storage event (${ev.key}=${ev.newValue})`);\n                }\n            });\n            changed && ev.key && signals.get(ev.key)?.[1]();\n        };\n        if (\"addEventListener\" in globalThis) {\n            globalThis.addEventListener(\"storage\", listener);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>globalThis.removeEventListener(\"storage\", listener));\n        } else {\n            apis.forEach((api)=>api.addEventListener?.(\"storage\", listener));\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>apis.forEach((api)=>api.removeEventListener?.(\"storage\", listener)));\n        }\n    });\n    return [\n        store,\n        setter,\n        {\n            clear,\n            error,\n            remove,\n            toJSON\n        }\n    ];\n}\nvar createLocalStorage = createStorage;\nvar addClearMethod = (storage)=>{\n    if (typeof storage.clear === \"function\") {\n        return storage;\n    }\n    storage.clear = ()=>{\n        let key;\n        while(key = storage.key(0)){\n            storage.removeItem(key);\n        }\n    };\n    return storage;\n};\nvar serializeCookieOptions = (options)=>{\n    if (!options) {\n        return \"\";\n    }\n    let memo = \"\";\n    for(const key in options){\n        if (!options.hasOwnProperty(key)) {\n            continue;\n        }\n        const value = options[key];\n        memo += value instanceof Date ? `; ${key}=${value.toUTCString()}` : typeof value === \"boolean\" ? `; ${key}` : `; ${key}=${value}`;\n    }\n    return memo;\n};\nvar cookieStorage = addClearMethod({\n    _cookies: [\n        globalThis.document,\n        \"cookie\"\n    ],\n    getItem: (key)=>cookieStorage._cookies[0][cookieStorage._cookies[1]].match(\"(^|;)\\\\s*\" + key + \"\\\\s*=\\\\s*([^;]+)\")?.pop() ?? null,\n    setItem: (key, value, options)=>{\n        const oldValue = cookieStorage.getItem(key);\n        cookieStorage._cookies[0][cookieStorage._cookies[1]] = `${key}=${value}${serializeCookieOptions(options)}`;\n        const storageEvent = Object.assign(new Event(\"storage\"), {\n            key,\n            oldValue,\n            newValue: value,\n            url: globalThis.document.URL,\n            storageArea: cookieStorage\n        });\n        window.dispatchEvent(storageEvent);\n    },\n    removeItem: (key)=>{\n        cookieStorage._cookies[0][cookieStorage._cookies[1]] = `${key}=deleted${serializeCookieOptions({\n            expires: /* @__PURE__ */ new Date(0)\n        })}`;\n    },\n    key: (index)=>{\n        let key = null;\n        let count = 0;\n        cookieStorage._cookies[0][cookieStorage._cookies[1]].replace(/(?:^|;)\\s*(.+?)\\s*=\\s*[^;]+/g, (_, found)=>{\n            if (!key && found && count++ === index) {\n                key = found;\n            }\n            return \"\";\n        });\n        return key;\n    },\n    get length () {\n        let length = 0;\n        cookieStorage._cookies[0][cookieStorage._cookies[1]].replace(/(?:^|;)\\s*.+?\\s*=\\s*[^;]+/g, (found)=>{\n            length += found ? 1 : 0;\n            return \"\";\n        });\n        return length;\n    }\n});\n// src/constants.ts\nvar firstBreakpoint = 1024;\nvar secondBreakpoint = 796;\nvar thirdBreakpoint = 700;\nvar BUTTON_POSITION = \"bottom-right\";\nvar POSITION = \"bottom\";\nvar THEME_PREFERENCE = \"system\";\nvar INITIAL_IS_OPEN = false;\nvar DEFAULT_HEIGHT = 500;\nvar PIP_DEFAULT_HEIGHT = 500;\nvar DEFAULT_WIDTH = 500;\nvar DEFAULT_SORT_FN_NAME = Object.keys(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.sortFns)[0];\nvar DEFAULT_SORT_ORDER = 1;\nvar DEFAULT_MUTATION_SORT_FN_NAME = Object.keys(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mutationSortFns)[0];\n// src/contexts/QueryDevtoolsContext.ts\nvar QueryDevtoolsContext = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    client: void 0,\n    onlineManager: void 0,\n    queryFlavor: \"\",\n    version: \"\",\n    shadowDOMTarget: void 0\n});\nfunction useQueryDevtoolsContext() {\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(QueryDevtoolsContext);\n}\n// src/contexts/PiPContext.tsx\nvar PiPContext = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createContext)(void 0);\nvar PiPProvider = (props)=>{\n    const [pipWindow, setPipWindow] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(null);\n    const closePipWindow = ()=>{\n        const w = pipWindow();\n        if (w != null) {\n            w.close();\n            setPipWindow(null);\n        }\n    };\n    const requestPipWindow = (width, height)=>{\n        if (pipWindow() != null) {\n            return;\n        }\n        const pip = window.open(\"\", \"TSQD-Devtools-Panel\", `width=${width},height=${height},popup`);\n        if (!pip) {\n            throw new Error(\"Failed to open popup. Please allow popups for this site to view the devtools in picture-in-picture mode.\");\n        }\n        pip.document.head.innerHTML = \"\";\n        pip.document.body.innerHTML = \"\";\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.clearDelegatedEvents)(pip.document);\n        pip.document.title = \"TanStack Query Devtools\";\n        pip.document.body.style.margin = \"0\";\n        pip.addEventListener(\"pagehide\", ()=>{\n            props.setLocalStore(\"pip_open\", \"false\");\n            setPipWindow(null);\n        });\n        [\n            ...(useQueryDevtoolsContext().shadowDOMTarget || document).styleSheets\n        ].forEach((styleSheet)=>{\n            try {\n                const cssRules = [\n                    ...styleSheet.cssRules\n                ].map((rule)=>rule.cssText).join(\"\");\n                const style = document.createElement(\"style\");\n                const style_node = styleSheet.ownerNode;\n                let style_id = \"\";\n                if (style_node && \"id\" in style_node) {\n                    style_id = style_node.id;\n                }\n                if (style_id) {\n                    style.setAttribute(\"id\", style_id);\n                }\n                style.textContent = cssRules;\n                pip.document.head.appendChild(style);\n            } catch (e2) {\n                const link = document.createElement(\"link\");\n                if (styleSheet.href == null) {\n                    return;\n                }\n                link.rel = \"stylesheet\";\n                link.type = styleSheet.type;\n                link.media = styleSheet.media.toString();\n                link.href = styleSheet.href;\n                pip.document.head.appendChild(link);\n            }\n        });\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.delegateEvents)([\n            \"focusin\",\n            \"focusout\",\n            \"pointermove\",\n            \"keydown\",\n            \"pointerdown\",\n            \"pointerup\",\n            \"click\",\n            \"mousedown\",\n            \"input\"\n        ], pip.document);\n        props.setLocalStore(\"pip_open\", \"true\");\n        setPipWindow(pip);\n    };\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        const pip_open = props.localStore.pip_open ?? \"false\";\n        if (pip_open === \"true\" && !props.disabled) {\n            requestPipWindow(Number(window.innerWidth), Number(props.localStore.height || PIP_DEFAULT_HEIGHT));\n        }\n    });\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        const gooberStyles = (useQueryDevtoolsContext().shadowDOMTarget || document).querySelector(\"#_goober\");\n        const w = pipWindow();\n        if (gooberStyles && w) {\n            const observer = new MutationObserver(()=>{\n                const pip_style = (useQueryDevtoolsContext().shadowDOMTarget || w.document).querySelector(\"#_goober\");\n                if (pip_style) {\n                    pip_style.textContent = gooberStyles.textContent;\n                }\n            });\n            observer.observe(gooberStyles, {\n                childList: true,\n                // observe direct children\n                subtree: true,\n                // and lower descendants too\n                characterDataOldValue: true\n            });\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n                observer.disconnect();\n            });\n        }\n    });\n    const value = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>({\n            pipWindow: pipWindow(),\n            requestPipWindow,\n            closePipWindow,\n            disabled: props.disabled ?? false\n        }));\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(PiPContext.Provider, {\n        value,\n        get children () {\n            return props.children;\n        }\n    });\n};\nvar usePiPWindow = ()=>{\n    const context = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        const ctx = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(PiPContext);\n        if (!ctx) {\n            throw new Error(\"usePiPWindow must be used within a PiPProvider\");\n        }\n        return ctx();\n    });\n    return context;\n};\n// src/contexts/ThemeContext.ts\nvar ThemeContext = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createContext)(()=>\"dark\");\nfunction useTheme() {\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(ThemeContext);\n}\n// ../../node_modules/.pnpm/@tanstack+match-sorter-utils@8.19.4/node_modules/@tanstack/match-sorter-utils/build/lib/index.mjs\nvar characterMap = {\n    À: \"A\",\n    Á: \"A\",\n    Â: \"A\",\n    Ã: \"A\",\n    Ä: \"A\",\n    Å: \"A\",\n    Ấ: \"A\",\n    Ắ: \"A\",\n    Ẳ: \"A\",\n    Ẵ: \"A\",\n    Ặ: \"A\",\n    Æ: \"AE\",\n    Ầ: \"A\",\n    Ằ: \"A\",\n    Ȃ: \"A\",\n    Ç: \"C\",\n    Ḉ: \"C\",\n    È: \"E\",\n    É: \"E\",\n    Ê: \"E\",\n    Ë: \"E\",\n    Ế: \"E\",\n    Ḗ: \"E\",\n    Ề: \"E\",\n    Ḕ: \"E\",\n    Ḝ: \"E\",\n    Ȇ: \"E\",\n    Ì: \"I\",\n    Í: \"I\",\n    Î: \"I\",\n    Ï: \"I\",\n    Ḯ: \"I\",\n    Ȋ: \"I\",\n    Ð: \"D\",\n    Ñ: \"N\",\n    Ò: \"O\",\n    Ó: \"O\",\n    Ô: \"O\",\n    Õ: \"O\",\n    Ö: \"O\",\n    Ø: \"O\",\n    Ố: \"O\",\n    Ṍ: \"O\",\n    Ṓ: \"O\",\n    Ȏ: \"O\",\n    Ù: \"U\",\n    Ú: \"U\",\n    Û: \"U\",\n    Ü: \"U\",\n    Ý: \"Y\",\n    à: \"a\",\n    á: \"a\",\n    â: \"a\",\n    ã: \"a\",\n    ä: \"a\",\n    å: \"a\",\n    ấ: \"a\",\n    ắ: \"a\",\n    ẳ: \"a\",\n    ẵ: \"a\",\n    ặ: \"a\",\n    æ: \"ae\",\n    ầ: \"a\",\n    ằ: \"a\",\n    ȃ: \"a\",\n    ç: \"c\",\n    ḉ: \"c\",\n    è: \"e\",\n    é: \"e\",\n    ê: \"e\",\n    ë: \"e\",\n    ế: \"e\",\n    ḗ: \"e\",\n    ề: \"e\",\n    ḕ: \"e\",\n    ḝ: \"e\",\n    ȇ: \"e\",\n    ì: \"i\",\n    í: \"i\",\n    î: \"i\",\n    ï: \"i\",\n    ḯ: \"i\",\n    ȋ: \"i\",\n    ð: \"d\",\n    ñ: \"n\",\n    ò: \"o\",\n    ó: \"o\",\n    ô: \"o\",\n    õ: \"o\",\n    ö: \"o\",\n    ø: \"o\",\n    ố: \"o\",\n    ṍ: \"o\",\n    ṓ: \"o\",\n    ȏ: \"o\",\n    ù: \"u\",\n    ú: \"u\",\n    û: \"u\",\n    ü: \"u\",\n    ý: \"y\",\n    ÿ: \"y\",\n    Ā: \"A\",\n    ā: \"a\",\n    Ă: \"A\",\n    ă: \"a\",\n    Ą: \"A\",\n    ą: \"a\",\n    Ć: \"C\",\n    ć: \"c\",\n    Ĉ: \"C\",\n    ĉ: \"c\",\n    Ċ: \"C\",\n    ċ: \"c\",\n    Č: \"C\",\n    č: \"c\",\n    C̆: \"C\",\n    c̆: \"c\",\n    Ď: \"D\",\n    ď: \"d\",\n    Đ: \"D\",\n    đ: \"d\",\n    Ē: \"E\",\n    ē: \"e\",\n    Ĕ: \"E\",\n    ĕ: \"e\",\n    Ė: \"E\",\n    ė: \"e\",\n    Ę: \"E\",\n    ę: \"e\",\n    Ě: \"E\",\n    ě: \"e\",\n    Ĝ: \"G\",\n    Ǵ: \"G\",\n    ĝ: \"g\",\n    ǵ: \"g\",\n    Ğ: \"G\",\n    ğ: \"g\",\n    Ġ: \"G\",\n    ġ: \"g\",\n    Ģ: \"G\",\n    ģ: \"g\",\n    Ĥ: \"H\",\n    ĥ: \"h\",\n    Ħ: \"H\",\n    ħ: \"h\",\n    Ḫ: \"H\",\n    ḫ: \"h\",\n    Ĩ: \"I\",\n    ĩ: \"i\",\n    Ī: \"I\",\n    ī: \"i\",\n    Ĭ: \"I\",\n    ĭ: \"i\",\n    Į: \"I\",\n    į: \"i\",\n    İ: \"I\",\n    ı: \"i\",\n    Ĳ: \"IJ\",\n    ĳ: \"ij\",\n    Ĵ: \"J\",\n    ĵ: \"j\",\n    Ķ: \"K\",\n    ķ: \"k\",\n    Ḱ: \"K\",\n    ḱ: \"k\",\n    K̆: \"K\",\n    k̆: \"k\",\n    Ĺ: \"L\",\n    ĺ: \"l\",\n    Ļ: \"L\",\n    ļ: \"l\",\n    Ľ: \"L\",\n    ľ: \"l\",\n    Ŀ: \"L\",\n    ŀ: \"l\",\n    Ł: \"l\",\n    ł: \"l\",\n    Ḿ: \"M\",\n    ḿ: \"m\",\n    M̆: \"M\",\n    m̆: \"m\",\n    Ń: \"N\",\n    ń: \"n\",\n    Ņ: \"N\",\n    ņ: \"n\",\n    Ň: \"N\",\n    ň: \"n\",\n    ŉ: \"n\",\n    N̆: \"N\",\n    n̆: \"n\",\n    Ō: \"O\",\n    ō: \"o\",\n    Ŏ: \"O\",\n    ŏ: \"o\",\n    Ő: \"O\",\n    ő: \"o\",\n    Œ: \"OE\",\n    œ: \"oe\",\n    P̆: \"P\",\n    p̆: \"p\",\n    Ŕ: \"R\",\n    ŕ: \"r\",\n    Ŗ: \"R\",\n    ŗ: \"r\",\n    Ř: \"R\",\n    ř: \"r\",\n    R̆: \"R\",\n    r̆: \"r\",\n    Ȓ: \"R\",\n    ȓ: \"r\",\n    Ś: \"S\",\n    ś: \"s\",\n    Ŝ: \"S\",\n    ŝ: \"s\",\n    Ş: \"S\",\n    Ș: \"S\",\n    ș: \"s\",\n    ş: \"s\",\n    Š: \"S\",\n    š: \"s\",\n    Ţ: \"T\",\n    ţ: \"t\",\n    ț: \"t\",\n    Ț: \"T\",\n    Ť: \"T\",\n    ť: \"t\",\n    Ŧ: \"T\",\n    ŧ: \"t\",\n    T̆: \"T\",\n    t̆: \"t\",\n    Ũ: \"U\",\n    ũ: \"u\",\n    Ū: \"U\",\n    ū: \"u\",\n    Ŭ: \"U\",\n    ŭ: \"u\",\n    Ů: \"U\",\n    ů: \"u\",\n    Ű: \"U\",\n    ű: \"u\",\n    Ų: \"U\",\n    ų: \"u\",\n    Ȗ: \"U\",\n    ȗ: \"u\",\n    V̆: \"V\",\n    v̆: \"v\",\n    Ŵ: \"W\",\n    ŵ: \"w\",\n    Ẃ: \"W\",\n    ẃ: \"w\",\n    X̆: \"X\",\n    x̆: \"x\",\n    Ŷ: \"Y\",\n    ŷ: \"y\",\n    Ÿ: \"Y\",\n    Y̆: \"Y\",\n    y̆: \"y\",\n    Ź: \"Z\",\n    ź: \"z\",\n    Ż: \"Z\",\n    ż: \"z\",\n    Ž: \"Z\",\n    ž: \"z\",\n    ſ: \"s\",\n    ƒ: \"f\",\n    Ơ: \"O\",\n    ơ: \"o\",\n    Ư: \"U\",\n    ư: \"u\",\n    Ǎ: \"A\",\n    ǎ: \"a\",\n    Ǐ: \"I\",\n    ǐ: \"i\",\n    Ǒ: \"O\",\n    ǒ: \"o\",\n    Ǔ: \"U\",\n    ǔ: \"u\",\n    Ǖ: \"U\",\n    ǖ: \"u\",\n    Ǘ: \"U\",\n    ǘ: \"u\",\n    Ǚ: \"U\",\n    ǚ: \"u\",\n    Ǜ: \"U\",\n    ǜ: \"u\",\n    Ứ: \"U\",\n    ứ: \"u\",\n    Ṹ: \"U\",\n    ṹ: \"u\",\n    Ǻ: \"A\",\n    ǻ: \"a\",\n    Ǽ: \"AE\",\n    ǽ: \"ae\",\n    Ǿ: \"O\",\n    ǿ: \"o\",\n    Þ: \"TH\",\n    þ: \"th\",\n    Ṕ: \"P\",\n    ṕ: \"p\",\n    Ṥ: \"S\",\n    ṥ: \"s\",\n    X́: \"X\",\n    x́: \"x\",\n    Ѓ: \"Г\",\n    ѓ: \"г\",\n    Ќ: \"К\",\n    ќ: \"к\",\n    A̋: \"A\",\n    a̋: \"a\",\n    E̋: \"E\",\n    e̋: \"e\",\n    I̋: \"I\",\n    i̋: \"i\",\n    Ǹ: \"N\",\n    ǹ: \"n\",\n    Ồ: \"O\",\n    ồ: \"o\",\n    Ṑ: \"O\",\n    ṑ: \"o\",\n    Ừ: \"U\",\n    ừ: \"u\",\n    Ẁ: \"W\",\n    ẁ: \"w\",\n    Ỳ: \"Y\",\n    ỳ: \"y\",\n    Ȁ: \"A\",\n    ȁ: \"a\",\n    Ȅ: \"E\",\n    ȅ: \"e\",\n    Ȉ: \"I\",\n    ȉ: \"i\",\n    Ȍ: \"O\",\n    ȍ: \"o\",\n    Ȑ: \"R\",\n    ȑ: \"r\",\n    Ȕ: \"U\",\n    ȕ: \"u\",\n    B̌: \"B\",\n    b̌: \"b\",\n    Č̣: \"C\",\n    č̣: \"c\",\n    Ê̌: \"E\",\n    ê̌: \"e\",\n    F̌: \"F\",\n    f̌: \"f\",\n    Ǧ: \"G\",\n    ǧ: \"g\",\n    Ȟ: \"H\",\n    ȟ: \"h\",\n    J̌: \"J\",\n    ǰ: \"j\",\n    Ǩ: \"K\",\n    ǩ: \"k\",\n    M̌: \"M\",\n    m̌: \"m\",\n    P̌: \"P\",\n    p̌: \"p\",\n    Q̌: \"Q\",\n    q̌: \"q\",\n    Ř̩: \"R\",\n    ř̩: \"r\",\n    Ṧ: \"S\",\n    ṧ: \"s\",\n    V̌: \"V\",\n    v̌: \"v\",\n    W̌: \"W\",\n    w̌: \"w\",\n    X̌: \"X\",\n    x̌: \"x\",\n    Y̌: \"Y\",\n    y̌: \"y\",\n    A̧: \"A\",\n    a̧: \"a\",\n    B̧: \"B\",\n    b̧: \"b\",\n    Ḑ: \"D\",\n    ḑ: \"d\",\n    Ȩ: \"E\",\n    ȩ: \"e\",\n    Ɛ̧: \"E\",\n    ɛ̧: \"e\",\n    Ḩ: \"H\",\n    ḩ: \"h\",\n    I̧: \"I\",\n    i̧: \"i\",\n    Ɨ̧: \"I\",\n    ɨ̧: \"i\",\n    M̧: \"M\",\n    m̧: \"m\",\n    O̧: \"O\",\n    o̧: \"o\",\n    Q̧: \"Q\",\n    q̧: \"q\",\n    U̧: \"U\",\n    u̧: \"u\",\n    X̧: \"X\",\n    x̧: \"x\",\n    Z̧: \"Z\",\n    z̧: \"z\"\n};\nvar chars = Object.keys(characterMap).join(\"|\");\nvar allAccents = new RegExp(chars, \"g\");\nfunction removeAccents(str) {\n    return str.replace(allAccents, (match)=>{\n        return characterMap[match];\n    });\n}\nvar rankings = {\n    CASE_SENSITIVE_EQUAL: 7,\n    EQUAL: 6,\n    STARTS_WITH: 5,\n    WORD_STARTS_WITH: 4,\n    CONTAINS: 3,\n    ACRONYM: 2,\n    MATCHES: 1,\n    NO_MATCH: 0\n};\nfunction rankItem(item, value, options) {\n    var _options$threshold;\n    options = options || {};\n    options.threshold = (_options$threshold = options.threshold) != null ? _options$threshold : rankings.MATCHES;\n    if (!options.accessors) {\n        const rank = getMatchRanking(item, value, options);\n        return {\n            // ends up being duplicate of 'item' in matches but consistent\n            rankedValue: item,\n            rank,\n            accessorIndex: -1,\n            accessorThreshold: options.threshold,\n            passed: rank >= options.threshold\n        };\n    }\n    const valuesToRank = getAllValuesToRank(item, options.accessors);\n    const rankingInfo = {\n        rankedValue: item,\n        rank: rankings.NO_MATCH,\n        accessorIndex: -1,\n        accessorThreshold: options.threshold,\n        passed: false\n    };\n    for(let i2 = 0; i2 < valuesToRank.length; i2++){\n        const rankValue = valuesToRank[i2];\n        let newRank = getMatchRanking(rankValue.itemValue, value, options);\n        const { minRanking, maxRanking, threshold = options.threshold } = rankValue.attributes;\n        if (newRank < minRanking && newRank >= rankings.MATCHES) {\n            newRank = minRanking;\n        } else if (newRank > maxRanking) {\n            newRank = maxRanking;\n        }\n        newRank = Math.min(newRank, maxRanking);\n        if (newRank >= threshold && newRank > rankingInfo.rank) {\n            rankingInfo.rank = newRank;\n            rankingInfo.passed = true;\n            rankingInfo.accessorIndex = i2;\n            rankingInfo.accessorThreshold = threshold;\n            rankingInfo.rankedValue = rankValue.itemValue;\n        }\n    }\n    return rankingInfo;\n}\nfunction getMatchRanking(testString, stringToRank, options) {\n    testString = prepareValueForComparison(testString, options);\n    stringToRank = prepareValueForComparison(stringToRank, options);\n    if (stringToRank.length > testString.length) {\n        return rankings.NO_MATCH;\n    }\n    if (testString === stringToRank) {\n        return rankings.CASE_SENSITIVE_EQUAL;\n    }\n    testString = testString.toLowerCase();\n    stringToRank = stringToRank.toLowerCase();\n    if (testString === stringToRank) {\n        return rankings.EQUAL;\n    }\n    if (testString.startsWith(stringToRank)) {\n        return rankings.STARTS_WITH;\n    }\n    if (testString.includes(` ${stringToRank}`)) {\n        return rankings.WORD_STARTS_WITH;\n    }\n    if (testString.includes(stringToRank)) {\n        return rankings.CONTAINS;\n    } else if (stringToRank.length === 1) {\n        return rankings.NO_MATCH;\n    }\n    if (getAcronym(testString).includes(stringToRank)) {\n        return rankings.ACRONYM;\n    }\n    return getClosenessRanking(testString, stringToRank);\n}\nfunction getAcronym(string) {\n    let acronym = \"\";\n    const wordsInString = string.split(\" \");\n    wordsInString.forEach((wordInString)=>{\n        const splitByHyphenWords = wordInString.split(\"-\");\n        splitByHyphenWords.forEach((splitByHyphenWord)=>{\n            acronym += splitByHyphenWord.substr(0, 1);\n        });\n    });\n    return acronym;\n}\nfunction getClosenessRanking(testString, stringToRank) {\n    let matchingInOrderCharCount = 0;\n    let charNumber = 0;\n    function findMatchingCharacter(matchChar, string, index) {\n        for(let j = index, J = string.length; j < J; j++){\n            const stringChar = string[j];\n            if (stringChar === matchChar) {\n                matchingInOrderCharCount += 1;\n                return j + 1;\n            }\n        }\n        return -1;\n    }\n    function getRanking(spread3) {\n        const spreadPercentage = 1 / spread3;\n        const inOrderPercentage = matchingInOrderCharCount / stringToRank.length;\n        const ranking = rankings.MATCHES + inOrderPercentage * spreadPercentage;\n        return ranking;\n    }\n    const firstIndex = findMatchingCharacter(stringToRank[0], testString, 0);\n    if (firstIndex < 0) {\n        return rankings.NO_MATCH;\n    }\n    charNumber = firstIndex;\n    for(let i2 = 1, I = stringToRank.length; i2 < I; i2++){\n        const matchChar = stringToRank[i2];\n        charNumber = findMatchingCharacter(matchChar, testString, charNumber);\n        const found = charNumber > -1;\n        if (!found) {\n            return rankings.NO_MATCH;\n        }\n    }\n    const spread2 = charNumber - firstIndex;\n    return getRanking(spread2);\n}\nfunction prepareValueForComparison(value, _ref) {\n    let { keepDiacritics } = _ref;\n    value = `${value}`;\n    if (!keepDiacritics) {\n        value = removeAccents(value);\n    }\n    return value;\n}\nfunction getItemValues(item, accessor) {\n    let accessorFn = accessor;\n    if (typeof accessor === \"object\") {\n        accessorFn = accessor.accessor;\n    }\n    const value = accessorFn(item);\n    if (value == null) {\n        return [];\n    }\n    if (Array.isArray(value)) {\n        return value;\n    }\n    return [\n        String(value)\n    ];\n}\nfunction getAllValuesToRank(item, accessors) {\n    const allValues = [];\n    for(let j = 0, J = accessors.length; j < J; j++){\n        const accessor = accessors[j];\n        const attributes = getAccessorAttributes(accessor);\n        const itemValues = getItemValues(item, accessor);\n        for(let i2 = 0, I = itemValues.length; i2 < I; i2++){\n            allValues.push({\n                itemValue: itemValues[i2],\n                attributes\n            });\n        }\n    }\n    return allValues;\n}\nvar defaultKeyAttributes = {\n    maxRanking: Infinity,\n    minRanking: -Infinity\n};\nfunction getAccessorAttributes(accessor) {\n    if (typeof accessor === \"function\") {\n        return defaultKeyAttributes;\n    }\n    return {\n        ...defaultKeyAttributes,\n        ...accessor\n    };\n}\n// ../../node_modules/.pnpm/goober@2.1.16_csstype@3.1.3/node_modules/goober/dist/goober.modern.js\nvar e = {\n    data: \"\"\n};\nvar t = (t2)=> false ? 0 : t2 || e;\nvar l = /(?:([\\u0080-\\uFFFF\\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\\s*)/g;\nvar a = /\\/\\*[^]*?\\*\\/|  +/g;\nvar n = /\\n+/g;\nvar o = (e2, t2)=>{\n    let r2 = \"\", l2 = \"\", a2 = \"\";\n    for(let n2 in e2){\n        let c2 = e2[n2];\n        \"@\" == n2[0] ? \"i\" == n2[1] ? r2 = n2 + \" \" + c2 + \";\" : l2 += \"f\" == n2[1] ? o(c2, n2) : n2 + \"{\" + o(c2, \"k\" == n2[1] ? \"\" : t2) + \"}\" : \"object\" == typeof c2 ? l2 += o(c2, t2 ? t2.replace(/([^,])+/g, (e3)=>n2.replace(/([^,]*:\\S+\\([^)]*\\))|([^,])+/g, (t3)=>/&/.test(t3) ? t3.replace(/&/g, e3) : e3 ? e3 + \" \" + t3 : t3)) : n2) : null != c2 && (n2 = /^--/.test(n2) ? n2 : n2.replace(/[A-Z]/g, \"-$&\").toLowerCase(), a2 += o.p ? o.p(n2, c2) : n2 + \":\" + c2 + \";\");\n    }\n    return r2 + (t2 && a2 ? t2 + \"{\" + a2 + \"}\" : a2) + l2;\n};\nvar c = {};\nvar s = (e2)=>{\n    if (\"object\" == typeof e2) {\n        let t2 = \"\";\n        for(let r2 in e2)t2 += r2 + s(e2[r2]);\n        return t2;\n    }\n    return e2;\n};\nvar i = (e2, t2, r2, i2, p2)=>{\n    let u2 = s(e2), d = c[u2] || (c[u2] = ((e3)=>{\n        let t3 = 0, r3 = 11;\n        for(; t3 < e3.length;)r3 = 101 * r3 + e3.charCodeAt(t3++) >>> 0;\n        return \"go\" + r3;\n    })(u2));\n    if (!c[d]) {\n        let t3 = u2 !== e2 ? e2 : ((e3)=>{\n            let t4, r3, o2 = [\n                {}\n            ];\n            for(; t4 = l.exec(e3.replace(a, \"\"));)t4[4] ? o2.shift() : t4[3] ? (r3 = t4[3].replace(n, \" \").trim(), o2.unshift(o2[0][r3] = o2[0][r3] || {})) : o2[0][t4[1]] = t4[2].replace(n, \" \").trim();\n            return o2[0];\n        })(e2);\n        c[d] = o(p2 ? {\n            [\"@keyframes \" + d]: t3\n        } : t3, r2 ? \"\" : \".\" + d);\n    }\n    let f = r2 && c.g ? c.g : null;\n    return r2 && (c.g = c[d]), ((e3, t3, r3, l2)=>{\n        l2 ? t3.data = t3.data.replace(l2, e3) : -1 === t3.data.indexOf(e3) && (t3.data = r3 ? e3 + t3.data : t3.data + e3);\n    })(c[d], t2, i2, f), d;\n};\nvar p = (e2, t2, r2)=>e2.reduce((e3, l2, a2)=>{\n        let n2 = t2[a2];\n        if (n2 && n2.call) {\n            let e4 = n2(r2), t3 = e4 && e4.props && e4.props.className || /^go/.test(e4) && e4;\n            n2 = t3 ? \".\" + t3 : e4 && \"object\" == typeof e4 ? e4.props ? \"\" : o(e4, \"\") : false === e4 ? \"\" : e4;\n        }\n        return e3 + l2 + (null == n2 ? \"\" : n2);\n    }, \"\");\nfunction u(e2) {\n    let r2 = this || {}, l2 = e2.call ? e2(r2.p) : e2;\n    return i(l2.unshift ? l2.raw ? p(l2, [].slice.call(arguments, 1), r2.p) : l2.reduce((e3, t2)=>Object.assign(e3, t2 && t2.call ? t2(r2.p) : t2), {}) : l2, t(r2.target), r2.g, r2.o, r2.k);\n}\nu.bind({\n    g: 1\n});\nu.bind({\n    k: 1\n});\n// ../../node_modules/.pnpm/clsx@2.1.1/node_modules/clsx/dist/clsx.mjs\nfunction r(e2) {\n    var t2, f, n2 = \"\";\n    if (\"string\" == typeof e2 || \"number\" == typeof e2) n2 += e2;\n    else if (\"object\" == typeof e2) if (Array.isArray(e2)) {\n        var o2 = e2.length;\n        for(t2 = 0; t2 < o2; t2++)e2[t2] && (f = r(e2[t2])) && (n2 && (n2 += \" \"), n2 += f);\n    } else for(f in e2)e2[f] && (n2 && (n2 += \" \"), n2 += f);\n    return n2;\n}\nfunction clsx() {\n    for(var e2, t2, f = 0, n2 = \"\", o2 = arguments.length; f < o2; f++)(e2 = arguments[f]) && (t2 = r(e2)) && (n2 && (n2 += \" \"), n2 += t2);\n    return n2;\n}\nfunction createListTransition(source, options) {\n    const initSource = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.untrack)(source);\n    if (_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.isServer) {\n        const copy = initSource.slice();\n        return ()=>copy;\n    }\n    const { onChange } = options;\n    let prevSet = new Set(options.appear ? void 0 : initSource);\n    const exiting = /* @__PURE__ */ new WeakSet();\n    const [toRemove, setToRemove] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)([], {\n        equals: false\n    });\n    const [isTransitionPending] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.useTransition)();\n    const finishRemoved = (els)=>{\n        setToRemove((p2)=>(p2.push.apply(p2, els), p2));\n        for (const el of els)exiting.delete(el);\n    };\n    const handleRemoved = (els, el, i2)=>els.splice(i2, 0, el);\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)((prev)=>{\n        const elsToRemove = toRemove();\n        const sourceList = source();\n        sourceList[_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.$TRACK];\n        if ((0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.untrack)(isTransitionPending)) {\n            isTransitionPending();\n            return prev;\n        }\n        if (elsToRemove.length) {\n            const next = prev.filter((e2)=>!elsToRemove.includes(e2));\n            elsToRemove.length = 0;\n            onChange({\n                list: next,\n                added: [],\n                removed: [],\n                unchanged: next,\n                finishRemoved\n            });\n            return next;\n        }\n        return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.untrack)(()=>{\n            const nextSet = new Set(sourceList);\n            const next = sourceList.slice();\n            const added = [];\n            const removed = [];\n            const unchanged = [];\n            for (const el of sourceList){\n                (prevSet.has(el) ? unchanged : added).push(el);\n            }\n            let nothingChanged = !added.length;\n            for(let i2 = 0; i2 < prev.length; i2++){\n                const el = prev[i2];\n                if (!nextSet.has(el)) {\n                    if (!exiting.has(el)) {\n                        removed.push(el);\n                        exiting.add(el);\n                    }\n                    handleRemoved(next, el, i2);\n                }\n                if (nothingChanged && el !== next[i2]) nothingChanged = false;\n            }\n            if (!removed.length && nothingChanged) return prev;\n            onChange({\n                list: next,\n                added,\n                removed,\n                unchanged,\n                finishRemoved\n            });\n            prevSet = nextSet;\n            return next;\n        });\n    }, options.appear ? [] : initSource.slice());\n}\n// ../../node_modules/.pnpm/@solid-primitives+refs@1.0.8_solid-js@1.9.5/node_modules/@solid-primitives/refs/dist/index.js\nfunction mergeRefs(...refs) {\n    return chain(refs);\n}\nvar defaultElementPredicate = _V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.isServer ? (item)=>item != null && typeof item === \"object\" && \"t\" in item : (item)=>item instanceof Element;\nfunction getResolvedElements(value, predicate) {\n    if (predicate(value)) return value;\n    if (typeof value === \"function\" && !value.length) return getResolvedElements(value(), predicate);\n    if (Array.isArray(value)) {\n        const results = [];\n        for (const item of value){\n            const result = getResolvedElements(item, predicate);\n            if (result) Array.isArray(result) ? results.push.apply(results, result) : results.push(result);\n        }\n        return results.length ? results : null;\n    }\n    return null;\n}\nfunction resolveElements(fn, predicate = defaultElementPredicate, serverPredicate = defaultElementPredicate) {\n    const children2 = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(fn);\n    const memo = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>getResolvedElements(children2(), _V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.isServer ? serverPredicate : predicate));\n    memo.toArray = ()=>{\n        const value = memo();\n        return Array.isArray(value) ? value : value ? [\n            value\n        ] : [];\n    };\n    return memo;\n}\n// ../../node_modules/.pnpm/solid-transition-group@0.2.3_solid-js@1.9.5/node_modules/solid-transition-group/dist/index.js\nfunction createClassnames(props) {\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        const name = props.name || \"s\";\n        return {\n            enterActive: (props.enterActiveClass || name + \"-enter-active\").split(\" \"),\n            enter: (props.enterClass || name + \"-enter\").split(\" \"),\n            enterTo: (props.enterToClass || name + \"-enter-to\").split(\" \"),\n            exitActive: (props.exitActiveClass || name + \"-exit-active\").split(\" \"),\n            exit: (props.exitClass || name + \"-exit\").split(\" \"),\n            exitTo: (props.exitToClass || name + \"-exit-to\").split(\" \"),\n            move: (props.moveClass || name + \"-move\").split(\" \")\n        };\n    });\n}\nfunction nextFrame(fn) {\n    requestAnimationFrame(()=>requestAnimationFrame(fn));\n}\nfunction enterTransition(classes, events, el, done) {\n    const { onBeforeEnter, onEnter, onAfterEnter } = events;\n    onBeforeEnter?.(el);\n    el.classList.add(...classes.enter);\n    el.classList.add(...classes.enterActive);\n    queueMicrotask(()=>{\n        if (!el.parentNode) return done?.();\n        onEnter?.(el, ()=>endTransition());\n    });\n    nextFrame(()=>{\n        el.classList.remove(...classes.enter);\n        el.classList.add(...classes.enterTo);\n        if (!onEnter || onEnter.length < 2) {\n            el.addEventListener(\"transitionend\", endTransition);\n            el.addEventListener(\"animationend\", endTransition);\n        }\n    });\n    function endTransition(e2) {\n        if (!e2 || e2.target === el) {\n            el.removeEventListener(\"transitionend\", endTransition);\n            el.removeEventListener(\"animationend\", endTransition);\n            el.classList.remove(...classes.enterActive);\n            el.classList.remove(...classes.enterTo);\n            onAfterEnter?.(el);\n        }\n    }\n}\nfunction exitTransition(classes, events, el, done) {\n    const { onBeforeExit, onExit, onAfterExit } = events;\n    if (!el.parentNode) return done?.();\n    onBeforeExit?.(el);\n    el.classList.add(...classes.exit);\n    el.classList.add(...classes.exitActive);\n    onExit?.(el, ()=>endTransition());\n    nextFrame(()=>{\n        el.classList.remove(...classes.exit);\n        el.classList.add(...classes.exitTo);\n        if (!onExit || onExit.length < 2) {\n            el.addEventListener(\"transitionend\", endTransition);\n            el.addEventListener(\"animationend\", endTransition);\n        }\n    });\n    function endTransition(e2) {\n        if (!e2 || e2.target === el) {\n            done?.();\n            el.removeEventListener(\"transitionend\", endTransition);\n            el.removeEventListener(\"animationend\", endTransition);\n            el.classList.remove(...classes.exitActive);\n            el.classList.remove(...classes.exitTo);\n            onAfterExit?.(el);\n        }\n    }\n}\nvar TransitionGroup = (props)=>{\n    const classnames = createClassnames(props);\n    return createListTransition(resolveElements(()=>props.children).toArray, {\n        appear: props.appear,\n        onChange ({ added, removed, finishRemoved, list }) {\n            const classes = classnames();\n            for (const el of added){\n                enterTransition(classes, props, el);\n            }\n            const toMove = [];\n            for (const el of list){\n                if (el.isConnected && (el instanceof HTMLElement || el instanceof SVGElement)) {\n                    toMove.push({\n                        el,\n                        rect: el.getBoundingClientRect()\n                    });\n                }\n            }\n            queueMicrotask(()=>{\n                const moved = [];\n                for (const { el, rect } of toMove){\n                    if (el.isConnected) {\n                        const newRect = el.getBoundingClientRect(), dX = rect.left - newRect.left, dY = rect.top - newRect.top;\n                        if (dX || dY) {\n                            el.style.transform = `translate(${dX}px, ${dY}px)`;\n                            el.style.transitionDuration = \"0s\";\n                            moved.push(el);\n                        }\n                    }\n                }\n                document.body.offsetHeight;\n                for (const el of moved){\n                    let endTransition2 = function(e2) {\n                        if (e2.target === el || /transform$/.test(e2.propertyName)) {\n                            el.removeEventListener(\"transitionend\", endTransition2);\n                            el.classList.remove(...classes.move);\n                        }\n                    };\n                    el.classList.add(...classes.move);\n                    el.style.transform = el.style.transitionDuration = \"\";\n                    el.addEventListener(\"transitionend\", endTransition2);\n                }\n            });\n            for (const el of removed){\n                exitTransition(classes, props, el, ()=>finishRemoved([\n                        el\n                    ]));\n            }\n        }\n    });\n};\n// ../../node_modules/.pnpm/@solid-primitives+keyed@1.2.2_solid-js@1.9.5/node_modules/@solid-primitives/keyed/dist/index.js\nvar FALLBACK = Symbol(\"fallback\");\nfunction dispose(list) {\n    for (const o2 of list)o2.dispose();\n}\nfunction keyArray(items, keyFn, mapFn, options = {}) {\n    if (_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.isServer) {\n        const itemsRef = items();\n        let s2 = [];\n        if (itemsRef && itemsRef.length) {\n            for(let i2 = 0, len = itemsRef.length; i2 < len; i2++)s2.push(mapFn(()=>itemsRef[i2], ()=>i2));\n        } else if (options.fallback) s2 = [\n            options.fallback()\n        ];\n        return ()=>s2;\n    }\n    const prev = /* @__PURE__ */ new Map();\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>dispose(prev.values()));\n    return ()=>{\n        const list = items() || [];\n        list[_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.$TRACK];\n        return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.untrack)(()=>{\n            if (!list.length) {\n                dispose(prev.values());\n                prev.clear();\n                if (!options.fallback) return [];\n                const fb2 = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRoot)((dispose2)=>{\n                    prev.set(FALLBACK, {\n                        dispose: dispose2\n                    });\n                    return options.fallback();\n                });\n                return [\n                    fb2\n                ];\n            }\n            const result = new Array(list.length);\n            const fb = prev.get(FALLBACK);\n            if (!prev.size || fb) {\n                fb?.dispose();\n                prev.delete(FALLBACK);\n                for(let i2 = 0; i2 < list.length; i2++){\n                    const item = list[i2];\n                    const key = keyFn(item, i2);\n                    addNewItem(result, item, i2, key);\n                }\n                return result;\n            }\n            const prevKeys = new Set(prev.keys());\n            for(let i2 = 0; i2 < list.length; i2++){\n                const item = list[i2];\n                const key = keyFn(item, i2);\n                prevKeys.delete(key);\n                const lookup = prev.get(key);\n                if (lookup) {\n                    result[i2] = lookup.mapped;\n                    lookup.setIndex?.(i2);\n                    lookup.setItem(()=>item);\n                } else addNewItem(result, item, i2, key);\n            }\n            for (const key of prevKeys){\n                prev.get(key)?.dispose();\n                prev.delete(key);\n            }\n            return result;\n        });\n    };\n    function addNewItem(list, item, i2, key) {\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRoot)((dispose2)=>{\n            const [getItem, setItem] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(item);\n            const save = {\n                setItem,\n                dispose: dispose2\n            };\n            if (mapFn.length > 1) {\n                const [index, setIndex] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(i2);\n                save.setIndex = setIndex;\n                save.mapped = mapFn(getItem, index);\n            } else save.mapped = mapFn(getItem);\n            prev.set(key, save);\n            list[i2] = save.mapped;\n        });\n    }\n}\nfunction Key(props) {\n    const { by } = props;\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(keyArray(()=>props.each, typeof by === \"function\" ? by : (v)=>v[by], props.children, \"fallback\" in props ? {\n        fallback: ()=>props.fallback\n    } : void 0));\n}\n// ../../node_modules/.pnpm/@solid-primitives+event-listener@2.3.3_solid-js@1.9.5/node_modules/@solid-primitives/event-listener/dist/index.js\nfunction makeEventListener(target, type, handler, options) {\n    target.addEventListener(type, handler, options);\n    return tryOnCleanup(target.removeEventListener.bind(target, type, handler, options));\n}\nfunction createEventListener(targets, type, handler, options) {\n    if (_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.isServer) return;\n    const attachListeners = ()=>{\n        asArray(access(targets)).forEach((el)=>{\n            if (el) asArray(access(type)).forEach((type2)=>makeEventListener(el, type2, handler, options));\n        });\n    };\n    if (typeof targets === \"function\") (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(attachListeners);\n    else (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(attachListeners);\n}\n// ../../node_modules/.pnpm/@solid-primitives+resize-observer@2.0.26_solid-js@1.9.5/node_modules/@solid-primitives/resize-observer/dist/index.js\nfunction makeResizeObserver(callback, options) {\n    if (_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.isServer) {\n        return {\n            observe: noop,\n            unobserve: noop\n        };\n    }\n    const observer = new ResizeObserver(callback);\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(observer.disconnect.bind(observer));\n    return {\n        observe: (ref)=>observer.observe(ref, options),\n        unobserve: observer.unobserve.bind(observer)\n    };\n}\nfunction createResizeObserver(targets, onResize, options) {\n    if (_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.isServer) return;\n    const previousMap = /* @__PURE__ */ new WeakMap(), { observe, unobserve } = makeResizeObserver((entries2)=>{\n        for (const entry of entries2){\n            const { contentRect, target } = entry, width = Math.round(contentRect.width), height = Math.round(contentRect.height), previous = previousMap.get(target);\n            if (!previous || previous.width !== width || previous.height !== height) {\n                onResize(contentRect, target, entry);\n                previousMap.set(target, {\n                    width,\n                    height\n                });\n            }\n        }\n    }, options);\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)((prev)=>{\n        const refs = filterNonNullable(asArray(access(targets)));\n        handleDiffArray(refs, prev, observe, unobserve);\n        return refs;\n    }, []);\n}\n// ../../node_modules/.pnpm/@solid-primitives+props@3.1.11_solid-js@1.9.5/node_modules/@solid-primitives/props/dist/index.js\nvar extractCSSregex = /((?:--)?(?:\\w+-?)+)\\s*:\\s*([^;]*)/g;\nfunction stringStyleToObject(style) {\n    const object = {};\n    let match;\n    while(match = extractCSSregex.exec(style)){\n        object[match[1]] = match[2];\n    }\n    return object;\n}\nfunction combineStyle(a2, b2) {\n    if (typeof a2 === \"string\") {\n        if (typeof b2 === \"string\") return `${a2};${b2}`;\n        a2 = stringStyleToObject(a2);\n    } else if (typeof b2 === \"string\") {\n        b2 = stringStyleToObject(b2);\n    }\n    return {\n        ...a2,\n        ...b2\n    };\n}\n// ../../node_modules/.pnpm/@kobalte+utils@0.9.0_solid-js@1.9.5/node_modules/@kobalte/utils/dist/index.js\nfunction addItemToArray(array, item, index = -1) {\n    if (!(index in array)) {\n        return [\n            ...array,\n            item\n        ];\n    }\n    return [\n        ...array.slice(0, index),\n        item,\n        ...array.slice(index)\n    ];\n}\nfunction removeItemFromArray(array, item) {\n    const updatedArray = [\n        ...array\n    ];\n    const index = updatedArray.indexOf(item);\n    if (index !== -1) {\n        updatedArray.splice(index, 1);\n    }\n    return updatedArray;\n}\nfunction isNumber(value) {\n    return typeof value === \"number\";\n}\nfunction isString(value) {\n    return Object.prototype.toString.call(value) === \"[object String]\";\n}\nfunction isFunction(value) {\n    return typeof value === \"function\";\n}\nfunction createGenerateId(baseId) {\n    return (suffix)=>`${baseId()}-${suffix}`;\n}\nfunction contains(parent, child) {\n    if (!parent) {\n        return false;\n    }\n    return parent === child || parent.contains(child);\n}\nfunction getActiveElement(node, activeDescendant = false) {\n    const { activeElement } = getDocument(node);\n    if (!activeElement?.nodeName) {\n        return null;\n    }\n    if (isFrame(activeElement) && activeElement.contentDocument) {\n        return getActiveElement(activeElement.contentDocument.body, activeDescendant);\n    }\n    if (activeDescendant) {\n        const id = activeElement.getAttribute(\"aria-activedescendant\");\n        if (id) {\n            const element = getDocument(activeElement).getElementById(id);\n            if (element) {\n                return element;\n            }\n        }\n    }\n    return activeElement;\n}\nfunction getWindow(node) {\n    return getDocument(node).defaultView || window;\n}\nfunction getDocument(node) {\n    return node ? node.ownerDocument || node : document;\n}\nfunction isFrame(element) {\n    return element.tagName === \"IFRAME\";\n}\nvar EventKey = /* @__PURE__ */ ((EventKey2)=>{\n    EventKey2[\"Escape\"] = \"Escape\";\n    EventKey2[\"Enter\"] = \"Enter\";\n    EventKey2[\"Tab\"] = \"Tab\";\n    EventKey2[\"Space\"] = \" \";\n    EventKey2[\"ArrowDown\"] = \"ArrowDown\";\n    EventKey2[\"ArrowLeft\"] = \"ArrowLeft\";\n    EventKey2[\"ArrowRight\"] = \"ArrowRight\";\n    EventKey2[\"ArrowUp\"] = \"ArrowUp\";\n    EventKey2[\"End\"] = \"End\";\n    EventKey2[\"Home\"] = \"Home\";\n    EventKey2[\"PageDown\"] = \"PageDown\";\n    EventKey2[\"PageUp\"] = \"PageUp\";\n    return EventKey2;\n})(EventKey || {});\nfunction testPlatform(re) {\n    return  false ? // @ts-ignore\n    0 : false;\n}\nfunction isMac() {\n    return testPlatform(/^Mac/i);\n}\nfunction isIPhone() {\n    return testPlatform(/^iPhone/i);\n}\nfunction isIPad() {\n    return testPlatform(/^iPad/i) || // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.\n    isMac() && navigator.maxTouchPoints > 1;\n}\nfunction isIOS() {\n    return isIPhone() || isIPad();\n}\nfunction isAppleDevice() {\n    return isMac() || isIOS();\n}\nfunction callHandler(event, handler) {\n    if (handler) {\n        if (isFunction(handler)) {\n            handler(event);\n        } else {\n            handler[0](handler[1], event);\n        }\n    }\n    return event?.defaultPrevented;\n}\nfunction composeEventHandlers(handlers) {\n    return (event)=>{\n        for (const handler of handlers){\n            callHandler(event, handler);\n        }\n    };\n}\nfunction isCtrlKey(e2) {\n    if (isMac()) {\n        return e2.metaKey && !e2.ctrlKey;\n    }\n    return e2.ctrlKey && !e2.metaKey;\n}\nfunction focusWithoutScrolling(element) {\n    if (!element) {\n        return;\n    }\n    if (supportsPreventScroll()) {\n        element.focus({\n            preventScroll: true\n        });\n    } else {\n        const scrollableElements = getScrollableElements(element);\n        element.focus();\n        restoreScrollPosition(scrollableElements);\n    }\n}\nvar supportsPreventScrollCached = null;\nfunction supportsPreventScroll() {\n    if (supportsPreventScrollCached == null) {\n        supportsPreventScrollCached = false;\n        try {\n            const focusElem = document.createElement(\"div\");\n            focusElem.focus({\n                get preventScroll () {\n                    supportsPreventScrollCached = true;\n                    return true;\n                }\n            });\n        } catch (e2) {}\n    }\n    return supportsPreventScrollCached;\n}\nfunction getScrollableElements(element) {\n    let parent = element.parentNode;\n    const scrollableElements = [];\n    const rootScrollingElement = document.scrollingElement || document.documentElement;\n    while(parent instanceof HTMLElement && parent !== rootScrollingElement){\n        if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) {\n            scrollableElements.push({\n                element: parent,\n                scrollTop: parent.scrollTop,\n                scrollLeft: parent.scrollLeft\n            });\n        }\n        parent = parent.parentNode;\n    }\n    if (rootScrollingElement instanceof HTMLElement) {\n        scrollableElements.push({\n            element: rootScrollingElement,\n            scrollTop: rootScrollingElement.scrollTop,\n            scrollLeft: rootScrollingElement.scrollLeft\n        });\n    }\n    return scrollableElements;\n}\nfunction restoreScrollPosition(scrollableElements) {\n    for (const { element, scrollTop, scrollLeft } of scrollableElements){\n        element.scrollTop = scrollTop;\n        element.scrollLeft = scrollLeft;\n    }\n}\nvar focusableElements = [\n    \"input:not([type='hidden']):not([disabled])\",\n    \"select:not([disabled])\",\n    \"textarea:not([disabled])\",\n    \"button:not([disabled])\",\n    \"a[href]\",\n    \"area[href]\",\n    \"[tabindex]\",\n    \"iframe\",\n    \"object\",\n    \"embed\",\n    \"audio[controls]\",\n    \"video[controls]\",\n    \"[contenteditable]:not([contenteditable='false'])\"\n];\nvar tabbableElements = [\n    ...focusableElements,\n    '[tabindex]:not([tabindex=\"-1\"]):not([disabled])'\n];\nvar FOCUSABLE_ELEMENT_SELECTOR = focusableElements.join(\":not([hidden]),\") + \",[tabindex]:not([disabled]):not([hidden])\";\nvar TABBABLE_ELEMENT_SELECTOR = tabbableElements.join(':not([hidden]):not([tabindex=\"-1\"]),');\nfunction getAllTabbableIn(container, includeContainer) {\n    const elements = Array.from(container.querySelectorAll(FOCUSABLE_ELEMENT_SELECTOR));\n    const tabbableElements2 = elements.filter(isTabbable);\n    if (includeContainer && isTabbable(container)) {\n        tabbableElements2.unshift(container);\n    }\n    tabbableElements2.forEach((element, i2)=>{\n        if (isFrame(element) && element.contentDocument) {\n            const frameBody = element.contentDocument.body;\n            const allFrameTabbable = getAllTabbableIn(frameBody, false);\n            tabbableElements2.splice(i2, 1, ...allFrameTabbable);\n        }\n    });\n    return tabbableElements2;\n}\nfunction isTabbable(element) {\n    return isFocusable(element) && !hasNegativeTabIndex(element);\n}\nfunction isFocusable(element) {\n    return element.matches(FOCUSABLE_ELEMENT_SELECTOR) && isElementVisible(element);\n}\nfunction hasNegativeTabIndex(element) {\n    const tabIndex = parseInt(element.getAttribute(\"tabindex\") || \"0\", 10);\n    return tabIndex < 0;\n}\nfunction isElementVisible(element, childElement) {\n    return element.nodeName !== \"#comment\" && isStyleVisible(element) && isAttributeVisible(element, childElement) && (!element.parentElement || isElementVisible(element.parentElement, element));\n}\nfunction isStyleVisible(element) {\n    if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) {\n        return false;\n    }\n    const { display, visibility } = element.style;\n    let isVisible = display !== \"none\" && visibility !== \"hidden\" && visibility !== \"collapse\";\n    if (isVisible) {\n        if (!element.ownerDocument.defaultView) {\n            return isVisible;\n        }\n        const { getComputedStyle: getComputedStyle3 } = element.ownerDocument.defaultView;\n        const { display: computedDisplay, visibility: computedVisibility } = getComputedStyle3(element);\n        isVisible = computedDisplay !== \"none\" && computedVisibility !== \"hidden\" && computedVisibility !== \"collapse\";\n    }\n    return isVisible;\n}\nfunction isAttributeVisible(element, childElement) {\n    return !element.hasAttribute(\"hidden\") && (element.nodeName === \"DETAILS\" && childElement && childElement.nodeName !== \"SUMMARY\" ? element.hasAttribute(\"open\") : true);\n}\nfunction getFocusableTreeWalker(root, opts, scope) {\n    const selector = opts?.tabbable ? TABBABLE_ELEMENT_SELECTOR : FOCUSABLE_ELEMENT_SELECTOR;\n    const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {\n        acceptNode (node) {\n            if (opts?.from?.contains(node)) {\n                return NodeFilter.FILTER_REJECT;\n            }\n            if (node.matches(selector) && isElementVisible(node) && true && (!opts?.accept || opts.accept(node))) {\n                return NodeFilter.FILTER_ACCEPT;\n            }\n            return NodeFilter.FILTER_SKIP;\n        }\n    });\n    if (opts?.from) {\n        walker.currentNode = opts.from;\n    }\n    return walker;\n}\nfunction getScrollParent(node) {\n    while(node && !isScrollable(node)){\n        node = node.parentElement;\n    }\n    return node || document.scrollingElement || document.documentElement;\n}\nfunction isScrollable(node) {\n    const style = window.getComputedStyle(node);\n    return /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);\n}\nfunction noop3() {\n    return;\n}\nfunction isPointInPolygon(point, polygon) {\n    const [x, y] = point;\n    let inside = false;\n    const length = polygon.length;\n    for(let l2 = length, i2 = 0, j = l2 - 1; i2 < l2; j = i2++){\n        const [xi, yi] = polygon[i2];\n        const [xj, yj] = polygon[j];\n        const [, vy] = polygon[j === 0 ? l2 - 1 : j - 1] || [\n            0,\n            0\n        ];\n        const where = (yi - yj) * (x - xi) - (xi - xj) * (y - yi);\n        if (yj < yi) {\n            if (y >= yj && y < yi) {\n                if (where === 0) return true;\n                if (where > 0) {\n                    if (y === yj) {\n                        if (y > vy) {\n                            inside = !inside;\n                        }\n                    } else {\n                        inside = !inside;\n                    }\n                }\n            }\n        } else if (yi < yj) {\n            if (y > yi && y <= yj) {\n                if (where === 0) return true;\n                if (where < 0) {\n                    if (y === yj) {\n                        if (y < vy) {\n                            inside = !inside;\n                        }\n                    } else {\n                        inside = !inside;\n                    }\n                }\n            }\n        } else if (y == yi && (x >= xj && x <= xi || x >= xi && x <= xj)) {\n            return true;\n        }\n    }\n    return inside;\n}\nfunction mergeDefaultProps(defaultProps, props) {\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)(defaultProps, props);\n}\nvar transitionsByElement = /* @__PURE__ */ new Map();\nvar transitionCallbacks = /* @__PURE__ */ new Set();\nfunction setupGlobalEvents() {\n    if (true) {\n        return;\n    }\n    const onTransitionStart = (e2)=>{\n        if (!e2.target) {\n            return;\n        }\n        let transitions = transitionsByElement.get(e2.target);\n        if (!transitions) {\n            transitions = /* @__PURE__ */ new Set();\n            transitionsByElement.set(e2.target, transitions);\n            e2.target.addEventListener(\"transitioncancel\", onTransitionEnd);\n        }\n        transitions.add(e2.propertyName);\n    };\n    const onTransitionEnd = (e2)=>{\n        if (!e2.target) {\n            return;\n        }\n        const properties = transitionsByElement.get(e2.target);\n        if (!properties) {\n            return;\n        }\n        properties.delete(e2.propertyName);\n        if (properties.size === 0) {\n            e2.target.removeEventListener(\"transitioncancel\", onTransitionEnd);\n            transitionsByElement.delete(e2.target);\n        }\n        if (transitionsByElement.size === 0) {\n            for (const cb of transitionCallbacks){\n                cb();\n            }\n            transitionCallbacks.clear();\n        }\n    };\n    document.body.addEventListener(\"transitionrun\", onTransitionStart);\n    document.body.addEventListener(\"transitionend\", onTransitionEnd);\n}\nif (typeof document !== \"undefined\") {\n    if (document.readyState !== \"loading\") {\n        setupGlobalEvents();\n    } else {\n        document.addEventListener(\"DOMContentLoaded\", setupGlobalEvents);\n    }\n}\nfunction scrollIntoView(scrollView, element) {\n    const offsetX = relativeOffset(scrollView, element, \"left\");\n    const offsetY = relativeOffset(scrollView, element, \"top\");\n    const width = element.offsetWidth;\n    const height = element.offsetHeight;\n    let x = scrollView.scrollLeft;\n    let y = scrollView.scrollTop;\n    const maxX = x + scrollView.offsetWidth;\n    const maxY = y + scrollView.offsetHeight;\n    if (offsetX <= x) {\n        x = offsetX;\n    } else if (offsetX + width > maxX) {\n        x += offsetX + width - maxX;\n    }\n    if (offsetY <= y) {\n        y = offsetY;\n    } else if (offsetY + height > maxY) {\n        y += offsetY + height - maxY;\n    }\n    scrollView.scrollLeft = x;\n    scrollView.scrollTop = y;\n}\nfunction relativeOffset(ancestor, child, axis) {\n    const prop = axis === \"left\" ? \"offsetLeft\" : \"offsetTop\";\n    let sum = 0;\n    while(child.offsetParent){\n        sum += child[prop];\n        if (child.offsetParent === ancestor) {\n            break;\n        } else if (child.offsetParent.contains(ancestor)) {\n            sum -= ancestor[prop];\n            break;\n        }\n        child = child.offsetParent;\n    }\n    return sum;\n}\nfunction scrollIntoViewport(targetElement, opts) {\n    if (document.contains(targetElement)) {\n        const root = document.scrollingElement || document.documentElement;\n        const isScrollPrevented = window.getComputedStyle(root).overflow === \"hidden\";\n        if (!isScrollPrevented) {\n            const { left: originalLeft, top: originalTop } = targetElement.getBoundingClientRect();\n            targetElement?.scrollIntoView?.({\n                block: \"nearest\"\n            });\n            const { left: newLeft, top: newTop } = targetElement.getBoundingClientRect();\n            if (Math.abs(originalLeft - newLeft) > 1 || Math.abs(originalTop - newTop) > 1) {\n                targetElement.scrollIntoView?.({\n                    block: \"nearest\"\n                });\n            }\n        } else {\n            let scrollParent = getScrollParent(targetElement);\n            while(targetElement && scrollParent && targetElement !== root && scrollParent !== root){\n                scrollIntoView(scrollParent, targetElement);\n                targetElement = scrollParent;\n                scrollParent = getScrollParent(targetElement);\n            }\n        }\n    }\n}\nvar visuallyHiddenStyles = {\n    border: \"0\",\n    clip: \"rect(0 0 0 0)\",\n    \"clip-path\": \"inset(50%)\",\n    height: \"1px\",\n    margin: \"0 -1px -1px 0\",\n    overflow: \"hidden\",\n    padding: \"0\",\n    position: \"absolute\",\n    width: \"1px\",\n    \"white-space\": \"nowrap\"\n};\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/E4R2EMM4.js\nfunction createRegisterId(setter) {\n    return (id)=>{\n        setter(id);\n        return ()=>setter(void 0);\n    };\n}\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/ET5T45DO.js\nfunction createTagName(ref, fallback) {\n    const [tagName, setTagName] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(stringOrUndefined(fallback?.()));\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        setTagName(ref()?.tagName.toLowerCase() || stringOrUndefined(fallback?.()));\n    });\n    return tagName;\n}\nfunction stringOrUndefined(value) {\n    return isString(value) ? value : void 0;\n}\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/6Y7B2NEO.js\nfunction Polymorphic(props) {\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"as\"\n    ]);\n    if (!local.as) {\n        throw new Error(\"[kobalte]: Polymorphic is missing the required `as` prop.\");\n    }\n    return(// @ts-ignore: Props are valid but not worth calculating\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Dynamic, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)(others, {\n        get component () {\n            return local.as;\n        }\n    })));\n}\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/Q2DJLZQE.js\nvar FORM_CONTROL_PROP_NAMES = [\n    \"id\",\n    \"name\",\n    \"validationState\",\n    \"required\",\n    \"disabled\",\n    \"readOnly\"\n];\nfunction createFormControl(props) {\n    const defaultId = `form-control-${(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createUniqueId)()}`;\n    const mergedProps = mergeDefaultProps({\n        id: defaultId\n    }, props);\n    const [labelId, setLabelId] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [fieldId, setFieldId] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [descriptionId, setDescriptionId] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [errorMessageId, setErrorMessageId] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const getAriaLabelledBy = (fieldId2, fieldAriaLabel, fieldAriaLabelledBy)=>{\n        const hasAriaLabelledBy = fieldAriaLabelledBy != null || labelId() != null;\n        return [\n            fieldAriaLabelledBy,\n            labelId(),\n            // If there is both an aria-label and aria-labelledby, add the field itself has an aria-labelledby\n            hasAriaLabelledBy && fieldAriaLabel != null ? fieldId2 : void 0\n        ].filter(Boolean).join(\" \") || void 0;\n    };\n    const getAriaDescribedBy = (fieldAriaDescribedBy)=>{\n        return [\n            descriptionId(),\n            // Use aria-describedby for error message because aria-errormessage is unsupported using VoiceOver or NVDA.\n            // See https://github.com/adobe/react-spectrum/issues/1346#issuecomment-740136268\n            errorMessageId(),\n            fieldAriaDescribedBy\n        ].filter(Boolean).join(\" \") || void 0;\n    };\n    const dataset = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>({\n            \"data-valid\": access(mergedProps.validationState) === \"valid\" ? \"\" : void 0,\n            \"data-invalid\": access(mergedProps.validationState) === \"invalid\" ? \"\" : void 0,\n            \"data-required\": access(mergedProps.required) ? \"\" : void 0,\n            \"data-disabled\": access(mergedProps.disabled) ? \"\" : void 0,\n            \"data-readonly\": access(mergedProps.readOnly) ? \"\" : void 0\n        }));\n    const formControlContext = {\n        name: ()=>access(mergedProps.name) ?? access(mergedProps.id),\n        dataset,\n        validationState: ()=>access(mergedProps.validationState),\n        isRequired: ()=>access(mergedProps.required),\n        isDisabled: ()=>access(mergedProps.disabled),\n        isReadOnly: ()=>access(mergedProps.readOnly),\n        labelId,\n        fieldId,\n        descriptionId,\n        errorMessageId,\n        getAriaLabelledBy,\n        getAriaDescribedBy,\n        generateId: createGenerateId(()=>access(mergedProps.id)),\n        registerLabel: createRegisterId(setLabelId),\n        registerField: createRegisterId(setFieldId),\n        registerDescription: createRegisterId(setDescriptionId),\n        registerErrorMessage: createRegisterId(setErrorMessageId)\n    };\n    return {\n        formControlContext\n    };\n}\nvar FormControlContext = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction useFormControlContext() {\n    const context = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(FormControlContext);\n    if (context === void 0) {\n        throw new Error(\"[kobalte]: `useFormControlContext` must be used within a `FormControlContext.Provider` component\");\n    }\n    return context;\n}\nfunction FormControlDescription(props) {\n    const context = useFormControlContext();\n    const mergedProps = mergeDefaultProps({\n        id: context.generateId(\"description\")\n    }, props);\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(context.registerDescription(mergedProps.id)));\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"div\"\n    }, ()=>context.dataset(), mergedProps));\n}\nfunction FormControlErrorMessage(props) {\n    const context = useFormControlContext();\n    const mergedProps = mergeDefaultProps({\n        id: context.generateId(\"error-message\")\n    }, props);\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(mergedProps, [\n        \"forceMount\"\n    ]);\n    const isInvalid = ()=>context.validationState() === \"invalid\";\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (!isInvalid()) {\n            return;\n        }\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(context.registerErrorMessage(others.id));\n    });\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n        get when () {\n            return local.forceMount || isInvalid();\n        },\n        get children () {\n            return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n                as: \"div\"\n            }, ()=>context.dataset(), others));\n        }\n    });\n}\nfunction FormControlLabel(props) {\n    let ref;\n    const context = useFormControlContext();\n    const mergedProps = mergeDefaultProps({\n        id: context.generateId(\"label\")\n    }, props);\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(mergedProps, [\n        \"ref\"\n    ]);\n    const tagName = createTagName(()=>ref, ()=>\"label\");\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(context.registerLabel(others.id)));\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"label\",\n        ref (r$) {\n            const _ref$ = mergeRefs((el)=>ref = el, local.ref);\n            typeof _ref$ === \"function\" && _ref$(r$);\n        },\n        get [\"for\"] () {\n            return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>tagName() === \"label\")() ? context.fieldId() : void 0;\n        }\n    }, ()=>context.dataset(), others));\n}\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/ANN3A2QM.js\nfunction createFormResetListener(element, handler) {\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)((0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.on)(element, (element2)=>{\n        if (element2 == null) {\n            return;\n        }\n        const form = getClosestForm(element2);\n        if (form == null) {\n            return;\n        }\n        form.addEventListener(\"reset\", handler, {\n            passive: true\n        });\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            form.removeEventListener(\"reset\", handler);\n        });\n    }));\n}\nfunction getClosestForm(element) {\n    return isFormElement(element) ? element.form : element.closest(\"form\");\n}\nfunction isFormElement(element) {\n    return element.matches(\"textarea, input, select, button\");\n}\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/BLN63FDC.js\nfunction createControllableSignal(props) {\n    const [_value, _setValue] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(props.defaultValue?.());\n    const isControlled = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>props.value?.() !== void 0);\n    const value = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>isControlled() ? props.value?.() : _value());\n    const setValue = (next)=>{\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.untrack)(()=>{\n            const nextValue = accessWith(next, value());\n            if (!Object.is(nextValue, value())) {\n                if (!isControlled()) {\n                    _setValue(nextValue);\n                }\n                props.onChange?.(nextValue);\n            }\n            return nextValue;\n        });\n    };\n    return [\n        value,\n        setValue\n    ];\n}\nfunction createControllableBooleanSignal(props) {\n    const [_value, setValue] = createControllableSignal(props);\n    const value = ()=>_value() ?? false;\n    return [\n        value,\n        setValue\n    ];\n}\nfunction createControllableArraySignal(props) {\n    const [_value, setValue] = createControllableSignal(props);\n    const value = ()=>_value() ?? [];\n    return [\n        value,\n        setValue\n    ];\n}\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/YGDQXQ2B.js\nfunction createToggleState(props = {}) {\n    const [isSelected, _setIsSelected] = createControllableBooleanSignal({\n        value: ()=>access(props.isSelected),\n        defaultValue: ()=>!!access(props.defaultIsSelected),\n        onChange: (value)=>props.onSelectedChange?.(value)\n    });\n    const setIsSelected = (value)=>{\n        if (!access(props.isReadOnly) && !access(props.isDisabled)) {\n            _setIsSelected(value);\n        }\n    };\n    const toggle = ()=>{\n        if (!access(props.isReadOnly) && !access(props.isDisabled)) {\n            _setIsSelected(!isSelected());\n        }\n    };\n    return {\n        isSelected,\n        setIsSelected,\n        toggle\n    };\n}\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/5ZKAE4VZ.js\nvar __defProp = Object.defineProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/7CVNMTYF.js\nvar DomCollectionContext = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction useOptionalDomCollectionContext() {\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(DomCollectionContext);\n}\nfunction useDomCollectionContext() {\n    const context = useOptionalDomCollectionContext();\n    if (context === void 0) {\n        throw new Error(\"[kobalte]: `useDomCollectionContext` must be used within a `DomCollectionProvider` component\");\n    }\n    return context;\n}\nfunction isElementPreceding(a2, b2) {\n    return Boolean(b2.compareDocumentPosition(a2) & Node.DOCUMENT_POSITION_PRECEDING);\n}\nfunction findDOMIndex(items, item) {\n    const itemEl = item.ref();\n    if (!itemEl) {\n        return -1;\n    }\n    let length = items.length;\n    if (!length) {\n        return -1;\n    }\n    while(length--){\n        const currentItemEl = items[length]?.ref();\n        if (!currentItemEl) {\n            continue;\n        }\n        if (isElementPreceding(currentItemEl, itemEl)) {\n            return length + 1;\n        }\n    }\n    return 0;\n}\nfunction sortBasedOnDOMPosition(items) {\n    const pairs = items.map((item, index)=>[\n            index,\n            item\n        ]);\n    let isOrderDifferent = false;\n    pairs.sort(([indexA, a2], [indexB, b2])=>{\n        const elementA = a2.ref();\n        const elementB = b2.ref();\n        if (elementA === elementB) {\n            return 0;\n        }\n        if (!elementA || !elementB) {\n            return 0;\n        }\n        if (isElementPreceding(elementA, elementB)) {\n            if (indexA > indexB) {\n                isOrderDifferent = true;\n            }\n            return -1;\n        }\n        if (indexA < indexB) {\n            isOrderDifferent = true;\n        }\n        return 1;\n    });\n    if (isOrderDifferent) {\n        return pairs.map(([_, item])=>item);\n    }\n    return items;\n}\nfunction setItemsBasedOnDOMPosition(items, setItems) {\n    const sortedItems = sortBasedOnDOMPosition(items);\n    if (items !== sortedItems) {\n        setItems(sortedItems);\n    }\n}\nfunction getCommonParent(items) {\n    const firstItem = items[0];\n    const lastItemEl = items[items.length - 1]?.ref();\n    let parentEl = firstItem?.ref()?.parentElement;\n    while(parentEl){\n        if (lastItemEl && parentEl.contains(lastItemEl)) {\n            return parentEl;\n        }\n        parentEl = parentEl.parentElement;\n    }\n    return getDocument(parentEl).body;\n}\nfunction createTimeoutObserver(items, setItems) {\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        const timeout = setTimeout(()=>{\n            setItemsBasedOnDOMPosition(items(), setItems);\n        });\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>clearTimeout(timeout));\n    });\n}\nfunction createSortBasedOnDOMPosition(items, setItems) {\n    if (typeof IntersectionObserver !== \"function\") {\n        createTimeoutObserver(items, setItems);\n        return;\n    }\n    let previousItems = [];\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        const callback = ()=>{\n            const hasPreviousItems = !!previousItems.length;\n            previousItems = items();\n            if (!hasPreviousItems) {\n                return;\n            }\n            setItemsBasedOnDOMPosition(items(), setItems);\n        };\n        const root = getCommonParent(items());\n        const observer = new IntersectionObserver(callback, {\n            root\n        });\n        for (const item of items()){\n            const itemEl = item.ref();\n            if (itemEl) {\n                observer.observe(itemEl);\n            }\n        }\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>observer.disconnect());\n    });\n}\nfunction createDomCollection(props = {}) {\n    const [items, setItems] = createControllableArraySignal({\n        value: ()=>access(props.items),\n        onChange: (value)=>props.onItemsChange?.(value)\n    });\n    createSortBasedOnDOMPosition(items, setItems);\n    const registerItem = (item)=>{\n        setItems((prevItems)=>{\n            const index = findDOMIndex(prevItems, item);\n            return addItemToArray(prevItems, item, index);\n        });\n        return ()=>{\n            setItems((prevItems)=>{\n                const nextItems = prevItems.filter((prevItem)=>prevItem.ref() !== item.ref());\n                if (prevItems.length === nextItems.length) {\n                    return prevItems;\n                }\n                return nextItems;\n            });\n        };\n    };\n    const DomCollectionProvider = (props2)=>{\n        return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(DomCollectionContext.Provider, {\n            value: {\n                registerItem\n            },\n            get children () {\n                return props2.children;\n            }\n        });\n    };\n    return {\n        DomCollectionProvider\n    };\n}\nfunction createDomCollectionItem(props) {\n    const context = useDomCollectionContext();\n    const mergedProps = mergeDefaultProps({\n        shouldRegisterItem: true\n    }, props);\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (!mergedProps.shouldRegisterItem) {\n            return;\n        }\n        const unregister = context.registerItem(mergedProps.getItem());\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(unregister);\n    });\n}\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/JMA2RWU6.js\nfunction buildNodes(params) {\n    let index = params.startIndex ?? 0;\n    const level = params.startLevel ?? 0;\n    const nodes = [];\n    const getKey = (data)=>{\n        if (data == null) {\n            return \"\";\n        }\n        const _getKey = params.getKey ?? \"key\";\n        const dataKey = isString(_getKey) ? data[_getKey] : _getKey(data);\n        return dataKey != null ? String(dataKey) : \"\";\n    };\n    const getTextValue = (data)=>{\n        if (data == null) {\n            return \"\";\n        }\n        const _getTextValue = params.getTextValue ?? \"textValue\";\n        const dataTextValue = isString(_getTextValue) ? data[_getTextValue] : _getTextValue(data);\n        return dataTextValue != null ? String(dataTextValue) : \"\";\n    };\n    const getDisabled = (data)=>{\n        if (data == null) {\n            return false;\n        }\n        const _getDisabled = params.getDisabled ?? \"disabled\";\n        return (isString(_getDisabled) ? data[_getDisabled] : _getDisabled(data)) ?? false;\n    };\n    const getSectionChildren = (data)=>{\n        if (data == null) {\n            return void 0;\n        }\n        if (isString(params.getSectionChildren)) {\n            return data[params.getSectionChildren];\n        }\n        return params.getSectionChildren?.(data);\n    };\n    for (const data of params.dataSource){\n        if (isString(data) || isNumber(data)) {\n            nodes.push({\n                type: \"item\",\n                rawValue: data,\n                key: String(data),\n                textValue: String(data),\n                disabled: getDisabled(data),\n                level,\n                index\n            });\n            index++;\n            continue;\n        }\n        if (getSectionChildren(data) != null) {\n            nodes.push({\n                type: \"section\",\n                rawValue: data,\n                key: \"\",\n                // not applicable here\n                textValue: \"\",\n                // not applicable here\n                disabled: false,\n                // not applicable here\n                level,\n                index\n            });\n            index++;\n            const sectionChildren = getSectionChildren(data) ?? [];\n            if (sectionChildren.length > 0) {\n                const childNodes = buildNodes({\n                    dataSource: sectionChildren,\n                    getKey: params.getKey,\n                    getTextValue: params.getTextValue,\n                    getDisabled: params.getDisabled,\n                    getSectionChildren: params.getSectionChildren,\n                    startIndex: index,\n                    startLevel: level + 1\n                });\n                nodes.push(...childNodes);\n                index += childNodes.length;\n            }\n        } else {\n            nodes.push({\n                type: \"item\",\n                rawValue: data,\n                key: getKey(data),\n                textValue: getTextValue(data),\n                disabled: getDisabled(data),\n                level,\n                index\n            });\n            index++;\n        }\n    }\n    return nodes;\n}\nfunction createCollection(props, deps = []) {\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        const nodes = buildNodes({\n            dataSource: access(props.dataSource),\n            getKey: access(props.getKey),\n            getTextValue: access(props.getTextValue),\n            getDisabled: access(props.getDisabled),\n            getSectionChildren: access(props.getSectionChildren)\n        });\n        for(let i2 = 0; i2 < deps.length; i2++)deps[i2]();\n        return props.factory(nodes);\n    });\n}\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/XHJPQEZP.js\nvar RTL_SCRIPTS = /* @__PURE__ */ new Set([\n    \"Avst\",\n    \"Arab\",\n    \"Armi\",\n    \"Syrc\",\n    \"Samr\",\n    \"Mand\",\n    \"Thaa\",\n    \"Mend\",\n    \"Nkoo\",\n    \"Adlm\",\n    \"Rohg\",\n    \"Hebr\"\n]);\nvar RTL_LANGS = /* @__PURE__ */ new Set([\n    \"ae\",\n    \"ar\",\n    \"arc\",\n    \"bcc\",\n    \"bqi\",\n    \"ckb\",\n    \"dv\",\n    \"fa\",\n    \"glk\",\n    \"he\",\n    \"ku\",\n    \"mzn\",\n    \"nqo\",\n    \"pnb\",\n    \"ps\",\n    \"sd\",\n    \"ug\",\n    \"ur\",\n    \"yi\"\n]);\nfunction isRTL(locale) {\n    if (Intl.Locale) {\n        const script = new Intl.Locale(locale).maximize().script ?? \"\";\n        return RTL_SCRIPTS.has(script);\n    }\n    const lang = locale.split(\"-\")[0];\n    return RTL_LANGS.has(lang);\n}\nfunction getReadingDirection(locale) {\n    return isRTL(locale) ? \"rtl\" : \"ltr\";\n}\nfunction getDefaultLocale() {\n    let locale = typeof navigator !== \"undefined\" && // @ts-ignore\n    (navigator.language || navigator.userLanguage) || \"en-US\";\n    return {\n        locale,\n        direction: getReadingDirection(locale)\n    };\n}\nvar currentLocale = getDefaultLocale();\nvar listeners = /* @__PURE__ */ new Set();\nfunction updateLocale() {\n    currentLocale = getDefaultLocale();\n    for (const listener of listeners){\n        listener(currentLocale);\n    }\n}\nfunction createDefaultLocale() {\n    const defaultSSRLocale = {\n        locale: \"en-US\",\n        direction: \"ltr\"\n    };\n    const [defaultClientLocale, setDefaultClientLocale] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(currentLocale);\n    const defaultLocale = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.isServer ? defaultSSRLocale : defaultClientLocale());\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onMount)(()=>{\n        if (listeners.size === 0) {\n            window.addEventListener(\"languagechange\", updateLocale);\n        }\n        listeners.add(setDefaultClientLocale);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            listeners.delete(setDefaultClientLocale);\n            if (listeners.size === 0) {\n                window.removeEventListener(\"languagechange\", updateLocale);\n            }\n        });\n    });\n    return {\n        locale: ()=>defaultLocale().locale,\n        direction: ()=>defaultLocale().direction\n    };\n}\nvar I18nContext = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction useLocale() {\n    const defaultLocale = createDefaultLocale();\n    const context = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(I18nContext);\n    return context || defaultLocale;\n}\nvar cache = /* @__PURE__ */ new Map();\nfunction createCollator(options) {\n    const { locale } = useLocale();\n    const cacheKey = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return locale() + (options ? Object.entries(options).sort((a2, b2)=>a2[0] < b2[0] ? -1 : 1).join() : \"\");\n    });\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        const key = cacheKey();\n        let collator;\n        if (cache.has(key)) {\n            collator = cache.get(key);\n        }\n        if (!collator) {\n            collator = new Intl.Collator(locale(), options);\n            cache.set(key, collator);\n        }\n        return collator;\n    });\n}\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/H6DSIDEC.js\nvar Selection = class _Selection extends Set {\n    constructor(keys2, anchorKey, currentKey){\n        super(keys2);\n        if (keys2 instanceof _Selection) {\n            this.anchorKey = anchorKey || keys2.anchorKey;\n            this.currentKey = currentKey || keys2.currentKey;\n        } else {\n            this.anchorKey = anchorKey;\n            this.currentKey = currentKey;\n        }\n    }\n};\nfunction createControllableSelectionSignal(props) {\n    const [_value, setValue] = createControllableSignal(props);\n    const value = ()=>_value() ?? new Selection();\n    return [\n        value,\n        setValue\n    ];\n}\nfunction isNonContiguousSelectionModifier(e2) {\n    return isAppleDevice() ? e2.altKey : e2.ctrlKey;\n}\nfunction isCtrlKeyPressed(e2) {\n    if (isMac()) {\n        return e2.metaKey;\n    }\n    return e2.ctrlKey;\n}\nfunction convertSelection(selection) {\n    return new Selection(selection);\n}\nfunction isSameSelection(setA, setB) {\n    if (setA.size !== setB.size) {\n        return false;\n    }\n    for (const item of setA){\n        if (!setB.has(item)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction createMultipleSelectionState(props) {\n    const mergedProps = mergeDefaultProps({\n        selectionMode: \"none\",\n        selectionBehavior: \"toggle\"\n    }, props);\n    const [isFocused, setFocused] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(false);\n    const [focusedKey, setFocusedKey] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const selectedKeysProp = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        const selection = access(mergedProps.selectedKeys);\n        if (selection != null) {\n            return convertSelection(selection);\n        }\n        return selection;\n    });\n    const defaultSelectedKeys = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        const defaultSelection = access(mergedProps.defaultSelectedKeys);\n        if (defaultSelection != null) {\n            return convertSelection(defaultSelection);\n        }\n        return new Selection();\n    });\n    const [selectedKeys, _setSelectedKeys] = createControllableSelectionSignal({\n        value: selectedKeysProp,\n        defaultValue: defaultSelectedKeys,\n        onChange: (value)=>mergedProps.onSelectionChange?.(value)\n    });\n    const [selectionBehavior, setSelectionBehavior] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(access(mergedProps.selectionBehavior));\n    const selectionMode = ()=>access(mergedProps.selectionMode);\n    const disallowEmptySelection = ()=>access(mergedProps.disallowEmptySelection) ?? false;\n    const setSelectedKeys = (keys2)=>{\n        if (access(mergedProps.allowDuplicateSelectionEvents) || !isSameSelection(keys2, selectedKeys())) {\n            _setSelectedKeys(keys2);\n        }\n    };\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        const selection = selectedKeys();\n        if (access(mergedProps.selectionBehavior) === \"replace\" && selectionBehavior() === \"toggle\" && typeof selection === \"object\" && selection.size === 0) {\n            setSelectionBehavior(\"replace\");\n        }\n    });\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        setSelectionBehavior(access(mergedProps.selectionBehavior) ?? \"toggle\");\n    });\n    return {\n        selectionMode,\n        disallowEmptySelection,\n        selectionBehavior,\n        setSelectionBehavior,\n        isFocused,\n        setFocused,\n        focusedKey,\n        setFocusedKey,\n        selectedKeys,\n        setSelectedKeys\n    };\n}\nfunction createTypeSelect(props) {\n    const [search, setSearch] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(\"\");\n    const [timeoutId, setTimeoutId] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(-1);\n    const onKeyDown = (e2)=>{\n        if (access(props.isDisabled)) {\n            return;\n        }\n        const delegate = access(props.keyboardDelegate);\n        const manager = access(props.selectionManager);\n        if (!delegate.getKeyForSearch) {\n            return;\n        }\n        const character = getStringForKey(e2.key);\n        if (!character || e2.ctrlKey || e2.metaKey) {\n            return;\n        }\n        if (character === \" \" && search().trim().length > 0) {\n            e2.preventDefault();\n            e2.stopPropagation();\n        }\n        let newSearch = setSearch((prev)=>prev + character);\n        let key = delegate.getKeyForSearch(newSearch, manager.focusedKey()) ?? delegate.getKeyForSearch(newSearch);\n        if (key == null && isAllSameLetter(newSearch)) {\n            newSearch = newSearch[0];\n            key = delegate.getKeyForSearch(newSearch, manager.focusedKey()) ?? delegate.getKeyForSearch(newSearch);\n        }\n        if (key != null) {\n            manager.setFocusedKey(key);\n            props.onTypeSelect?.(key);\n        }\n        clearTimeout(timeoutId());\n        setTimeoutId(window.setTimeout(()=>setSearch(\"\"), 500));\n    };\n    return {\n        typeSelectHandlers: {\n            onKeyDown\n        }\n    };\n}\nfunction getStringForKey(key) {\n    if (key.length === 1 || !/^[A-Z]/i.test(key)) {\n        return key;\n    }\n    return \"\";\n}\nfunction isAllSameLetter(search) {\n    return search.split(\"\").every((letter)=>letter === search[0]);\n}\nfunction createSelectableCollection(props, ref, scrollRef) {\n    const defaultProps = {\n        selectOnFocus: ()=>access(props.selectionManager).selectionBehavior() === \"replace\"\n    };\n    const mergedProps = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)(defaultProps, props);\n    const finalScrollRef = ()=>ref();\n    const { direction } = useLocale();\n    let scrollPos = {\n        top: 0,\n        left: 0\n    };\n    createEventListener(()=>!access(mergedProps.isVirtualized) ? finalScrollRef() : void 0, \"scroll\", ()=>{\n        const scrollEl = finalScrollRef();\n        if (!scrollEl) {\n            return;\n        }\n        scrollPos = {\n            top: scrollEl.scrollTop,\n            left: scrollEl.scrollLeft\n        };\n    });\n    const { typeSelectHandlers } = createTypeSelect({\n        isDisabled: ()=>access(mergedProps.disallowTypeAhead),\n        keyboardDelegate: ()=>access(mergedProps.keyboardDelegate),\n        selectionManager: ()=>access(mergedProps.selectionManager)\n    });\n    const orientation = ()=>access(mergedProps.orientation) ?? \"vertical\";\n    const onKeyDown = (e2)=>{\n        callHandler(e2, typeSelectHandlers.onKeyDown);\n        if (e2.altKey && e2.key === \"Tab\") {\n            e2.preventDefault();\n        }\n        const refEl = ref();\n        if (!refEl?.contains(e2.target)) {\n            return;\n        }\n        const manager = access(mergedProps.selectionManager);\n        const selectOnFocus = access(mergedProps.selectOnFocus);\n        const navigateToKey = (key)=>{\n            if (key != null) {\n                manager.setFocusedKey(key);\n                if (e2.shiftKey && manager.selectionMode() === \"multiple\") {\n                    manager.extendSelection(key);\n                } else if (selectOnFocus && !isNonContiguousSelectionModifier(e2)) {\n                    manager.replaceSelection(key);\n                }\n            }\n        };\n        const delegate = access(mergedProps.keyboardDelegate);\n        const shouldFocusWrap = access(mergedProps.shouldFocusWrap);\n        const focusedKey = manager.focusedKey();\n        switch(e2.key){\n            case orientation() === \"vertical\" ? \"ArrowDown\" : \"ArrowRight\":\n                {\n                    if (delegate.getKeyBelow) {\n                        e2.preventDefault();\n                        let nextKey;\n                        if (focusedKey != null) {\n                            nextKey = delegate.getKeyBelow(focusedKey);\n                        } else {\n                            nextKey = delegate.getFirstKey?.();\n                        }\n                        if (nextKey == null && shouldFocusWrap) {\n                            nextKey = delegate.getFirstKey?.(focusedKey);\n                        }\n                        navigateToKey(nextKey);\n                    }\n                    break;\n                }\n            case orientation() === \"vertical\" ? \"ArrowUp\" : \"ArrowLeft\":\n                {\n                    if (delegate.getKeyAbove) {\n                        e2.preventDefault();\n                        let nextKey;\n                        if (focusedKey != null) {\n                            nextKey = delegate.getKeyAbove(focusedKey);\n                        } else {\n                            nextKey = delegate.getLastKey?.();\n                        }\n                        if (nextKey == null && shouldFocusWrap) {\n                            nextKey = delegate.getLastKey?.(focusedKey);\n                        }\n                        navigateToKey(nextKey);\n                    }\n                    break;\n                }\n            case orientation() === \"vertical\" ? \"ArrowLeft\" : \"ArrowUp\":\n                {\n                    if (delegate.getKeyLeftOf) {\n                        e2.preventDefault();\n                        const isRTL3 = direction() === \"rtl\";\n                        let nextKey;\n                        if (focusedKey != null) {\n                            nextKey = delegate.getKeyLeftOf(focusedKey);\n                        } else {\n                            nextKey = isRTL3 ? delegate.getFirstKey?.() : delegate.getLastKey?.();\n                        }\n                        navigateToKey(nextKey);\n                    }\n                    break;\n                }\n            case orientation() === \"vertical\" ? \"ArrowRight\" : \"ArrowDown\":\n                {\n                    if (delegate.getKeyRightOf) {\n                        e2.preventDefault();\n                        const isRTL3 = direction() === \"rtl\";\n                        let nextKey;\n                        if (focusedKey != null) {\n                            nextKey = delegate.getKeyRightOf(focusedKey);\n                        } else {\n                            nextKey = isRTL3 ? delegate.getLastKey?.() : delegate.getFirstKey?.();\n                        }\n                        navigateToKey(nextKey);\n                    }\n                    break;\n                }\n            case \"Home\":\n                if (delegate.getFirstKey) {\n                    e2.preventDefault();\n                    const firstKey = delegate.getFirstKey(focusedKey, isCtrlKeyPressed(e2));\n                    if (firstKey != null) {\n                        manager.setFocusedKey(firstKey);\n                        if (isCtrlKeyPressed(e2) && e2.shiftKey && manager.selectionMode() === \"multiple\") {\n                            manager.extendSelection(firstKey);\n                        } else if (selectOnFocus) {\n                            manager.replaceSelection(firstKey);\n                        }\n                    }\n                }\n                break;\n            case \"End\":\n                if (delegate.getLastKey) {\n                    e2.preventDefault();\n                    const lastKey = delegate.getLastKey(focusedKey, isCtrlKeyPressed(e2));\n                    if (lastKey != null) {\n                        manager.setFocusedKey(lastKey);\n                        if (isCtrlKeyPressed(e2) && e2.shiftKey && manager.selectionMode() === \"multiple\") {\n                            manager.extendSelection(lastKey);\n                        } else if (selectOnFocus) {\n                            manager.replaceSelection(lastKey);\n                        }\n                    }\n                }\n                break;\n            case \"PageDown\":\n                if (delegate.getKeyPageBelow && focusedKey != null) {\n                    e2.preventDefault();\n                    const nextKey = delegate.getKeyPageBelow(focusedKey);\n                    navigateToKey(nextKey);\n                }\n                break;\n            case \"PageUp\":\n                if (delegate.getKeyPageAbove && focusedKey != null) {\n                    e2.preventDefault();\n                    const nextKey = delegate.getKeyPageAbove(focusedKey);\n                    navigateToKey(nextKey);\n                }\n                break;\n            case \"a\":\n                if (isCtrlKeyPressed(e2) && manager.selectionMode() === \"multiple\" && access(mergedProps.disallowSelectAll) !== true) {\n                    e2.preventDefault();\n                    manager.selectAll();\n                }\n                break;\n            case \"Escape\":\n                if (!e2.defaultPrevented) {\n                    e2.preventDefault();\n                    if (!access(mergedProps.disallowEmptySelection)) {\n                        manager.clearSelection();\n                    }\n                }\n                break;\n            case \"Tab\":\n                {\n                    if (!access(mergedProps.allowsTabNavigation)) {\n                        if (e2.shiftKey) {\n                            refEl.focus();\n                        } else {\n                            const walker = getFocusableTreeWalker(refEl, {\n                                tabbable: true\n                            });\n                            let next;\n                            let last;\n                            do {\n                                last = walker.lastChild();\n                                if (last) {\n                                    next = last;\n                                }\n                            }while (last);\n                            if (next && !next.contains(document.activeElement)) {\n                                focusWithoutScrolling(next);\n                            }\n                        }\n                        break;\n                    }\n                }\n        }\n    };\n    const onFocusIn = (e2)=>{\n        const manager = access(mergedProps.selectionManager);\n        const delegate = access(mergedProps.keyboardDelegate);\n        const selectOnFocus = access(mergedProps.selectOnFocus);\n        if (manager.isFocused()) {\n            if (!e2.currentTarget.contains(e2.target)) {\n                manager.setFocused(false);\n            }\n            return;\n        }\n        if (!e2.currentTarget.contains(e2.target)) {\n            return;\n        }\n        manager.setFocused(true);\n        if (manager.focusedKey() == null) {\n            const navigateToFirstKey = (key)=>{\n                if (key == null) {\n                    return;\n                }\n                manager.setFocusedKey(key);\n                if (selectOnFocus) {\n                    manager.replaceSelection(key);\n                }\n            };\n            const relatedTarget = e2.relatedTarget;\n            if (relatedTarget && e2.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING) {\n                navigateToFirstKey(manager.lastSelectedKey() ?? delegate.getLastKey?.());\n            } else {\n                navigateToFirstKey(manager.firstSelectedKey() ?? delegate.getFirstKey?.());\n            }\n        } else if (!access(mergedProps.isVirtualized)) {\n            const scrollEl = finalScrollRef();\n            if (scrollEl) {\n                scrollEl.scrollTop = scrollPos.top;\n                scrollEl.scrollLeft = scrollPos.left;\n                const element = scrollEl.querySelector(`[data-key=\"${manager.focusedKey()}\"]`);\n                if (element) {\n                    focusWithoutScrolling(element);\n                    scrollIntoView(scrollEl, element);\n                }\n            }\n        }\n    };\n    const onFocusOut = (e2)=>{\n        const manager = access(mergedProps.selectionManager);\n        if (!e2.currentTarget.contains(e2.relatedTarget)) {\n            manager.setFocused(false);\n        }\n    };\n    const onMouseDown = (e2)=>{\n        if (finalScrollRef() === e2.target) {\n            e2.preventDefault();\n        }\n    };\n    const tryAutoFocus = ()=>{\n        const autoFocus = access(mergedProps.autoFocus);\n        if (!autoFocus) {\n            return;\n        }\n        const manager = access(mergedProps.selectionManager);\n        const delegate = access(mergedProps.keyboardDelegate);\n        let focusedKey;\n        if (autoFocus === \"first\") {\n            focusedKey = delegate.getFirstKey?.();\n        }\n        if (autoFocus === \"last\") {\n            focusedKey = delegate.getLastKey?.();\n        }\n        const selectedKeys = manager.selectedKeys();\n        if (selectedKeys.size) {\n            focusedKey = selectedKeys.values().next().value;\n        }\n        manager.setFocused(true);\n        manager.setFocusedKey(focusedKey);\n        const refEl = ref();\n        if (refEl && focusedKey == null && !access(mergedProps.shouldUseVirtualFocus)) {\n            focusWithoutScrolling(refEl);\n        }\n    };\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onMount)(()=>{\n        if (mergedProps.deferAutoFocus) {\n            setTimeout(tryAutoFocus, 0);\n        } else {\n            tryAutoFocus();\n        }\n    });\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)((0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.on)([\n        finalScrollRef,\n        ()=>access(mergedProps.isVirtualized),\n        ()=>access(mergedProps.selectionManager).focusedKey()\n    ], (newValue)=>{\n        const [scrollEl, isVirtualized, focusedKey] = newValue;\n        if (isVirtualized) {\n            focusedKey && mergedProps.scrollToKey?.(focusedKey);\n        } else {\n            if (focusedKey && scrollEl) {\n                const element = scrollEl.querySelector(`[data-key=\"${focusedKey}\"]`);\n                if (element) {\n                    scrollIntoView(scrollEl, element);\n                }\n            }\n        }\n    }));\n    const tabIndex = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        if (access(mergedProps.shouldUseVirtualFocus)) {\n            return void 0;\n        }\n        return access(mergedProps.selectionManager).focusedKey() == null ? 0 : -1;\n    });\n    return {\n        tabIndex,\n        onKeyDown,\n        onMouseDown,\n        onFocusIn,\n        onFocusOut\n    };\n}\nfunction createSelectableItem(props, ref) {\n    const manager = ()=>access(props.selectionManager);\n    const key = ()=>access(props.key);\n    const shouldUseVirtualFocus = ()=>access(props.shouldUseVirtualFocus);\n    const onSelect = (e2)=>{\n        if (manager().selectionMode() === \"none\") {\n            return;\n        }\n        if (manager().selectionMode() === \"single\") {\n            if (manager().isSelected(key()) && !manager().disallowEmptySelection()) {\n                manager().toggleSelection(key());\n            } else {\n                manager().replaceSelection(key());\n            }\n        } else if (e2?.shiftKey) {\n            manager().extendSelection(key());\n        } else if (manager().selectionBehavior() === \"toggle\" || isCtrlKeyPressed(e2) || \"pointerType\" in e2 && e2.pointerType === \"touch\") {\n            manager().toggleSelection(key());\n        } else {\n            manager().replaceSelection(key());\n        }\n    };\n    const isSelected = ()=>manager().isSelected(key());\n    const isDisabled = ()=>access(props.disabled) || manager().isDisabled(key());\n    const allowsSelection = ()=>!isDisabled() && manager().canSelectItem(key());\n    let pointerDownType = null;\n    const onPointerDown = (e2)=>{\n        if (!allowsSelection()) {\n            return;\n        }\n        pointerDownType = e2.pointerType;\n        if (e2.pointerType === \"mouse\" && e2.button === 0 && !access(props.shouldSelectOnPressUp)) {\n            onSelect(e2);\n        }\n    };\n    const onPointerUp = (e2)=>{\n        if (!allowsSelection()) {\n            return;\n        }\n        if (e2.pointerType === \"mouse\" && e2.button === 0 && access(props.shouldSelectOnPressUp) && access(props.allowsDifferentPressOrigin)) {\n            onSelect(e2);\n        }\n    };\n    const onClick = (e2)=>{\n        if (!allowsSelection()) {\n            return;\n        }\n        if (access(props.shouldSelectOnPressUp) && !access(props.allowsDifferentPressOrigin) || pointerDownType !== \"mouse\") {\n            onSelect(e2);\n        }\n    };\n    const onKeyDown = (e2)=>{\n        if (!allowsSelection() || ![\n            \"Enter\",\n            \" \"\n        ].includes(e2.key)) {\n            return;\n        }\n        if (isNonContiguousSelectionModifier(e2)) {\n            manager().toggleSelection(key());\n        } else {\n            onSelect(e2);\n        }\n    };\n    const onMouseDown = (e2)=>{\n        if (isDisabled()) {\n            e2.preventDefault();\n        }\n    };\n    const onFocus = (e2)=>{\n        const refEl = ref();\n        if (shouldUseVirtualFocus() || isDisabled() || !refEl) {\n            return;\n        }\n        if (e2.target === refEl) {\n            manager().setFocusedKey(key());\n        }\n    };\n    const tabIndex = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        if (shouldUseVirtualFocus() || isDisabled()) {\n            return void 0;\n        }\n        return key() === manager().focusedKey() ? 0 : -1;\n    });\n    const dataKey = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return access(props.virtualized) ? void 0 : key();\n    });\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)((0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.on)([\n        ref,\n        key,\n        shouldUseVirtualFocus,\n        ()=>manager().focusedKey(),\n        ()=>manager().isFocused()\n    ], ([refEl, key2, shouldUseVirtualFocus2, focusedKey, isFocused])=>{\n        if (refEl && key2 === focusedKey && isFocused && !shouldUseVirtualFocus2 && document.activeElement !== refEl) {\n            if (props.focus) {\n                props.focus();\n            } else {\n                focusWithoutScrolling(refEl);\n            }\n        }\n    }));\n    return {\n        isSelected,\n        isDisabled,\n        allowsSelection,\n        tabIndex,\n        dataKey,\n        onPointerDown,\n        onPointerUp,\n        onClick,\n        onKeyDown,\n        onMouseDown,\n        onFocus\n    };\n}\nvar SelectionManager = class {\n    constructor(collection, state){\n        this.collection = collection;\n        this.state = state;\n    }\n    /** The type of selection that is allowed in the collection. */ selectionMode() {\n        return this.state.selectionMode();\n    }\n    /** Whether the collection allows empty selection. */ disallowEmptySelection() {\n        return this.state.disallowEmptySelection();\n    }\n    /** The selection behavior for the collection. */ selectionBehavior() {\n        return this.state.selectionBehavior();\n    }\n    /** Sets the selection behavior for the collection. */ setSelectionBehavior(selectionBehavior) {\n        this.state.setSelectionBehavior(selectionBehavior);\n    }\n    /** Whether the collection is currently focused. */ isFocused() {\n        return this.state.isFocused();\n    }\n    /** Sets whether the collection is focused. */ setFocused(isFocused) {\n        this.state.setFocused(isFocused);\n    }\n    /** The current focused key in the collection. */ focusedKey() {\n        return this.state.focusedKey();\n    }\n    /** Sets the focused key. */ setFocusedKey(key) {\n        if (key == null || this.collection().getItem(key)) {\n            this.state.setFocusedKey(key);\n        }\n    }\n    /** The currently selected keys in the collection. */ selectedKeys() {\n        return this.state.selectedKeys();\n    }\n    /** Returns whether a key is selected. */ isSelected(key) {\n        if (this.state.selectionMode() === \"none\") {\n            return false;\n        }\n        const retrievedKey = this.getKey(key);\n        if (retrievedKey == null) {\n            return false;\n        }\n        return this.state.selectedKeys().has(retrievedKey);\n    }\n    /** Whether the selection is empty. */ isEmpty() {\n        return this.state.selectedKeys().size === 0;\n    }\n    /** Whether all items in the collection are selected. */ isSelectAll() {\n        if (this.isEmpty()) {\n            return false;\n        }\n        const selectedKeys = this.state.selectedKeys();\n        return this.getAllSelectableKeys().every((k)=>selectedKeys.has(k));\n    }\n    firstSelectedKey() {\n        let first;\n        for (const key of this.state.selectedKeys()){\n            const item = this.collection().getItem(key);\n            const isItemBeforeFirst = item?.index != null && first?.index != null && item.index < first.index;\n            if (!first || isItemBeforeFirst) {\n                first = item;\n            }\n        }\n        return first?.key;\n    }\n    lastSelectedKey() {\n        let last;\n        for (const key of this.state.selectedKeys()){\n            const item = this.collection().getItem(key);\n            const isItemAfterLast = item?.index != null && last?.index != null && item.index > last.index;\n            if (!last || isItemAfterLast) {\n                last = item;\n            }\n        }\n        return last?.key;\n    }\n    /** Extends the selection to the given key. */ extendSelection(toKey) {\n        if (this.selectionMode() === \"none\") {\n            return;\n        }\n        if (this.selectionMode() === \"single\") {\n            this.replaceSelection(toKey);\n            return;\n        }\n        const retrievedToKey = this.getKey(toKey);\n        if (retrievedToKey == null) {\n            return;\n        }\n        const selectedKeys = this.state.selectedKeys();\n        const anchorKey = selectedKeys.anchorKey || retrievedToKey;\n        const selection = new Selection(selectedKeys, anchorKey, retrievedToKey);\n        for (const key of this.getKeyRange(anchorKey, selectedKeys.currentKey || retrievedToKey)){\n            selection.delete(key);\n        }\n        for (const key of this.getKeyRange(retrievedToKey, anchorKey)){\n            if (this.canSelectItem(key)) {\n                selection.add(key);\n            }\n        }\n        this.state.setSelectedKeys(selection);\n    }\n    getKeyRange(from, to) {\n        const fromItem = this.collection().getItem(from);\n        const toItem = this.collection().getItem(to);\n        if (fromItem && toItem) {\n            if (fromItem.index != null && toItem.index != null && fromItem.index <= toItem.index) {\n                return this.getKeyRangeInternal(from, to);\n            }\n            return this.getKeyRangeInternal(to, from);\n        }\n        return [];\n    }\n    getKeyRangeInternal(from, to) {\n        const keys2 = [];\n        let key = from;\n        while(key != null){\n            const item = this.collection().getItem(key);\n            if (item && item.type === \"item\") {\n                keys2.push(key);\n            }\n            if (key === to) {\n                return keys2;\n            }\n            key = this.collection().getKeyAfter(key);\n        }\n        return [];\n    }\n    getKey(key) {\n        const item = this.collection().getItem(key);\n        if (!item) {\n            return key;\n        }\n        if (!item || item.type !== \"item\") {\n            return null;\n        }\n        return item.key;\n    }\n    /** Toggles whether the given key is selected. */ toggleSelection(key) {\n        if (this.selectionMode() === \"none\") {\n            return;\n        }\n        if (this.selectionMode() === \"single\" && !this.isSelected(key)) {\n            this.replaceSelection(key);\n            return;\n        }\n        const retrievedKey = this.getKey(key);\n        if (retrievedKey == null) {\n            return;\n        }\n        const keys2 = new Selection(this.state.selectedKeys());\n        if (keys2.has(retrievedKey)) {\n            keys2.delete(retrievedKey);\n        } else if (this.canSelectItem(retrievedKey)) {\n            keys2.add(retrievedKey);\n            keys2.anchorKey = retrievedKey;\n            keys2.currentKey = retrievedKey;\n        }\n        if (this.disallowEmptySelection() && keys2.size === 0) {\n            return;\n        }\n        this.state.setSelectedKeys(keys2);\n    }\n    /** Replaces the selection with only the given key. */ replaceSelection(key) {\n        if (this.selectionMode() === \"none\") {\n            return;\n        }\n        const retrievedKey = this.getKey(key);\n        if (retrievedKey == null) {\n            return;\n        }\n        const selection = this.canSelectItem(retrievedKey) ? new Selection([\n            retrievedKey\n        ], retrievedKey, retrievedKey) : new Selection();\n        this.state.setSelectedKeys(selection);\n    }\n    /** Replaces the selection with the given keys. */ setSelectedKeys(keys2) {\n        if (this.selectionMode() === \"none\") {\n            return;\n        }\n        const selection = new Selection();\n        for (const key of keys2){\n            const retrievedKey = this.getKey(key);\n            if (retrievedKey != null) {\n                selection.add(retrievedKey);\n                if (this.selectionMode() === \"single\") {\n                    break;\n                }\n            }\n        }\n        this.state.setSelectedKeys(selection);\n    }\n    /** Selects all items in the collection. */ selectAll() {\n        if (this.selectionMode() === \"multiple\") {\n            this.state.setSelectedKeys(new Set(this.getAllSelectableKeys()));\n        }\n    }\n    /**\n   * Removes all keys from the selection.\n   */ clearSelection() {\n        const selectedKeys = this.state.selectedKeys();\n        if (!this.disallowEmptySelection() && selectedKeys.size > 0) {\n            this.state.setSelectedKeys(new Selection());\n        }\n    }\n    /**\n   * Toggles between select all and an empty selection.\n   */ toggleSelectAll() {\n        if (this.isSelectAll()) {\n            this.clearSelection();\n        } else {\n            this.selectAll();\n        }\n    }\n    select(key, e2) {\n        if (this.selectionMode() === \"none\") {\n            return;\n        }\n        if (this.selectionMode() === \"single\") {\n            if (this.isSelected(key) && !this.disallowEmptySelection()) {\n                this.toggleSelection(key);\n            } else {\n                this.replaceSelection(key);\n            }\n        } else if (this.selectionBehavior() === \"toggle\" || e2 && e2.pointerType === \"touch\") {\n            this.toggleSelection(key);\n        } else {\n            this.replaceSelection(key);\n        }\n    }\n    /** Returns whether the current selection is equal to the given selection. */ isSelectionEqual(selection) {\n        if (selection === this.state.selectedKeys()) {\n            return true;\n        }\n        const selectedKeys = this.selectedKeys();\n        if (selection.size !== selectedKeys.size) {\n            return false;\n        }\n        for (const key of selection){\n            if (!selectedKeys.has(key)) {\n                return false;\n            }\n        }\n        for (const key of selectedKeys){\n            if (!selection.has(key)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    canSelectItem(key) {\n        if (this.state.selectionMode() === \"none\") {\n            return false;\n        }\n        const item = this.collection().getItem(key);\n        return item != null && !item.disabled;\n    }\n    isDisabled(key) {\n        const item = this.collection().getItem(key);\n        return !item || item.disabled;\n    }\n    getAllSelectableKeys() {\n        const keys2 = [];\n        const addKeys = (key)=>{\n            while(key != null){\n                if (this.canSelectItem(key)) {\n                    const item = this.collection().getItem(key);\n                    if (!item) {\n                        continue;\n                    }\n                    if (item.type === \"item\") {\n                        keys2.push(key);\n                    }\n                }\n                key = this.collection().getKeyAfter(key);\n            }\n        };\n        addKeys(this.collection().getFirstKey());\n        return keys2;\n    }\n};\nvar ListCollection = class {\n    constructor(nodes){\n        this.keyMap = /* @__PURE__ */ new Map();\n        this.iterable = nodes;\n        for (const node of nodes){\n            this.keyMap.set(node.key, node);\n        }\n        if (this.keyMap.size === 0) {\n            return;\n        }\n        let last;\n        let index = 0;\n        for (const [key, node] of this.keyMap){\n            if (last) {\n                last.nextKey = key;\n                node.prevKey = last.key;\n            } else {\n                this.firstKey = key;\n                node.prevKey = void 0;\n            }\n            if (node.type === \"item\") {\n                node.index = index++;\n            }\n            last = node;\n            last.nextKey = void 0;\n        }\n        this.lastKey = last.key;\n    }\n    *[Symbol.iterator]() {\n        yield* this.iterable;\n    }\n    getSize() {\n        return this.keyMap.size;\n    }\n    getKeys() {\n        return this.keyMap.keys();\n    }\n    getKeyBefore(key) {\n        return this.keyMap.get(key)?.prevKey;\n    }\n    getKeyAfter(key) {\n        return this.keyMap.get(key)?.nextKey;\n    }\n    getFirstKey() {\n        return this.firstKey;\n    }\n    getLastKey() {\n        return this.lastKey;\n    }\n    getItem(key) {\n        return this.keyMap.get(key);\n    }\n    at(idx) {\n        const keys2 = [\n            ...this.getKeys()\n        ];\n        return this.getItem(keys2[idx]);\n    }\n};\nfunction createListState(props) {\n    const selectionState = createMultipleSelectionState(props);\n    const factory = (nodes)=>{\n        return props.filter ? new ListCollection(props.filter(nodes)) : new ListCollection(nodes);\n    };\n    const collection = createCollection({\n        dataSource: ()=>access(props.dataSource),\n        getKey: ()=>access(props.getKey),\n        getTextValue: ()=>access(props.getTextValue),\n        getDisabled: ()=>access(props.getDisabled),\n        getSectionChildren: ()=>access(props.getSectionChildren),\n        factory\n    }, [\n        ()=>props.filter\n    ]);\n    const selectionManager = new SelectionManager(collection, selectionState);\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComputed)(()=>{\n        const focusedKey = selectionState.focusedKey();\n        if (focusedKey != null && !collection().getItem(focusedKey)) {\n            selectionState.setFocusedKey(void 0);\n        }\n    });\n    return {\n        collection,\n        selectionManager: ()=>selectionManager\n    };\n}\n// ../../node_modules/.pnpm/@corvu+utils@0.3.2_solid-js@1.9.5/node_modules/@corvu/utils/dist/chunk/ZV6G25TT.js\nvar access2 = (v)=>typeof v === \"function\" ? v() : v;\n// ../../node_modules/.pnpm/solid-presence@0.1.7_solid-js@1.9.5/node_modules/solid-presence/dist/index.js\nvar createPresence = (props)=>{\n    const refStyles = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        const element = access2(props.element);\n        if (!element) return;\n        return getComputedStyle(element);\n    });\n    const getAnimationName = ()=>{\n        return refStyles()?.animationName ?? \"none\";\n    };\n    const [presentState, setPresentState] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(access2(props.show) ? \"present\" : \"hidden\");\n    let animationName = \"none\";\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)((prevShow)=>{\n        const show = access2(props.show);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.untrack)(()=>{\n            if (prevShow === show) return show;\n            const prevAnimationName = animationName;\n            const currentAnimationName = getAnimationName();\n            if (show) {\n                setPresentState(\"present\");\n            } else if (currentAnimationName === \"none\" || refStyles()?.display === \"none\") {\n                setPresentState(\"hidden\");\n            } else {\n                const isAnimating = prevAnimationName !== currentAnimationName;\n                if (prevShow === true && isAnimating) {\n                    setPresentState(\"hiding\");\n                } else {\n                    setPresentState(\"hidden\");\n                }\n            }\n        });\n        return show;\n    });\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        const element = access2(props.element);\n        if (!element) return;\n        const handleAnimationStart = (event)=>{\n            if (event.target === element) {\n                animationName = getAnimationName();\n            }\n        };\n        const handleAnimationEnd = (event)=>{\n            const currentAnimationName = getAnimationName();\n            const isCurrentAnimation = currentAnimationName.includes(event.animationName);\n            if (event.target === element && isCurrentAnimation && presentState() === \"hiding\") {\n                setPresentState(\"hidden\");\n            }\n        };\n        element.addEventListener(\"animationstart\", handleAnimationStart);\n        element.addEventListener(\"animationcancel\", handleAnimationEnd);\n        element.addEventListener(\"animationend\", handleAnimationEnd);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            element.removeEventListener(\"animationstart\", handleAnimationStart);\n            element.removeEventListener(\"animationcancel\", handleAnimationEnd);\n            element.removeEventListener(\"animationend\", handleAnimationEnd);\n        });\n    });\n    return {\n        present: ()=>presentState() === \"present\" || presentState() === \"hiding\",\n        state: presentState\n    };\n};\nvar presence_default = createPresence;\nvar src_default = presence_default;\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/ZKYDDHM6.js\nvar DATA_TOP_LAYER_ATTR = \"data-kb-top-layer\";\nvar originalBodyPointerEvents;\nvar hasDisabledBodyPointerEvents = false;\nvar layers = [];\nfunction indexOf(node) {\n    return layers.findIndex((layer)=>layer.node === node);\n}\nfunction find(node) {\n    return layers[indexOf(node)];\n}\nfunction isTopMostLayer(node) {\n    return layers[layers.length - 1].node === node;\n}\nfunction getPointerBlockingLayers() {\n    return layers.filter((layer)=>layer.isPointerBlocking);\n}\nfunction getTopMostPointerBlockingLayer() {\n    return [\n        ...getPointerBlockingLayers()\n    ].slice(-1)[0];\n}\nfunction hasPointerBlockingLayer() {\n    return getPointerBlockingLayers().length > 0;\n}\nfunction isBelowPointerBlockingLayer(node) {\n    const highestBlockingIndex = indexOf(getTopMostPointerBlockingLayer()?.node);\n    return indexOf(node) < highestBlockingIndex;\n}\nfunction addLayer(layer) {\n    layers.push(layer);\n}\nfunction removeLayer(node) {\n    const index = indexOf(node);\n    if (index < 0) {\n        return;\n    }\n    layers.splice(index, 1);\n}\nfunction assignPointerEventToLayers() {\n    for (const { node } of layers){\n        node.style.pointerEvents = isBelowPointerBlockingLayer(node) ? \"none\" : \"auto\";\n    }\n}\nfunction disableBodyPointerEvents(node) {\n    if (hasPointerBlockingLayer() && !hasDisabledBodyPointerEvents) {\n        const ownerDocument = getDocument(node);\n        originalBodyPointerEvents = document.body.style.pointerEvents;\n        ownerDocument.body.style.pointerEvents = \"none\";\n        hasDisabledBodyPointerEvents = true;\n    }\n}\nfunction restoreBodyPointerEvents(node) {\n    if (hasPointerBlockingLayer()) {\n        return;\n    }\n    const ownerDocument = getDocument(node);\n    ownerDocument.body.style.pointerEvents = originalBodyPointerEvents;\n    if (ownerDocument.body.style.length === 0) {\n        ownerDocument.body.removeAttribute(\"style\");\n    }\n    hasDisabledBodyPointerEvents = false;\n}\nvar layerStack = {\n    layers,\n    isTopMostLayer,\n    hasPointerBlockingLayer,\n    isBelowPointerBlockingLayer,\n    addLayer,\n    removeLayer,\n    indexOf,\n    find,\n    assignPointerEventToLayers,\n    disableBodyPointerEvents,\n    restoreBodyPointerEvents\n};\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/7OVKXYPU.js\nvar button_exports = {};\n__export(button_exports, {\n    Button: ()=>Button,\n    Root: ()=>ButtonRoot\n});\nvar BUTTON_INPUT_TYPES = [\n    \"button\",\n    \"color\",\n    \"file\",\n    \"image\",\n    \"reset\",\n    \"submit\"\n];\nfunction isButton(element) {\n    const tagName = element.tagName.toLowerCase();\n    if (tagName === \"button\") {\n        return true;\n    }\n    if (tagName === \"input\" && element.type) {\n        return BUTTON_INPUT_TYPES.indexOf(element.type) !== -1;\n    }\n    return false;\n}\nfunction ButtonRoot(props) {\n    let ref;\n    const mergedProps = mergeDefaultProps({\n        type: \"button\"\n    }, props);\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(mergedProps, [\n        \"ref\",\n        \"type\",\n        \"disabled\"\n    ]);\n    const tagName = createTagName(()=>ref, ()=>\"button\");\n    const isNativeButton = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        const elementTagName = tagName();\n        if (elementTagName == null) {\n            return false;\n        }\n        return isButton({\n            tagName: elementTagName,\n            type: local.type\n        });\n    });\n    const isNativeInput = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return tagName() === \"input\";\n    });\n    const isNativeLink = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return tagName() === \"a\" && ref?.getAttribute(\"href\") != null;\n    });\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"button\",\n        ref (r$) {\n            const _ref$ = mergeRefs((el)=>ref = el, local.ref);\n            typeof _ref$ === \"function\" && _ref$(r$);\n        },\n        get type () {\n            return isNativeButton() || isNativeInput() ? local.type : void 0;\n        },\n        get role () {\n            return !isNativeButton() && !isNativeLink() ? \"button\" : void 0;\n        },\n        get tabIndex () {\n            return !isNativeButton() && !isNativeLink() && !local.disabled ? 0 : void 0;\n        },\n        get disabled () {\n            return isNativeButton() || isNativeInput() ? local.disabled : void 0;\n        },\n        get [\"aria-disabled\"] () {\n            return !isNativeButton() && !isNativeInput() && local.disabled ? true : void 0;\n        },\n        get [\"data-disabled\"] () {\n            return local.disabled ? \"\" : void 0;\n        }\n    }, others));\n}\nvar Button = ButtonRoot;\n// ../../node_modules/.pnpm/@floating-ui+utils@0.2.5/node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs\nvar sides = [\n    \"top\",\n    \"right\",\n    \"bottom\",\n    \"left\"\n];\nvar min = Math.min;\nvar max = Math.max;\nvar round = Math.round;\nvar floor = Math.floor;\nvar createCoords = (v)=>({\n        x: v,\n        y: v\n    });\nvar oppositeSideMap = {\n    left: \"right\",\n    right: \"left\",\n    bottom: \"top\",\n    top: \"bottom\"\n};\nvar oppositeAlignmentMap = {\n    start: \"end\",\n    end: \"start\"\n};\nfunction clamp2(start, value, end) {\n    return max(start, min(value, end));\n}\nfunction evaluate(value, param) {\n    return typeof value === \"function\" ? value(param) : value;\n}\nfunction getSide(placement) {\n    return placement.split(\"-\")[0];\n}\nfunction getAlignment(placement) {\n    return placement.split(\"-\")[1];\n}\nfunction getOppositeAxis(axis) {\n    return axis === \"x\" ? \"y\" : \"x\";\n}\nfunction getAxisLength(axis) {\n    return axis === \"y\" ? \"height\" : \"width\";\n}\nfunction getSideAxis(placement) {\n    return [\n        \"top\",\n        \"bottom\"\n    ].includes(getSide(placement)) ? \"y\" : \"x\";\n}\nfunction getAlignmentAxis(placement) {\n    return getOppositeAxis(getSideAxis(placement));\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n    if (rtl === void 0) {\n        rtl = false;\n    }\n    const alignment = getAlignment(placement);\n    const alignmentAxis = getAlignmentAxis(placement);\n    const length = getAxisLength(alignmentAxis);\n    let mainAlignmentSide = alignmentAxis === \"x\" ? alignment === (rtl ? \"end\" : \"start\") ? \"right\" : \"left\" : alignment === \"start\" ? \"bottom\" : \"top\";\n    if (rects.reference[length] > rects.floating[length]) {\n        mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n    }\n    return [\n        mainAlignmentSide,\n        getOppositePlacement(mainAlignmentSide)\n    ];\n}\nfunction getExpandedPlacements(placement) {\n    const oppositePlacement = getOppositePlacement(placement);\n    return [\n        getOppositeAlignmentPlacement(placement),\n        oppositePlacement,\n        getOppositeAlignmentPlacement(oppositePlacement)\n    ];\n}\nfunction getOppositeAlignmentPlacement(placement) {\n    return placement.replace(/start|end/g, (alignment)=>oppositeAlignmentMap[alignment]);\n}\nfunction getSideList(side, isStart, rtl) {\n    const lr = [\n        \"left\",\n        \"right\"\n    ];\n    const rl = [\n        \"right\",\n        \"left\"\n    ];\n    const tb = [\n        \"top\",\n        \"bottom\"\n    ];\n    const bt = [\n        \"bottom\",\n        \"top\"\n    ];\n    switch(side){\n        case \"top\":\n        case \"bottom\":\n            if (rtl) return isStart ? rl : lr;\n            return isStart ? lr : rl;\n        case \"left\":\n        case \"right\":\n            return isStart ? tb : bt;\n        default:\n            return [];\n    }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n    const alignment = getAlignment(placement);\n    let list = getSideList(getSide(placement), direction === \"start\", rtl);\n    if (alignment) {\n        list = list.map((side)=>side + \"-\" + alignment);\n        if (flipAlignment) {\n            list = list.concat(list.map(getOppositeAlignmentPlacement));\n        }\n    }\n    return list;\n}\nfunction getOppositePlacement(placement) {\n    return placement.replace(/left|right|bottom|top/g, (side)=>oppositeSideMap[side]);\n}\nfunction expandPaddingObject(padding) {\n    return {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n        ...padding\n    };\n}\nfunction getPaddingObject(padding) {\n    return typeof padding !== \"number\" ? expandPaddingObject(padding) : {\n        top: padding,\n        right: padding,\n        bottom: padding,\n        left: padding\n    };\n}\nfunction rectToClientRect(rect) {\n    const { x, y, width, height } = rect;\n    return {\n        width,\n        height,\n        top: y,\n        left: x,\n        right: x + width,\n        bottom: y + height,\n        x,\n        y\n    };\n}\n// ../../node_modules/.pnpm/@floating-ui+core@1.6.5/node_modules/@floating-ui/core/dist/floating-ui.core.mjs\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n    let { reference, floating } = _ref;\n    const sideAxis = getSideAxis(placement);\n    const alignmentAxis = getAlignmentAxis(placement);\n    const alignLength = getAxisLength(alignmentAxis);\n    const side = getSide(placement);\n    const isVertical = sideAxis === \"y\";\n    const commonX = reference.x + reference.width / 2 - floating.width / 2;\n    const commonY = reference.y + reference.height / 2 - floating.height / 2;\n    const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n    let coords;\n    switch(side){\n        case \"top\":\n            coords = {\n                x: commonX,\n                y: reference.y - floating.height\n            };\n            break;\n        case \"bottom\":\n            coords = {\n                x: commonX,\n                y: reference.y + reference.height\n            };\n            break;\n        case \"right\":\n            coords = {\n                x: reference.x + reference.width,\n                y: commonY\n            };\n            break;\n        case \"left\":\n            coords = {\n                x: reference.x - floating.width,\n                y: commonY\n            };\n            break;\n        default:\n            coords = {\n                x: reference.x,\n                y: reference.y\n            };\n    }\n    switch(getAlignment(placement)){\n        case \"start\":\n            coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n            break;\n        case \"end\":\n            coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n            break;\n    }\n    return coords;\n}\nvar computePosition = async (reference, floating, config)=>{\n    const { placement = \"bottom\", strategy = \"absolute\", middleware = [], platform: platform2 } = config;\n    const validMiddleware = middleware.filter(Boolean);\n    const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));\n    let rects = await platform2.getElementRects({\n        reference,\n        floating,\n        strategy\n    });\n    let { x, y } = computeCoordsFromPlacement(rects, placement, rtl);\n    let statefulPlacement = placement;\n    let middlewareData = {};\n    let resetCount = 0;\n    for(let i2 = 0; i2 < validMiddleware.length; i2++){\n        const { name, fn } = validMiddleware[i2];\n        const { x: nextX, y: nextY, data, reset } = await fn({\n            x,\n            y,\n            initialPlacement: placement,\n            placement: statefulPlacement,\n            strategy,\n            middlewareData,\n            rects,\n            platform: platform2,\n            elements: {\n                reference,\n                floating\n            }\n        });\n        x = nextX != null ? nextX : x;\n        y = nextY != null ? nextY : y;\n        middlewareData = {\n            ...middlewareData,\n            [name]: {\n                ...middlewareData[name],\n                ...data\n            }\n        };\n        if (reset && resetCount <= 50) {\n            resetCount++;\n            if (typeof reset === \"object\") {\n                if (reset.placement) {\n                    statefulPlacement = reset.placement;\n                }\n                if (reset.rects) {\n                    rects = reset.rects === true ? await platform2.getElementRects({\n                        reference,\n                        floating,\n                        strategy\n                    }) : reset.rects;\n                }\n                ({ x, y } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n            }\n            i2 = -1;\n        }\n    }\n    return {\n        x,\n        y,\n        placement: statefulPlacement,\n        strategy,\n        middlewareData\n    };\n};\nasync function detectOverflow(state, options) {\n    var _await$platform$isEle;\n    if (options === void 0) {\n        options = {};\n    }\n    const { x, y, platform: platform2, rects, elements, strategy } = state;\n    const { boundary = \"clippingAncestors\", rootBoundary = \"viewport\", elementContext = \"floating\", altBoundary = false, padding = 0 } = evaluate(options, state);\n    const paddingObject = getPaddingObject(padding);\n    const altContext = elementContext === \"floating\" ? \"reference\" : \"floating\";\n    const element = elements[altBoundary ? altContext : elementContext];\n    const clippingClientRect = rectToClientRect(await platform2.getClippingRect({\n        element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),\n        boundary,\n        rootBoundary,\n        strategy\n    }));\n    const rect = elementContext === \"floating\" ? {\n        x,\n        y,\n        width: rects.floating.width,\n        height: rects.floating.height\n    } : rects.reference;\n    const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));\n    const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {\n        x: 1,\n        y: 1\n    } : {\n        x: 1,\n        y: 1\n    };\n    const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({\n        elements,\n        rect,\n        offsetParent,\n        strategy\n    }) : rect);\n    return {\n        top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n        bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n        left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n        right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n    };\n}\nvar arrow = (options)=>({\n        name: \"arrow\",\n        options,\n        async fn (state) {\n            const { x, y, placement, rects, platform: platform2, elements, middlewareData } = state;\n            const { element, padding = 0 } = evaluate(options, state) || {};\n            if (element == null) {\n                return {};\n            }\n            const paddingObject = getPaddingObject(padding);\n            const coords = {\n                x,\n                y\n            };\n            const axis = getAlignmentAxis(placement);\n            const length = getAxisLength(axis);\n            const arrowDimensions = await platform2.getDimensions(element);\n            const isYAxis = axis === \"y\";\n            const minProp = isYAxis ? \"top\" : \"left\";\n            const maxProp = isYAxis ? \"bottom\" : \"right\";\n            const clientProp = isYAxis ? \"clientHeight\" : \"clientWidth\";\n            const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n            const startDiff = coords[axis] - rects.reference[axis];\n            const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));\n            let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n            if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {\n                clientSize = elements.floating[clientProp] || rects.floating[length];\n            }\n            const centerToReference = endDiff / 2 - startDiff / 2;\n            const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n            const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n            const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n            const min$1 = minPadding;\n            const max2 = clientSize - arrowDimensions[length] - maxPadding;\n            const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n            const offset3 = clamp2(min$1, center, max2);\n            const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset3 && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n            const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;\n            return {\n                [axis]: coords[axis] + alignmentOffset,\n                data: {\n                    [axis]: offset3,\n                    centerOffset: center - offset3 - alignmentOffset,\n                    ...shouldAddOffset && {\n                        alignmentOffset\n                    }\n                },\n                reset: shouldAddOffset\n            };\n        }\n    });\nvar flip = function(options) {\n    if (options === void 0) {\n        options = {};\n    }\n    return {\n        name: \"flip\",\n        options,\n        async fn (state) {\n            var _middlewareData$arrow, _middlewareData$flip;\n            const { placement, middlewareData, rects, initialPlacement, platform: platform2, elements } = state;\n            const { mainAxis: checkMainAxis = true, crossAxis: checkCrossAxis = true, fallbackPlacements: specifiedFallbackPlacements, fallbackStrategy = \"bestFit\", fallbackAxisSideDirection = \"none\", flipAlignment = true, ...detectOverflowOptions } = evaluate(options, state);\n            if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n                return {};\n            }\n            const side = getSide(placement);\n            const initialSideAxis = getSideAxis(initialPlacement);\n            const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n            const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));\n            const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [\n                getOppositePlacement(initialPlacement)\n            ] : getExpandedPlacements(initialPlacement));\n            const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== \"none\";\n            if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {\n                fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n            }\n            const placements2 = [\n                initialPlacement,\n                ...fallbackPlacements\n            ];\n            const overflow = await detectOverflow(state, detectOverflowOptions);\n            const overflows = [];\n            let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n            if (checkMainAxis) {\n                overflows.push(overflow[side]);\n            }\n            if (checkCrossAxis) {\n                const sides2 = getAlignmentSides(placement, rects, rtl);\n                overflows.push(overflow[sides2[0]], overflow[sides2[1]]);\n            }\n            overflowsData = [\n                ...overflowsData,\n                {\n                    placement,\n                    overflows\n                }\n            ];\n            if (!overflows.every((side2)=>side2 <= 0)) {\n                var _middlewareData$flip2, _overflowsData$filter;\n                const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n                const nextPlacement = placements2[nextIndex];\n                if (nextPlacement) {\n                    return {\n                        data: {\n                            index: nextIndex,\n                            overflows: overflowsData\n                        },\n                        reset: {\n                            placement: nextPlacement\n                        }\n                    };\n                }\n                let resetPlacement = (_overflowsData$filter = overflowsData.filter((d)=>d.overflows[0] <= 0).sort((a2, b2)=>a2.overflows[1] - b2.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n                if (!resetPlacement) {\n                    switch(fallbackStrategy){\n                        case \"bestFit\":\n                            {\n                                var _overflowsData$filter2;\n                                const placement2 = (_overflowsData$filter2 = overflowsData.filter((d)=>{\n                                    if (hasFallbackAxisSideDirection) {\n                                        const currentSideAxis = getSideAxis(d.placement);\n                                        return currentSideAxis === initialSideAxis || // Create a bias to the `y` side axis due to horizontal\n                                        // reading directions favoring greater width.\n                                        currentSideAxis === \"y\";\n                                    }\n                                    return true;\n                                }).map((d)=>[\n                                        d.placement,\n                                        d.overflows.filter((overflow2)=>overflow2 > 0).reduce((acc, overflow2)=>acc + overflow2, 0)\n                                    ]).sort((a2, b2)=>a2[1] - b2[1])[0]) == null ? void 0 : _overflowsData$filter2[0];\n                                if (placement2) {\n                                    resetPlacement = placement2;\n                                }\n                                break;\n                            }\n                        case \"initialPlacement\":\n                            resetPlacement = initialPlacement;\n                            break;\n                    }\n                }\n                if (placement !== resetPlacement) {\n                    return {\n                        reset: {\n                            placement: resetPlacement\n                        }\n                    };\n                }\n            }\n            return {};\n        }\n    };\n};\nfunction getSideOffsets(overflow, rect) {\n    return {\n        top: overflow.top - rect.height,\n        right: overflow.right - rect.width,\n        bottom: overflow.bottom - rect.height,\n        left: overflow.left - rect.width\n    };\n}\nfunction isAnySideFullyClipped(overflow) {\n    return sides.some((side)=>overflow[side] >= 0);\n}\nvar hide = function(options) {\n    if (options === void 0) {\n        options = {};\n    }\n    return {\n        name: \"hide\",\n        options,\n        async fn (state) {\n            const { rects } = state;\n            const { strategy = \"referenceHidden\", ...detectOverflowOptions } = evaluate(options, state);\n            switch(strategy){\n                case \"referenceHidden\":\n                    {\n                        const overflow = await detectOverflow(state, {\n                            ...detectOverflowOptions,\n                            elementContext: \"reference\"\n                        });\n                        const offsets = getSideOffsets(overflow, rects.reference);\n                        return {\n                            data: {\n                                referenceHiddenOffsets: offsets,\n                                referenceHidden: isAnySideFullyClipped(offsets)\n                            }\n                        };\n                    }\n                case \"escaped\":\n                    {\n                        const overflow = await detectOverflow(state, {\n                            ...detectOverflowOptions,\n                            altBoundary: true\n                        });\n                        const offsets = getSideOffsets(overflow, rects.floating);\n                        return {\n                            data: {\n                                escapedOffsets: offsets,\n                                escaped: isAnySideFullyClipped(offsets)\n                            }\n                        };\n                    }\n                default:\n                    {\n                        return {};\n                    }\n            }\n        }\n    };\n};\nasync function convertValueToCoords(state, options) {\n    const { placement, platform: platform2, elements } = state;\n    const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));\n    const side = getSide(placement);\n    const alignment = getAlignment(placement);\n    const isVertical = getSideAxis(placement) === \"y\";\n    const mainAxisMulti = [\n        \"left\",\n        \"top\"\n    ].includes(side) ? -1 : 1;\n    const crossAxisMulti = rtl && isVertical ? -1 : 1;\n    const rawValue = evaluate(options, state);\n    let { mainAxis, crossAxis, alignmentAxis } = typeof rawValue === \"number\" ? {\n        mainAxis: rawValue,\n        crossAxis: 0,\n        alignmentAxis: null\n    } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        alignmentAxis: null,\n        ...rawValue\n    };\n    if (alignment && typeof alignmentAxis === \"number\") {\n        crossAxis = alignment === \"end\" ? alignmentAxis * -1 : alignmentAxis;\n    }\n    return isVertical ? {\n        x: crossAxis * crossAxisMulti,\n        y: mainAxis * mainAxisMulti\n    } : {\n        x: mainAxis * mainAxisMulti,\n        y: crossAxis * crossAxisMulti\n    };\n}\nvar offset = function(options) {\n    if (options === void 0) {\n        options = 0;\n    }\n    return {\n        name: \"offset\",\n        options,\n        async fn (state) {\n            var _middlewareData$offse, _middlewareData$arrow;\n            const { x, y, placement, middlewareData } = state;\n            const diffCoords = await convertValueToCoords(state, options);\n            if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n                return {};\n            }\n            return {\n                x: x + diffCoords.x,\n                y: y + diffCoords.y,\n                data: {\n                    ...diffCoords,\n                    placement\n                }\n            };\n        }\n    };\n};\nvar shift = function(options) {\n    if (options === void 0) {\n        options = {};\n    }\n    return {\n        name: \"shift\",\n        options,\n        async fn (state) {\n            const { x, y, placement } = state;\n            const { mainAxis: checkMainAxis = true, crossAxis: checkCrossAxis = false, limiter = {\n                fn: (_ref)=>{\n                    let { x: x2, y: y2 } = _ref;\n                    return {\n                        x: x2,\n                        y: y2\n                    };\n                }\n            }, ...detectOverflowOptions } = evaluate(options, state);\n            const coords = {\n                x,\n                y\n            };\n            const overflow = await detectOverflow(state, detectOverflowOptions);\n            const crossAxis = getSideAxis(getSide(placement));\n            const mainAxis = getOppositeAxis(crossAxis);\n            let mainAxisCoord = coords[mainAxis];\n            let crossAxisCoord = coords[crossAxis];\n            if (checkMainAxis) {\n                const minSide = mainAxis === \"y\" ? \"top\" : \"left\";\n                const maxSide = mainAxis === \"y\" ? \"bottom\" : \"right\";\n                const min2 = mainAxisCoord + overflow[minSide];\n                const max2 = mainAxisCoord - overflow[maxSide];\n                mainAxisCoord = clamp2(min2, mainAxisCoord, max2);\n            }\n            if (checkCrossAxis) {\n                const minSide = crossAxis === \"y\" ? \"top\" : \"left\";\n                const maxSide = crossAxis === \"y\" ? \"bottom\" : \"right\";\n                const min2 = crossAxisCoord + overflow[minSide];\n                const max2 = crossAxisCoord - overflow[maxSide];\n                crossAxisCoord = clamp2(min2, crossAxisCoord, max2);\n            }\n            const limitedCoords = limiter.fn({\n                ...state,\n                [mainAxis]: mainAxisCoord,\n                [crossAxis]: crossAxisCoord\n            });\n            return {\n                ...limitedCoords,\n                data: {\n                    x: limitedCoords.x - x,\n                    y: limitedCoords.y - y\n                }\n            };\n        }\n    };\n};\nvar size = function(options) {\n    if (options === void 0) {\n        options = {};\n    }\n    return {\n        name: \"size\",\n        options,\n        async fn (state) {\n            const { placement, rects, platform: platform2, elements } = state;\n            const { apply = ()=>{}, ...detectOverflowOptions } = evaluate(options, state);\n            const overflow = await detectOverflow(state, detectOverflowOptions);\n            const side = getSide(placement);\n            const alignment = getAlignment(placement);\n            const isYAxis = getSideAxis(placement) === \"y\";\n            const { width, height } = rects.floating;\n            let heightSide;\n            let widthSide;\n            if (side === \"top\" || side === \"bottom\") {\n                heightSide = side;\n                widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? \"start\" : \"end\") ? \"left\" : \"right\";\n            } else {\n                widthSide = side;\n                heightSide = alignment === \"end\" ? \"top\" : \"bottom\";\n            }\n            const maximumClippingHeight = height - overflow.top - overflow.bottom;\n            const maximumClippingWidth = width - overflow.left - overflow.right;\n            const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);\n            const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);\n            const noShift = !state.middlewareData.shift;\n            let availableHeight = overflowAvailableHeight;\n            let availableWidth = overflowAvailableWidth;\n            if (isYAxis) {\n                availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\n            } else {\n                availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\n            }\n            if (noShift && !alignment) {\n                const xMin = max(overflow.left, 0);\n                const xMax = max(overflow.right, 0);\n                const yMin = max(overflow.top, 0);\n                const yMax = max(overflow.bottom, 0);\n                if (isYAxis) {\n                    availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n                } else {\n                    availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n                }\n            }\n            await apply({\n                ...state,\n                availableWidth,\n                availableHeight\n            });\n            const nextDimensions = await platform2.getDimensions(elements.floating);\n            if (width !== nextDimensions.width || height !== nextDimensions.height) {\n                return {\n                    reset: {\n                        rects: true\n                    }\n                };\n            }\n            return {};\n        }\n    };\n};\n// ../../node_modules/.pnpm/@floating-ui+utils@0.2.5/node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs\nfunction getNodeName(node) {\n    if (isNode(node)) {\n        return (node.nodeName || \"\").toLowerCase();\n    }\n    return \"#document\";\n}\nfunction getWindow2(node) {\n    var _node$ownerDocument;\n    return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\nfunction getDocumentElement(node) {\n    var _ref;\n    return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\n}\nfunction isNode(value) {\n    return value instanceof Node || value instanceof getWindow2(value).Node;\n}\nfunction isElement(value) {\n    return value instanceof Element || value instanceof getWindow2(value).Element;\n}\nfunction isHTMLElement(value) {\n    return value instanceof HTMLElement || value instanceof getWindow2(value).HTMLElement;\n}\nfunction isShadowRoot(value) {\n    if (typeof ShadowRoot === \"undefined\") {\n        return false;\n    }\n    return value instanceof ShadowRoot || value instanceof getWindow2(value).ShadowRoot;\n}\nfunction isOverflowElement(element) {\n    const { overflow, overflowX, overflowY, display } = getComputedStyle2(element);\n    return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && ![\n        \"inline\",\n        \"contents\"\n    ].includes(display);\n}\nfunction isTableElement(element) {\n    return [\n        \"table\",\n        \"td\",\n        \"th\"\n    ].includes(getNodeName(element));\n}\nfunction isTopLayer(element) {\n    return [\n        \":popover-open\",\n        \":modal\"\n    ].some((selector)=>{\n        try {\n            return element.matches(selector);\n        } catch (e2) {\n            return false;\n        }\n    });\n}\nfunction isContainingBlock(elementOrCss) {\n    const webkit = isWebKit();\n    const css = isElement(elementOrCss) ? getComputedStyle2(elementOrCss) : elementOrCss;\n    return css.transform !== \"none\" || css.perspective !== \"none\" || (css.containerType ? css.containerType !== \"normal\" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== \"none\" : false) || !webkit && (css.filter ? css.filter !== \"none\" : false) || [\n        \"transform\",\n        \"perspective\",\n        \"filter\"\n    ].some((value)=>(css.willChange || \"\").includes(value)) || [\n        \"paint\",\n        \"layout\",\n        \"strict\",\n        \"content\"\n    ].some((value)=>(css.contain || \"\").includes(value));\n}\nfunction getContainingBlock(element) {\n    let currentNode = getParentNode(element);\n    while(isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)){\n        if (isContainingBlock(currentNode)) {\n            return currentNode;\n        } else if (isTopLayer(currentNode)) {\n            return null;\n        }\n        currentNode = getParentNode(currentNode);\n    }\n    return null;\n}\nfunction isWebKit() {\n    if (typeof CSS === \"undefined\" || !CSS.supports) return false;\n    return CSS.supports(\"-webkit-backdrop-filter\", \"none\");\n}\nfunction isLastTraversableNode(node) {\n    return [\n        \"html\",\n        \"body\",\n        \"#document\"\n    ].includes(getNodeName(node));\n}\nfunction getComputedStyle2(element) {\n    return getWindow2(element).getComputedStyle(element);\n}\nfunction getNodeScroll(element) {\n    if (isElement(element)) {\n        return {\n            scrollLeft: element.scrollLeft,\n            scrollTop: element.scrollTop\n        };\n    }\n    return {\n        scrollLeft: element.scrollX,\n        scrollTop: element.scrollY\n    };\n}\nfunction getParentNode(node) {\n    if (getNodeName(node) === \"html\") {\n        return node;\n    }\n    const result = // Step into the shadow DOM of the parent of a slotted node.\n    node.assignedSlot || // DOM Element detected.\n    node.parentNode || // ShadowRoot detected.\n    isShadowRoot(node) && node.host || // Fallback.\n    getDocumentElement(node);\n    return isShadowRoot(result) ? result.host : result;\n}\nfunction getNearestOverflowAncestor(node) {\n    const parentNode = getParentNode(node);\n    if (isLastTraversableNode(parentNode)) {\n        return node.ownerDocument ? node.ownerDocument.body : node.body;\n    }\n    if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\n        return parentNode;\n    }\n    return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(node, list, traverseIframes) {\n    var _node$ownerDocument2;\n    if (list === void 0) {\n        list = [];\n    }\n    if (traverseIframes === void 0) {\n        traverseIframes = true;\n    }\n    const scrollableAncestor = getNearestOverflowAncestor(node);\n    const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\n    const win = getWindow2(scrollableAncestor);\n    if (isBody) {\n        return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);\n    }\n    return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));\n}\n// ../../node_modules/.pnpm/@floating-ui+dom@1.6.8/node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\nfunction getCssDimensions(element) {\n    const css = getComputedStyle2(element);\n    let width = parseFloat(css.width) || 0;\n    let height = parseFloat(css.height) || 0;\n    const hasOffset = isHTMLElement(element);\n    const offsetWidth = hasOffset ? element.offsetWidth : width;\n    const offsetHeight = hasOffset ? element.offsetHeight : height;\n    const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n    if (shouldFallback) {\n        width = offsetWidth;\n        height = offsetHeight;\n    }\n    return {\n        width,\n        height,\n        $: shouldFallback\n    };\n}\nfunction unwrapElement(element) {\n    return !isElement(element) ? element.contextElement : element;\n}\nfunction getScale(element) {\n    const domElement = unwrapElement(element);\n    if (!isHTMLElement(domElement)) {\n        return createCoords(1);\n    }\n    const rect = domElement.getBoundingClientRect();\n    const { width, height, $ } = getCssDimensions(domElement);\n    let x = ($ ? round(rect.width) : rect.width) / width;\n    let y = ($ ? round(rect.height) : rect.height) / height;\n    if (!x || !Number.isFinite(x)) {\n        x = 1;\n    }\n    if (!y || !Number.isFinite(y)) {\n        y = 1;\n    }\n    return {\n        x,\n        y\n    };\n}\nvar noOffsets = /* @__PURE__ */ createCoords(0);\nfunction getVisualOffsets(element) {\n    const win = getWindow2(element);\n    if (!isWebKit() || !win.visualViewport) {\n        return noOffsets;\n    }\n    return {\n        x: win.visualViewport.offsetLeft,\n        y: win.visualViewport.offsetTop\n    };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n    if (isFixed === void 0) {\n        isFixed = false;\n    }\n    if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow2(element)) {\n        return false;\n    }\n    return isFixed;\n}\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n    if (includeScale === void 0) {\n        includeScale = false;\n    }\n    if (isFixedStrategy === void 0) {\n        isFixedStrategy = false;\n    }\n    const clientRect = element.getBoundingClientRect();\n    const domElement = unwrapElement(element);\n    let scale = createCoords(1);\n    if (includeScale) {\n        if (offsetParent) {\n            if (isElement(offsetParent)) {\n                scale = getScale(offsetParent);\n            }\n        } else {\n            scale = getScale(element);\n        }\n    }\n    const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n    let x = (clientRect.left + visualOffsets.x) / scale.x;\n    let y = (clientRect.top + visualOffsets.y) / scale.y;\n    let width = clientRect.width / scale.x;\n    let height = clientRect.height / scale.y;\n    if (domElement) {\n        const win = getWindow2(domElement);\n        const offsetWin = offsetParent && isElement(offsetParent) ? getWindow2(offsetParent) : offsetParent;\n        let currentWin = win;\n        let currentIFrame = currentWin.frameElement;\n        while(currentIFrame && offsetParent && offsetWin !== currentWin){\n            const iframeScale = getScale(currentIFrame);\n            const iframeRect = currentIFrame.getBoundingClientRect();\n            const css = getComputedStyle2(currentIFrame);\n            const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n            const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n            x *= iframeScale.x;\n            y *= iframeScale.y;\n            width *= iframeScale.x;\n            height *= iframeScale.y;\n            x += left;\n            y += top;\n            currentWin = getWindow2(currentIFrame);\n            currentIFrame = currentWin.frameElement;\n        }\n    }\n    return rectToClientRect({\n        width,\n        height,\n        x,\n        y\n    });\n}\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n    let { elements, rect, offsetParent, strategy } = _ref;\n    const isFixed = strategy === \"fixed\";\n    const documentElement = getDocumentElement(offsetParent);\n    const topLayer = elements ? isTopLayer(elements.floating) : false;\n    if (offsetParent === documentElement || topLayer && isFixed) {\n        return rect;\n    }\n    let scroll = {\n        scrollLeft: 0,\n        scrollTop: 0\n    };\n    let scale = createCoords(1);\n    const offsets = createCoords(0);\n    const isOffsetParentAnElement = isHTMLElement(offsetParent);\n    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n        if (getNodeName(offsetParent) !== \"body\" || isOverflowElement(documentElement)) {\n            scroll = getNodeScroll(offsetParent);\n        }\n        if (isHTMLElement(offsetParent)) {\n            const offsetRect = getBoundingClientRect(offsetParent);\n            scale = getScale(offsetParent);\n            offsets.x = offsetRect.x + offsetParent.clientLeft;\n            offsets.y = offsetRect.y + offsetParent.clientTop;\n        }\n    }\n    return {\n        width: rect.width * scale.x,\n        height: rect.height * scale.y,\n        x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,\n        y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y\n    };\n}\nfunction getClientRects(element) {\n    return Array.from(element.getClientRects());\n}\nfunction getWindowScrollBarX(element) {\n    return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;\n}\nfunction getDocumentRect(element) {\n    const html = getDocumentElement(element);\n    const scroll = getNodeScroll(element);\n    const body = element.ownerDocument.body;\n    const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n    const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n    let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n    const y = -scroll.scrollTop;\n    if (getComputedStyle2(body).direction === \"rtl\") {\n        x += max(html.clientWidth, body.clientWidth) - width;\n    }\n    return {\n        width,\n        height,\n        x,\n        y\n    };\n}\nfunction getViewportRect(element, strategy) {\n    const win = getWindow2(element);\n    const html = getDocumentElement(element);\n    const visualViewport = win.visualViewport;\n    let width = html.clientWidth;\n    let height = html.clientHeight;\n    let x = 0;\n    let y = 0;\n    if (visualViewport) {\n        width = visualViewport.width;\n        height = visualViewport.height;\n        const visualViewportBased = isWebKit();\n        if (!visualViewportBased || visualViewportBased && strategy === \"fixed\") {\n            x = visualViewport.offsetLeft;\n            y = visualViewport.offsetTop;\n        }\n    }\n    return {\n        width,\n        height,\n        x,\n        y\n    };\n}\nfunction getInnerBoundingClientRect(element, strategy) {\n    const clientRect = getBoundingClientRect(element, true, strategy === \"fixed\");\n    const top = clientRect.top + element.clientTop;\n    const left = clientRect.left + element.clientLeft;\n    const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);\n    const width = element.clientWidth * scale.x;\n    const height = element.clientHeight * scale.y;\n    const x = left * scale.x;\n    const y = top * scale.y;\n    return {\n        width,\n        height,\n        x,\n        y\n    };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n    let rect;\n    if (clippingAncestor === \"viewport\") {\n        rect = getViewportRect(element, strategy);\n    } else if (clippingAncestor === \"document\") {\n        rect = getDocumentRect(getDocumentElement(element));\n    } else if (isElement(clippingAncestor)) {\n        rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n    } else {\n        const visualOffsets = getVisualOffsets(element);\n        rect = {\n            ...clippingAncestor,\n            x: clippingAncestor.x - visualOffsets.x,\n            y: clippingAncestor.y - visualOffsets.y\n        };\n    }\n    return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n    const parentNode = getParentNode(element);\n    if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n        return false;\n    }\n    return getComputedStyle2(parentNode).position === \"fixed\" || hasFixedPositionAncestor(parentNode, stopNode);\n}\nfunction getClippingElementAncestors(element, cache2) {\n    const cachedResult = cache2.get(element);\n    if (cachedResult) {\n        return cachedResult;\n    }\n    let result = getOverflowAncestors(element, [], false).filter((el)=>isElement(el) && getNodeName(el) !== \"body\");\n    let currentContainingBlockComputedStyle = null;\n    const elementIsFixed = getComputedStyle2(element).position === \"fixed\";\n    let currentNode = elementIsFixed ? getParentNode(element) : element;\n    while(isElement(currentNode) && !isLastTraversableNode(currentNode)){\n        const computedStyle = getComputedStyle2(currentNode);\n        const currentNodeIsContaining = isContainingBlock(currentNode);\n        if (!currentNodeIsContaining && computedStyle.position === \"fixed\") {\n            currentContainingBlockComputedStyle = null;\n        }\n        const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === \"static\" && !!currentContainingBlockComputedStyle && [\n            \"absolute\",\n            \"fixed\"\n        ].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n        if (shouldDropCurrentNode) {\n            result = result.filter((ancestor)=>ancestor !== currentNode);\n        } else {\n            currentContainingBlockComputedStyle = computedStyle;\n        }\n        currentNode = getParentNode(currentNode);\n    }\n    cache2.set(element, result);\n    return result;\n}\nfunction getClippingRect(_ref) {\n    let { element, boundary, rootBoundary, strategy } = _ref;\n    const elementClippingAncestors = boundary === \"clippingAncestors\" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);\n    const clippingAncestors = [\n        ...elementClippingAncestors,\n        rootBoundary\n    ];\n    const firstClippingAncestor = clippingAncestors[0];\n    const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor)=>{\n        const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n        accRect.top = max(rect.top, accRect.top);\n        accRect.right = min(rect.right, accRect.right);\n        accRect.bottom = min(rect.bottom, accRect.bottom);\n        accRect.left = max(rect.left, accRect.left);\n        return accRect;\n    }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n    return {\n        width: clippingRect.right - clippingRect.left,\n        height: clippingRect.bottom - clippingRect.top,\n        x: clippingRect.left,\n        y: clippingRect.top\n    };\n}\nfunction getDimensions(element) {\n    const { width, height } = getCssDimensions(element);\n    return {\n        width,\n        height\n    };\n}\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n    const isOffsetParentAnElement = isHTMLElement(offsetParent);\n    const documentElement = getDocumentElement(offsetParent);\n    const isFixed = strategy === \"fixed\";\n    const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n    let scroll = {\n        scrollLeft: 0,\n        scrollTop: 0\n    };\n    const offsets = createCoords(0);\n    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n        if (getNodeName(offsetParent) !== \"body\" || isOverflowElement(documentElement)) {\n            scroll = getNodeScroll(offsetParent);\n        }\n        if (isOffsetParentAnElement) {\n            const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n            offsets.x = offsetRect.x + offsetParent.clientLeft;\n            offsets.y = offsetRect.y + offsetParent.clientTop;\n        } else if (documentElement) {\n            offsets.x = getWindowScrollBarX(documentElement);\n        }\n    }\n    const x = rect.left + scroll.scrollLeft - offsets.x;\n    const y = rect.top + scroll.scrollTop - offsets.y;\n    return {\n        x,\n        y,\n        width: rect.width,\n        height: rect.height\n    };\n}\nfunction isStaticPositioned(element) {\n    return getComputedStyle2(element).position === \"static\";\n}\nfunction getTrueOffsetParent(element, polyfill) {\n    if (!isHTMLElement(element) || getComputedStyle2(element).position === \"fixed\") {\n        return null;\n    }\n    if (polyfill) {\n        return polyfill(element);\n    }\n    return element.offsetParent;\n}\nfunction getOffsetParent(element, polyfill) {\n    const win = getWindow2(element);\n    if (isTopLayer(element)) {\n        return win;\n    }\n    if (!isHTMLElement(element)) {\n        let svgOffsetParent = getParentNode(element);\n        while(svgOffsetParent && !isLastTraversableNode(svgOffsetParent)){\n            if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {\n                return svgOffsetParent;\n            }\n            svgOffsetParent = getParentNode(svgOffsetParent);\n        }\n        return win;\n    }\n    let offsetParent = getTrueOffsetParent(element, polyfill);\n    while(offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)){\n        offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n    }\n    if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {\n        return win;\n    }\n    return offsetParent || getContainingBlock(element) || win;\n}\nvar getElementRects = async function(data) {\n    const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n    const getDimensionsFn = this.getDimensions;\n    const floatingDimensions = await getDimensionsFn(data.floating);\n    return {\n        reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),\n        floating: {\n            x: 0,\n            y: 0,\n            width: floatingDimensions.width,\n            height: floatingDimensions.height\n        }\n    };\n};\nfunction isRTL2(element) {\n    return getComputedStyle2(element).direction === \"rtl\";\n}\nvar platform = {\n    convertOffsetParentRelativeRectToViewportRelativeRect,\n    getDocumentElement,\n    getClippingRect,\n    getOffsetParent,\n    getElementRects,\n    getClientRects,\n    getDimensions,\n    getScale,\n    isElement,\n    isRTL: isRTL2\n};\nfunction observeMove(element, onMove) {\n    let io = null;\n    let timeoutId;\n    const root = getDocumentElement(element);\n    function cleanup() {\n        var _io;\n        clearTimeout(timeoutId);\n        (_io = io) == null || _io.disconnect();\n        io = null;\n    }\n    function refresh(skip, threshold) {\n        if (skip === void 0) {\n            skip = false;\n        }\n        if (threshold === void 0) {\n            threshold = 1;\n        }\n        cleanup();\n        const { left, top, width, height } = element.getBoundingClientRect();\n        if (!skip) {\n            onMove();\n        }\n        if (!width || !height) {\n            return;\n        }\n        const insetTop = floor(top);\n        const insetRight = floor(root.clientWidth - (left + width));\n        const insetBottom = floor(root.clientHeight - (top + height));\n        const insetLeft = floor(left);\n        const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n        const options = {\n            rootMargin,\n            threshold: max(0, min(1, threshold)) || 1\n        };\n        let isFirstUpdate = true;\n        function handleObserve(entries2) {\n            const ratio = entries2[0].intersectionRatio;\n            if (ratio !== threshold) {\n                if (!isFirstUpdate) {\n                    return refresh();\n                }\n                if (!ratio) {\n                    timeoutId = setTimeout(()=>{\n                        refresh(false, 1e-7);\n                    }, 1e3);\n                } else {\n                    refresh(false, ratio);\n                }\n            }\n            isFirstUpdate = false;\n        }\n        try {\n            io = new IntersectionObserver(handleObserve, {\n                ...options,\n                // Handle <iframe>s\n                root: root.ownerDocument\n            });\n        } catch (e2) {\n            io = new IntersectionObserver(handleObserve, options);\n        }\n        io.observe(element);\n    }\n    refresh(true);\n    return cleanup;\n}\nfunction autoUpdate(reference, floating, update, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    const { ancestorScroll = true, ancestorResize = true, elementResize = typeof ResizeObserver === \"function\", layoutShift = typeof IntersectionObserver === \"function\", animationFrame = false } = options;\n    const referenceEl = unwrapElement(reference);\n    const ancestors = ancestorScroll || ancestorResize ? [\n        ...referenceEl ? getOverflowAncestors(referenceEl) : [],\n        ...getOverflowAncestors(floating)\n    ] : [];\n    ancestors.forEach((ancestor)=>{\n        ancestorScroll && ancestor.addEventListener(\"scroll\", update, {\n            passive: true\n        });\n        ancestorResize && ancestor.addEventListener(\"resize\", update);\n    });\n    const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n    let reobserveFrame = -1;\n    let resizeObserver = null;\n    if (elementResize) {\n        resizeObserver = new ResizeObserver((_ref)=>{\n            let [firstEntry] = _ref;\n            if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n                resizeObserver.unobserve(floating);\n                cancelAnimationFrame(reobserveFrame);\n                reobserveFrame = requestAnimationFrame(()=>{\n                    var _resizeObserver;\n                    (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);\n                });\n            }\n            update();\n        });\n        if (referenceEl && !animationFrame) {\n            resizeObserver.observe(referenceEl);\n        }\n        resizeObserver.observe(floating);\n    }\n    let frameId;\n    let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n    if (animationFrame) {\n        frameLoop();\n    }\n    function frameLoop() {\n        const nextRefRect = getBoundingClientRect(reference);\n        if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {\n            update();\n        }\n        prevRefRect = nextRefRect;\n        frameId = requestAnimationFrame(frameLoop);\n    }\n    update();\n    return ()=>{\n        var _resizeObserver2;\n        ancestors.forEach((ancestor)=>{\n            ancestorScroll && ancestor.removeEventListener(\"scroll\", update);\n            ancestorResize && ancestor.removeEventListener(\"resize\", update);\n        });\n        cleanupIo == null || cleanupIo();\n        (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();\n        resizeObserver = null;\n        if (animationFrame) {\n            cancelAnimationFrame(frameId);\n        }\n    };\n}\nvar offset2 = offset;\nvar shift2 = shift;\nvar flip2 = flip;\nvar size2 = size;\nvar hide2 = hide;\nvar arrow2 = arrow;\nvar computePosition2 = (reference, floating, options)=>{\n    const cache2 = /* @__PURE__ */ new Map();\n    const mergedOptions = {\n        platform,\n        ...options\n    };\n    const platformWithCache = {\n        ...mergedOptions.platform,\n        _c: cache2\n    };\n    return computePosition(reference, floating, {\n        ...mergedOptions,\n        platform: platformWithCache\n    });\n};\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/4X2EKUJ3.js\nvar PopperContext = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction usePopperContext() {\n    const context = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(PopperContext);\n    if (context === void 0) {\n        throw new Error(\"[kobalte]: `usePopperContext` must be used within a `Popper` component\");\n    }\n    return context;\n}\nvar _tmpl$ = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg display=\"block\" viewBox=\"0 0 30 30\" style=\"transform:scale(1.02)\"><g><path fill=\"none\" d=\"M23,27.8c1.1,1.2,3.4,2.2,5,2.2h2H0h2c1.7,0,3.9-1,5-2.2l6.6-7.2c0.7-0.8,2-0.8,2.7,0L23,27.8L23,27.8z\"></path><path stroke=\"none\" d=\"M23,27.8c1.1,1.2,3.4,2.2,5,2.2h2H0h2c1.7,0,3.9-1,5-2.2l6.6-7.2c0.7-0.8,2-0.8,2.7,0L23,27.8L23,27.8z\">`);\nvar DEFAULT_SIZE = 30;\nvar HALF_DEFAULT_SIZE = DEFAULT_SIZE / 2;\nvar ROTATION_DEG = {\n    top: 180,\n    right: -90,\n    bottom: 0,\n    left: 90\n};\nfunction PopperArrow(props) {\n    const context = usePopperContext();\n    const mergedProps = mergeDefaultProps({\n        size: DEFAULT_SIZE\n    }, props);\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(mergedProps, [\n        \"ref\",\n        \"style\",\n        \"size\"\n    ]);\n    const dir = ()=>context.currentPlacement().split(\"-\")[0];\n    const contentStyle = createComputedStyle(context.contentRef);\n    const fill = ()=>contentStyle()?.getPropertyValue(\"background-color\") || \"none\";\n    const stroke = ()=>contentStyle()?.getPropertyValue(`border-${dir()}-color`) || \"none\";\n    const borderWidth = ()=>contentStyle()?.getPropertyValue(`border-${dir()}-width`) || \"0px\";\n    const strokeWidth = ()=>{\n        return Number.parseInt(borderWidth()) * 2 * (DEFAULT_SIZE / local.size);\n    };\n    const rotate = ()=>{\n        return `rotate(${ROTATION_DEG[dir()]} ${HALF_DEFAULT_SIZE} ${HALF_DEFAULT_SIZE}) translate(0 2)`;\n    };\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"div\",\n        ref (r$) {\n            const _ref$ = mergeRefs(context.setArrowRef, local.ref);\n            typeof _ref$ === \"function\" && _ref$(r$);\n        },\n        \"aria-hidden\": \"true\",\n        get style () {\n            return combineStyle({\n                // server side rendering\n                position: \"absolute\",\n                \"font-size\": `${local.size}px`,\n                width: \"1em\",\n                height: \"1em\",\n                \"pointer-events\": \"none\",\n                fill: fill(),\n                stroke: stroke(),\n                \"stroke-width\": strokeWidth()\n            }, local.style);\n        }\n    }, others, {\n        get children () {\n            const _el$ = _tmpl$(), _el$2 = _el$.firstChild;\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$2, \"transform\", rotate()));\n            return _el$;\n        }\n    }));\n}\nfunction createComputedStyle(element) {\n    const [style, setStyle] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        const el = element();\n        el && setStyle(getWindow(el).getComputedStyle(el));\n    });\n    return style;\n}\nfunction PopperPositioner(props) {\n    const context = usePopperContext();\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"ref\",\n        \"style\"\n    ]);\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"div\",\n        ref (r$) {\n            const _ref$ = mergeRefs(context.setPositionerRef, local.ref);\n            typeof _ref$ === \"function\" && _ref$(r$);\n        },\n        \"data-popper-positioner\": \"\",\n        get style () {\n            return combineStyle({\n                position: \"absolute\",\n                top: 0,\n                left: 0,\n                \"min-width\": \"max-content\"\n            }, local.style);\n        }\n    }, others));\n}\nfunction createDOMRect(anchorRect) {\n    const { x = 0, y = 0, width = 0, height = 0 } = anchorRect ?? {};\n    if (typeof DOMRect === \"function\") {\n        return new DOMRect(x, y, width, height);\n    }\n    const rect = {\n        x,\n        y,\n        width,\n        height,\n        top: y,\n        right: x + width,\n        bottom: y + height,\n        left: x\n    };\n    return {\n        ...rect,\n        toJSON: ()=>rect\n    };\n}\nfunction getAnchorElement(anchor, getAnchorRect) {\n    const contextElement = anchor;\n    return {\n        contextElement,\n        getBoundingClientRect: ()=>{\n            const anchorRect = getAnchorRect(anchor);\n            if (anchorRect) {\n                return createDOMRect(anchorRect);\n            }\n            if (anchor) {\n                return anchor.getBoundingClientRect();\n            }\n            return createDOMRect();\n        }\n    };\n}\nfunction isValidPlacement(flip22) {\n    return /^(?:top|bottom|left|right)(?:-(?:start|end))?$/.test(flip22);\n}\nvar REVERSE_BASE_PLACEMENT = {\n    top: \"bottom\",\n    right: \"left\",\n    bottom: \"top\",\n    left: \"right\"\n};\nfunction getTransformOrigin(placement, readingDirection) {\n    const [basePlacement, alignment] = placement.split(\"-\");\n    const reversePlacement = REVERSE_BASE_PLACEMENT[basePlacement];\n    if (!alignment) {\n        return `${reversePlacement} center`;\n    }\n    if (basePlacement === \"left\" || basePlacement === \"right\") {\n        return `${reversePlacement} ${alignment === \"start\" ? \"top\" : \"bottom\"}`;\n    }\n    if (alignment === \"start\") {\n        return `${reversePlacement} ${readingDirection === \"rtl\" ? \"right\" : \"left\"}`;\n    }\n    return `${reversePlacement} ${readingDirection === \"rtl\" ? \"left\" : \"right\"}`;\n}\nfunction PopperRoot(props) {\n    const mergedProps = mergeDefaultProps({\n        getAnchorRect: (anchor)=>anchor?.getBoundingClientRect(),\n        placement: \"bottom\",\n        gutter: 0,\n        shift: 0,\n        flip: true,\n        slide: true,\n        overlap: false,\n        sameWidth: false,\n        fitViewport: false,\n        hideWhenDetached: false,\n        detachedPadding: 0,\n        arrowPadding: 4,\n        overflowPadding: 8\n    }, props);\n    const [positionerRef, setPositionerRef] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [arrowRef, setArrowRef] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [currentPlacement, setCurrentPlacement] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(mergedProps.placement);\n    const anchorRef = ()=>getAnchorElement(mergedProps.anchorRef?.(), mergedProps.getAnchorRect);\n    const { direction } = useLocale();\n    async function updatePosition() {\n        const referenceEl = anchorRef();\n        const floatingEl = positionerRef();\n        const arrowEl = arrowRef();\n        if (!referenceEl || !floatingEl) {\n            return;\n        }\n        const arrowOffset = (arrowEl?.clientHeight || 0) / 2;\n        const finalGutter = typeof mergedProps.gutter === \"number\" ? mergedProps.gutter + arrowOffset : mergedProps.gutter ?? arrowOffset;\n        floatingEl.style.setProperty(\"--kb-popper-content-overflow-padding\", `${mergedProps.overflowPadding}px`);\n        referenceEl.getBoundingClientRect();\n        const middleware = [\n            // https://floating-ui.com/docs/offset\n            offset2(({ placement })=>{\n                const hasAlignment = !!placement.split(\"-\")[1];\n                return {\n                    mainAxis: finalGutter,\n                    crossAxis: !hasAlignment ? mergedProps.shift : void 0,\n                    alignmentAxis: mergedProps.shift\n                };\n            })\n        ];\n        if (mergedProps.flip !== false) {\n            const fallbackPlacements = typeof mergedProps.flip === \"string\" ? mergedProps.flip.split(\" \") : void 0;\n            if (fallbackPlacements !== void 0 && !fallbackPlacements.every(isValidPlacement)) {\n                throw new Error(\"`flip` expects a spaced-delimited list of placements\");\n            }\n            middleware.push(flip2({\n                padding: mergedProps.overflowPadding,\n                fallbackPlacements\n            }));\n        }\n        if (mergedProps.slide || mergedProps.overlap) {\n            middleware.push(shift2({\n                mainAxis: mergedProps.slide,\n                crossAxis: mergedProps.overlap,\n                padding: mergedProps.overflowPadding\n            }));\n        }\n        middleware.push(size2({\n            padding: mergedProps.overflowPadding,\n            apply ({ availableWidth, availableHeight, rects }) {\n                const referenceWidth = Math.round(rects.reference.width);\n                availableWidth = Math.floor(availableWidth);\n                availableHeight = Math.floor(availableHeight);\n                floatingEl.style.setProperty(\"--kb-popper-anchor-width\", `${referenceWidth}px`);\n                floatingEl.style.setProperty(\"--kb-popper-content-available-width\", `${availableWidth}px`);\n                floatingEl.style.setProperty(\"--kb-popper-content-available-height\", `${availableHeight}px`);\n                if (mergedProps.sameWidth) {\n                    floatingEl.style.width = `${referenceWidth}px`;\n                }\n                if (mergedProps.fitViewport) {\n                    floatingEl.style.maxWidth = `${availableWidth}px`;\n                    floatingEl.style.maxHeight = `${availableHeight}px`;\n                }\n            }\n        }));\n        if (mergedProps.hideWhenDetached) {\n            middleware.push(hide2({\n                padding: mergedProps.detachedPadding\n            }));\n        }\n        if (arrowEl) {\n            middleware.push(arrow2({\n                element: arrowEl,\n                padding: mergedProps.arrowPadding\n            }));\n        }\n        const pos = await computePosition2(referenceEl, floatingEl, {\n            placement: mergedProps.placement,\n            strategy: \"absolute\",\n            middleware,\n            platform: {\n                ...platform,\n                isRTL: ()=>direction() === \"rtl\"\n            }\n        });\n        setCurrentPlacement(pos.placement);\n        mergedProps.onCurrentPlacementChange?.(pos.placement);\n        if (!floatingEl) {\n            return;\n        }\n        floatingEl.style.setProperty(\"--kb-popper-content-transform-origin\", getTransformOrigin(pos.placement, direction()));\n        const x = Math.round(pos.x);\n        const y = Math.round(pos.y);\n        let visibility;\n        if (mergedProps.hideWhenDetached) {\n            visibility = pos.middlewareData.hide?.referenceHidden ? \"hidden\" : \"visible\";\n        }\n        Object.assign(floatingEl.style, {\n            top: \"0\",\n            left: \"0\",\n            transform: `translate3d(${x}px, ${y}px, 0)`,\n            visibility\n        });\n        if (arrowEl && pos.middlewareData.arrow) {\n            const { x: arrowX, y: arrowY } = pos.middlewareData.arrow;\n            const dir = pos.placement.split(\"-\")[0];\n            Object.assign(arrowEl.style, {\n                left: arrowX != null ? `${arrowX}px` : \"\",\n                top: arrowY != null ? `${arrowY}px` : \"\",\n                [dir]: \"100%\"\n            });\n        }\n    }\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        const referenceEl = anchorRef();\n        const floatingEl = positionerRef();\n        if (!referenceEl || !floatingEl) {\n            return;\n        }\n        const cleanupAutoUpdate = autoUpdate(referenceEl, floatingEl, updatePosition, {\n            // JSDOM doesn't support ResizeObserver\n            elementResize: typeof ResizeObserver === \"function\"\n        });\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(cleanupAutoUpdate);\n    });\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        const positioner = positionerRef();\n        const content = mergedProps.contentRef?.();\n        if (!positioner || !content) {\n            return;\n        }\n        queueMicrotask(()=>{\n            positioner.style.zIndex = getComputedStyle(content).zIndex;\n        });\n    });\n    const context = {\n        currentPlacement,\n        contentRef: ()=>mergedProps.contentRef?.(),\n        setPositionerRef,\n        setArrowRef\n    };\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(PopperContext.Provider, {\n        value: context,\n        get children () {\n            return mergedProps.children;\n        }\n    });\n}\nvar Popper = Object.assign(PopperRoot, {\n    Arrow: PopperArrow,\n    Context: PopperContext,\n    usePopperContext,\n    Positioner: PopperPositioner\n});\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/QEMPLYZX.js\nfunction createEscapeKeyDown(props) {\n    const handleKeyDown = (event)=>{\n        if (event.key === EventKey.Escape) {\n            props.onEscapeKeyDown?.(event);\n        }\n    };\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.isServer) {\n            return;\n        }\n        if (access(props.isDisabled)) {\n            return;\n        }\n        const document2 = props.ownerDocument?.() ?? getDocument();\n        document2.addEventListener(\"keydown\", handleKeyDown);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            document2.removeEventListener(\"keydown\", handleKeyDown);\n        });\n    });\n}\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/QGCMYLTA.js\nvar POINTER_DOWN_OUTSIDE_EVENT = \"interactOutside.pointerDownOutside\";\nvar FOCUS_OUTSIDE_EVENT = \"interactOutside.focusOutside\";\nfunction createInteractOutside(props, ref) {\n    let pointerDownTimeoutId;\n    let clickHandler = noop3;\n    const ownerDocument = ()=>getDocument(ref());\n    const onPointerDownOutside = (e2)=>props.onPointerDownOutside?.(e2);\n    const onFocusOutside = (e2)=>props.onFocusOutside?.(e2);\n    const onInteractOutside = (e2)=>props.onInteractOutside?.(e2);\n    const isEventOutside = (e2)=>{\n        const target = e2.target;\n        if (!(target instanceof HTMLElement)) {\n            return false;\n        }\n        if (target.closest(`[${DATA_TOP_LAYER_ATTR}]`)) {\n            return false;\n        }\n        if (!contains(ownerDocument(), target)) {\n            return false;\n        }\n        if (contains(ref(), target)) {\n            return false;\n        }\n        return !props.shouldExcludeElement?.(target);\n    };\n    const onPointerDown = (e2)=>{\n        function handler() {\n            const container = ref();\n            const target = e2.target;\n            if (!container || !target || !isEventOutside(e2)) {\n                return;\n            }\n            const handler2 = composeEventHandlers([\n                onPointerDownOutside,\n                onInteractOutside\n            ]);\n            target.addEventListener(POINTER_DOWN_OUTSIDE_EVENT, handler2, {\n                once: true\n            });\n            const pointerDownOutsideEvent = new CustomEvent(POINTER_DOWN_OUTSIDE_EVENT, {\n                bubbles: false,\n                cancelable: true,\n                detail: {\n                    originalEvent: e2,\n                    isContextMenu: e2.button === 2 || isCtrlKey(e2) && e2.button === 0\n                }\n            });\n            target.dispatchEvent(pointerDownOutsideEvent);\n        }\n        if (e2.pointerType === \"touch\") {\n            ownerDocument().removeEventListener(\"click\", handler);\n            clickHandler = handler;\n            ownerDocument().addEventListener(\"click\", handler, {\n                once: true\n            });\n        } else {\n            handler();\n        }\n    };\n    const onFocusIn = (e2)=>{\n        const container = ref();\n        const target = e2.target;\n        if (!container || !target || !isEventOutside(e2)) {\n            return;\n        }\n        const handler = composeEventHandlers([\n            onFocusOutside,\n            onInteractOutside\n        ]);\n        target.addEventListener(FOCUS_OUTSIDE_EVENT, handler, {\n            once: true\n        });\n        const focusOutsideEvent = new CustomEvent(FOCUS_OUTSIDE_EVENT, {\n            bubbles: false,\n            cancelable: true,\n            detail: {\n                originalEvent: e2,\n                isContextMenu: false\n            }\n        });\n        target.dispatchEvent(focusOutsideEvent);\n    };\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.isServer) {\n            return;\n        }\n        if (access(props.isDisabled)) {\n            return;\n        }\n        pointerDownTimeoutId = window.setTimeout(()=>{\n            ownerDocument().addEventListener(\"pointerdown\", onPointerDown, true);\n        }, 0);\n        ownerDocument().addEventListener(\"focusin\", onFocusIn, true);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            window.clearTimeout(pointerDownTimeoutId);\n            ownerDocument().removeEventListener(\"click\", clickHandler);\n            ownerDocument().removeEventListener(\"pointerdown\", onPointerDown, true);\n            ownerDocument().removeEventListener(\"focusin\", onFocusIn, true);\n        });\n    });\n}\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/G7G3PFRJ.js\nvar DismissableLayerContext = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction useOptionalDismissableLayerContext() {\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(DismissableLayerContext);\n}\nfunction DismissableLayer(props) {\n    let ref;\n    const parentContext = useOptionalDismissableLayerContext();\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"ref\",\n        \"disableOutsidePointerEvents\",\n        \"excludedElements\",\n        \"onEscapeKeyDown\",\n        \"onPointerDownOutside\",\n        \"onFocusOutside\",\n        \"onInteractOutside\",\n        \"onDismiss\",\n        \"bypassTopMostLayerCheck\"\n    ]);\n    const nestedLayers = /* @__PURE__ */ new Set([]);\n    const registerNestedLayer = (element)=>{\n        nestedLayers.add(element);\n        const parentUnregister = parentContext?.registerNestedLayer(element);\n        return ()=>{\n            nestedLayers.delete(element);\n            parentUnregister?.();\n        };\n    };\n    const shouldExcludeElement = (element)=>{\n        if (!ref) {\n            return false;\n        }\n        return local.excludedElements?.some((node)=>contains(node(), element)) || [\n            ...nestedLayers\n        ].some((layer)=>contains(layer, element));\n    };\n    const onPointerDownOutside = (e2)=>{\n        if (!ref || layerStack.isBelowPointerBlockingLayer(ref)) {\n            return;\n        }\n        if (!local.bypassTopMostLayerCheck && !layerStack.isTopMostLayer(ref)) {\n            return;\n        }\n        local.onPointerDownOutside?.(e2);\n        local.onInteractOutside?.(e2);\n        if (!e2.defaultPrevented) {\n            local.onDismiss?.();\n        }\n    };\n    const onFocusOutside = (e2)=>{\n        local.onFocusOutside?.(e2);\n        local.onInteractOutside?.(e2);\n        if (!e2.defaultPrevented) {\n            local.onDismiss?.();\n        }\n    };\n    createInteractOutside({\n        shouldExcludeElement,\n        onPointerDownOutside,\n        onFocusOutside\n    }, ()=>ref);\n    createEscapeKeyDown({\n        ownerDocument: ()=>getDocument(ref),\n        onEscapeKeyDown: (e2)=>{\n            if (!ref || !layerStack.isTopMostLayer(ref)) {\n                return;\n            }\n            local.onEscapeKeyDown?.(e2);\n            if (!e2.defaultPrevented && local.onDismiss) {\n                e2.preventDefault();\n                local.onDismiss();\n            }\n        }\n    });\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onMount)(()=>{\n        if (!ref) {\n            return;\n        }\n        layerStack.addLayer({\n            node: ref,\n            isPointerBlocking: local.disableOutsidePointerEvents,\n            dismiss: local.onDismiss\n        });\n        const unregisterFromParentLayer = parentContext?.registerNestedLayer(ref);\n        layerStack.assignPointerEventToLayers();\n        layerStack.disableBodyPointerEvents(ref);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            if (!ref) {\n                return;\n            }\n            layerStack.removeLayer(ref);\n            unregisterFromParentLayer?.();\n            layerStack.assignPointerEventToLayers();\n            layerStack.restoreBodyPointerEvents(ref);\n        });\n    });\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)((0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.on)([\n        ()=>ref,\n        ()=>local.disableOutsidePointerEvents\n    ], ([ref2, disableOutsidePointerEvents])=>{\n        if (!ref2) {\n            return;\n        }\n        const layer = layerStack.find(ref2);\n        if (layer && layer.isPointerBlocking !== disableOutsidePointerEvents) {\n            layer.isPointerBlocking = disableOutsidePointerEvents;\n            layerStack.assignPointerEventToLayers();\n        }\n        if (disableOutsidePointerEvents) {\n            layerStack.disableBodyPointerEvents(ref2);\n        }\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            layerStack.restoreBodyPointerEvents(ref2);\n        });\n    }, {\n        defer: true\n    }));\n    const context = {\n        registerNestedLayer\n    };\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(DismissableLayerContext.Provider, {\n        value: context,\n        get children () {\n            return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n                as: \"div\",\n                ref (r$) {\n                    const _ref$ = mergeRefs((el)=>ref = el, local.ref);\n                    typeof _ref$ === \"function\" && _ref$(r$);\n                }\n            }, others));\n        }\n    });\n}\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/7LCANGHD.js\nfunction createDisclosureState(props = {}) {\n    const [isOpen, setIsOpen] = createControllableBooleanSignal({\n        value: ()=>access(props.open),\n        defaultValue: ()=>!!access(props.defaultOpen),\n        onChange: (value)=>props.onOpenChange?.(value)\n    });\n    const open = ()=>{\n        setIsOpen(true);\n    };\n    const close = ()=>{\n        setIsOpen(false);\n    };\n    const toggle = ()=>{\n        isOpen() ? close() : open();\n    };\n    return {\n        isOpen,\n        setIsOpen,\n        open,\n        close,\n        toggle\n    };\n}\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/Q2BOFK7I.js\nvar radio_group_exports = {};\n__export(radio_group_exports, {\n    Description: ()=>FormControlDescription,\n    ErrorMessage: ()=>FormControlErrorMessage,\n    Item: ()=>RadioGroupItem,\n    ItemControl: ()=>RadioGroupItemControl,\n    ItemDescription: ()=>RadioGroupItemDescription,\n    ItemIndicator: ()=>RadioGroupItemIndicator,\n    ItemInput: ()=>RadioGroupItemInput,\n    ItemLabel: ()=>RadioGroupItemLabel,\n    Label: ()=>RadioGroupLabel,\n    RadioGroup: ()=>RadioGroup,\n    Root: ()=>RadioGroupRoot\n});\nvar RadioGroupContext = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction useRadioGroupContext() {\n    const context = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(RadioGroupContext);\n    if (context === void 0) {\n        throw new Error(\"[kobalte]: `useRadioGroupContext` must be used within a `RadioGroup` component\");\n    }\n    return context;\n}\nvar RadioGroupItemContext = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction useRadioGroupItemContext() {\n    const context = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(RadioGroupItemContext);\n    if (context === void 0) {\n        throw new Error(\"[kobalte]: `useRadioGroupItemContext` must be used within a `RadioGroup.Item` component\");\n    }\n    return context;\n}\nfunction RadioGroupItem(props) {\n    const formControlContext = useFormControlContext();\n    const radioGroupContext = useRadioGroupContext();\n    const defaultId = `${formControlContext.generateId(\"item\")}-${(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createUniqueId)()}`;\n    const mergedProps = mergeDefaultProps({\n        id: defaultId\n    }, props);\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(mergedProps, [\n        \"value\",\n        \"disabled\",\n        \"onPointerDown\"\n    ]);\n    const [inputId, setInputId] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [labelId, setLabelId] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [descriptionId, setDescriptionId] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [inputRef, setInputRef] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [isFocused, setIsFocused] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(false);\n    const isSelected = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return radioGroupContext.isSelectedValue(local.value);\n    });\n    const isDisabled = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return local.disabled || formControlContext.isDisabled() || false;\n    });\n    const onPointerDown = (e2)=>{\n        callHandler(e2, local.onPointerDown);\n        if (isFocused()) {\n            e2.preventDefault();\n        }\n    };\n    const dataset = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>({\n            ...formControlContext.dataset(),\n            \"data-disabled\": isDisabled() ? \"\" : void 0,\n            \"data-checked\": isSelected() ? \"\" : void 0\n        }));\n    const context = {\n        value: ()=>local.value,\n        dataset,\n        isSelected,\n        isDisabled,\n        inputId,\n        labelId,\n        descriptionId,\n        inputRef,\n        select: ()=>radioGroupContext.setSelectedValue(local.value),\n        generateId: createGenerateId(()=>others.id),\n        registerInput: createRegisterId(setInputId),\n        registerLabel: createRegisterId(setLabelId),\n        registerDescription: createRegisterId(setDescriptionId),\n        setIsFocused,\n        setInputRef\n    };\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(RadioGroupItemContext.Provider, {\n        value: context,\n        get children () {\n            return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n                as: \"div\",\n                role: \"group\",\n                onPointerDown\n            }, dataset, others));\n        }\n    });\n}\nfunction RadioGroupItemControl(props) {\n    const context = useRadioGroupItemContext();\n    const mergedProps = mergeDefaultProps({\n        id: context.generateId(\"control\")\n    }, props);\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(mergedProps, [\n        \"onClick\",\n        \"onKeyDown\"\n    ]);\n    const onClick = (e2)=>{\n        callHandler(e2, local.onClick);\n        context.select();\n        context.inputRef()?.focus();\n    };\n    const onKeyDown = (e2)=>{\n        callHandler(e2, local.onKeyDown);\n        if (e2.key === EventKey.Space) {\n            context.select();\n            context.inputRef()?.focus();\n        }\n    };\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"div\",\n        onClick,\n        onKeyDown\n    }, ()=>context.dataset(), others));\n}\nfunction RadioGroupItemDescription(props) {\n    const context = useRadioGroupItemContext();\n    const mergedProps = mergeDefaultProps({\n        id: context.generateId(\"description\")\n    }, props);\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(context.registerDescription(mergedProps.id)));\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"div\"\n    }, ()=>context.dataset(), mergedProps));\n}\nfunction RadioGroupItemIndicator(props) {\n    const context = useRadioGroupItemContext();\n    const mergedProps = mergeDefaultProps({\n        id: context.generateId(\"indicator\")\n    }, props);\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(mergedProps, [\n        \"ref\",\n        \"forceMount\"\n    ]);\n    const [ref, setRef] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const { present } = src_default({\n        show: ()=>local.forceMount || context.isSelected(),\n        element: ()=>ref() ?? null\n    });\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n        get when () {\n            return present();\n        },\n        get children () {\n            return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n                as: \"div\",\n                ref (r$) {\n                    const _ref$ = mergeRefs(setRef, local.ref);\n                    typeof _ref$ === \"function\" && _ref$(r$);\n                }\n            }, ()=>context.dataset(), others));\n        }\n    });\n}\nfunction RadioGroupItemInput(props) {\n    const formControlContext = useFormControlContext();\n    const radioGroupContext = useRadioGroupContext();\n    const radioContext = useRadioGroupItemContext();\n    const mergedProps = mergeDefaultProps({\n        id: radioContext.generateId(\"input\")\n    }, props);\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(mergedProps, [\n        \"ref\",\n        \"style\",\n        \"aria-labelledby\",\n        \"aria-describedby\",\n        \"onChange\",\n        \"onFocus\",\n        \"onBlur\"\n    ]);\n    const ariaLabelledBy = ()=>{\n        return [\n            local[\"aria-labelledby\"],\n            radioContext.labelId(),\n            // If there is both an aria-label and aria-labelledby, add the input itself has an aria-labelledby\n            local[\"aria-labelledby\"] != null && others[\"aria-label\"] != null ? others.id : void 0\n        ].filter(Boolean).join(\" \") || void 0;\n    };\n    const ariaDescribedBy = ()=>{\n        return [\n            local[\"aria-describedby\"],\n            radioContext.descriptionId(),\n            radioGroupContext.ariaDescribedBy()\n        ].filter(Boolean).join(\" \") || void 0;\n    };\n    const [isInternalChangeEvent, setIsInternalChangeEvent] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(false);\n    const onChange = (e2)=>{\n        callHandler(e2, local.onChange);\n        e2.stopPropagation();\n        if (!isInternalChangeEvent()) {\n            radioGroupContext.setSelectedValue(radioContext.value());\n            const target = e2.target;\n            target.checked = radioContext.isSelected();\n        }\n        setIsInternalChangeEvent(false);\n    };\n    const onFocus = (e2)=>{\n        callHandler(e2, local.onFocus);\n        radioContext.setIsFocused(true);\n    };\n    const onBlur = (e2)=>{\n        callHandler(e2, local.onBlur);\n        radioContext.setIsFocused(false);\n    };\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)((0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.on)([\n        ()=>radioContext.isSelected(),\n        ()=>radioContext.value()\n    ], (c2)=>{\n        if (!c2[0] && c2[1] === radioContext.value()) return;\n        setIsInternalChangeEvent(true);\n        const ref = radioContext.inputRef();\n        ref?.dispatchEvent(new Event(\"input\", {\n            bubbles: true,\n            cancelable: true\n        }));\n        ref?.dispatchEvent(new Event(\"change\", {\n            bubbles: true,\n            cancelable: true\n        }));\n    }, {\n        defer: true\n    }));\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(radioContext.registerInput(others.id)));\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"input\",\n        ref (r$) {\n            const _ref$ = mergeRefs(radioContext.setInputRef, local.ref);\n            typeof _ref$ === \"function\" && _ref$(r$);\n        },\n        type: \"radio\",\n        get name () {\n            return formControlContext.name();\n        },\n        get value () {\n            return radioContext.value();\n        },\n        get checked () {\n            return radioContext.isSelected();\n        },\n        get required () {\n            return formControlContext.isRequired();\n        },\n        get disabled () {\n            return radioContext.isDisabled();\n        },\n        get readonly () {\n            return formControlContext.isReadOnly();\n        },\n        get style () {\n            return combineStyle({\n                ...visuallyHiddenStyles\n            }, local.style);\n        },\n        get [\"aria-labelledby\"] () {\n            return ariaLabelledBy();\n        },\n        get [\"aria-describedby\"] () {\n            return ariaDescribedBy();\n        },\n        onChange,\n        onFocus,\n        onBlur\n    }, ()=>radioContext.dataset(), others));\n}\nfunction RadioGroupItemLabel(props) {\n    const context = useRadioGroupItemContext();\n    const mergedProps = mergeDefaultProps({\n        id: context.generateId(\"label\")\n    }, props);\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(context.registerLabel(mergedProps.id)));\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"label\",\n        get [\"for\"] () {\n            return context.inputId();\n        }\n    }, ()=>context.dataset(), mergedProps));\n}\nfunction RadioGroupLabel(props) {\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(FormControlLabel, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"span\"\n    }, props));\n}\nfunction RadioGroupRoot(props) {\n    let ref;\n    const defaultId = `radiogroup-${(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createUniqueId)()}`;\n    const mergedProps = mergeDefaultProps({\n        id: defaultId,\n        orientation: \"vertical\"\n    }, props);\n    const [local, formControlProps, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(mergedProps, [\n        \"ref\",\n        \"value\",\n        \"defaultValue\",\n        \"onChange\",\n        \"orientation\",\n        \"aria-labelledby\",\n        \"aria-describedby\"\n    ], FORM_CONTROL_PROP_NAMES);\n    const [selected, setSelected] = createControllableSignal({\n        value: ()=>local.value,\n        defaultValue: ()=>local.defaultValue,\n        onChange: (value)=>local.onChange?.(value)\n    });\n    const { formControlContext } = createFormControl(formControlProps);\n    createFormResetListener(()=>ref, ()=>setSelected(local.defaultValue ?? \"\"));\n    const ariaLabelledBy = ()=>{\n        return formControlContext.getAriaLabelledBy(access(formControlProps.id), others[\"aria-label\"], local[\"aria-labelledby\"]);\n    };\n    const ariaDescribedBy = ()=>{\n        return formControlContext.getAriaDescribedBy(local[\"aria-describedby\"]);\n    };\n    const isSelectedValue = (value)=>{\n        return value === selected();\n    };\n    const context = {\n        ariaDescribedBy,\n        isSelectedValue,\n        setSelectedValue: (value)=>{\n            if (formControlContext.isReadOnly() || formControlContext.isDisabled()) {\n                return;\n            }\n            setSelected(value);\n            if (ref) for (const el of ref.querySelectorAll(\"[type='radio']\")){\n                const radio = el;\n                radio.checked = isSelectedValue(radio.value);\n            }\n        }\n    };\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(FormControlContext.Provider, {\n        value: formControlContext,\n        get children () {\n            return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(RadioGroupContext.Provider, {\n                value: context,\n                get children () {\n                    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n                        as: \"div\",\n                        ref (r$) {\n                            const _ref$ = mergeRefs((el)=>ref = el, local.ref);\n                            typeof _ref$ === \"function\" && _ref$(r$);\n                        },\n                        role: \"radiogroup\",\n                        get id () {\n                            return access(formControlProps.id);\n                        },\n                        get [\"aria-invalid\"] () {\n                            return formControlContext.validationState() === \"invalid\" || void 0;\n                        },\n                        get [\"aria-required\"] () {\n                            return formControlContext.isRequired() || void 0;\n                        },\n                        get [\"aria-disabled\"] () {\n                            return formControlContext.isDisabled() || void 0;\n                        },\n                        get [\"aria-readonly\"] () {\n                            return formControlContext.isReadOnly() || void 0;\n                        },\n                        get [\"aria-orientation\"] () {\n                            return local.orientation;\n                        },\n                        get [\"aria-labelledby\"] () {\n                            return ariaLabelledBy();\n                        },\n                        get [\"aria-describedby\"] () {\n                            return ariaDescribedBy();\n                        }\n                    }, ()=>formControlContext.dataset(), others));\n                }\n            });\n        }\n    });\n}\nvar RadioGroup = Object.assign(RadioGroupRoot, {\n    Description: FormControlDescription,\n    ErrorMessage: FormControlErrorMessage,\n    Item: RadioGroupItem,\n    ItemControl: RadioGroupItemControl,\n    ItemDescription: RadioGroupItemDescription,\n    ItemIndicator: RadioGroupItemIndicator,\n    ItemInput: RadioGroupItemInput,\n    ItemLabel: RadioGroupItemLabel,\n    Label: RadioGroupLabel\n});\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/GLKC2QFF.js\nvar ListKeyboardDelegate = class {\n    constructor(collection, ref, collator){\n        this.collection = collection;\n        this.ref = ref;\n        this.collator = collator;\n    }\n    getKeyBelow(key) {\n        let keyAfter = this.collection().getKeyAfter(key);\n        while(keyAfter != null){\n            const item = this.collection().getItem(keyAfter);\n            if (item && item.type === \"item\" && !item.disabled) {\n                return keyAfter;\n            }\n            keyAfter = this.collection().getKeyAfter(keyAfter);\n        }\n    }\n    getKeyAbove(key) {\n        let keyBefore = this.collection().getKeyBefore(key);\n        while(keyBefore != null){\n            const item = this.collection().getItem(keyBefore);\n            if (item && item.type === \"item\" && !item.disabled) {\n                return keyBefore;\n            }\n            keyBefore = this.collection().getKeyBefore(keyBefore);\n        }\n    }\n    getFirstKey() {\n        let key = this.collection().getFirstKey();\n        while(key != null){\n            const item = this.collection().getItem(key);\n            if (item && item.type === \"item\" && !item.disabled) {\n                return key;\n            }\n            key = this.collection().getKeyAfter(key);\n        }\n    }\n    getLastKey() {\n        let key = this.collection().getLastKey();\n        while(key != null){\n            const item = this.collection().getItem(key);\n            if (item && item.type === \"item\" && !item.disabled) {\n                return key;\n            }\n            key = this.collection().getKeyBefore(key);\n        }\n    }\n    getItem(key) {\n        return this.ref?.()?.querySelector(`[data-key=\"${key}\"]`) ?? null;\n    }\n    // TODO: not working correctly\n    getKeyPageAbove(key) {\n        const menu = this.ref?.();\n        let item = this.getItem(key);\n        if (!menu || !item) {\n            return;\n        }\n        const pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);\n        let keyAbove = key;\n        while(keyAbove && item && item.offsetTop > pageY){\n            keyAbove = this.getKeyAbove(keyAbove);\n            item = keyAbove != null ? this.getItem(keyAbove) : null;\n        }\n        return keyAbove;\n    }\n    // TODO: not working correctly\n    getKeyPageBelow(key) {\n        const menu = this.ref?.();\n        let item = this.getItem(key);\n        if (!menu || !item) {\n            return;\n        }\n        const pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);\n        let keyBelow = key;\n        while(keyBelow && item && item.offsetTop < pageY){\n            keyBelow = this.getKeyBelow(keyBelow);\n            item = keyBelow != null ? this.getItem(keyBelow) : null;\n        }\n        return keyBelow;\n    }\n    getKeyForSearch(search, fromKey) {\n        const collator = this.collator?.();\n        if (!collator) {\n            return;\n        }\n        let key = fromKey != null ? this.getKeyBelow(fromKey) : this.getFirstKey();\n        while(key != null){\n            const item = this.collection().getItem(key);\n            if (item) {\n                const substring = item.textValue.slice(0, search.length);\n                if (item.textValue && collator.compare(substring, search) === 0) {\n                    return key;\n                }\n            }\n            key = this.getKeyBelow(key);\n        }\n    }\n};\nfunction createSelectableList(props, ref, scrollRef) {\n    const collator = createCollator({\n        usage: \"search\",\n        sensitivity: \"base\"\n    });\n    const delegate = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        const keyboardDelegate = access(props.keyboardDelegate);\n        if (keyboardDelegate) {\n            return keyboardDelegate;\n        }\n        return new ListKeyboardDelegate(props.collection, ref, collator);\n    });\n    return createSelectableCollection({\n        selectionManager: ()=>access(props.selectionManager),\n        keyboardDelegate: delegate,\n        autoFocus: ()=>access(props.autoFocus),\n        deferAutoFocus: ()=>access(props.deferAutoFocus),\n        shouldFocusWrap: ()=>access(props.shouldFocusWrap),\n        disallowEmptySelection: ()=>access(props.disallowEmptySelection),\n        selectOnFocus: ()=>access(props.selectOnFocus),\n        disallowTypeAhead: ()=>access(props.disallowTypeAhead),\n        shouldUseVirtualFocus: ()=>access(props.shouldUseVirtualFocus),\n        allowsTabNavigation: ()=>access(props.allowsTabNavigation),\n        isVirtualized: ()=>access(props.isVirtualized),\n        scrollToKey: (key)=>access(props.scrollToKey)?.(key),\n        orientation: ()=>access(props.orientation)\n    }, ref);\n}\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/ISKHZMHS.js\nvar AUTOFOCUS_ON_MOUNT_EVENT = \"focusScope.autoFocusOnMount\";\nvar AUTOFOCUS_ON_UNMOUNT_EVENT = \"focusScope.autoFocusOnUnmount\";\nvar EVENT_OPTIONS = {\n    bubbles: false,\n    cancelable: true\n};\nvar focusScopeStack = {\n    /** A stack of focus scopes, with the active one at the top */ stack: [],\n    active () {\n        return this.stack[0];\n    },\n    add (scope) {\n        if (scope !== this.active()) {\n            this.active()?.pause();\n        }\n        this.stack = removeItemFromArray(this.stack, scope);\n        this.stack.unshift(scope);\n    },\n    remove (scope) {\n        this.stack = removeItemFromArray(this.stack, scope);\n        this.active()?.resume();\n    }\n};\nfunction createFocusScope(props, ref) {\n    const [isPaused, setIsPaused] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(false);\n    const focusScope = {\n        pause () {\n            setIsPaused(true);\n        },\n        resume () {\n            setIsPaused(false);\n        }\n    };\n    let lastFocusedElement = null;\n    const onMountAutoFocus = (e2)=>props.onMountAutoFocus?.(e2);\n    const onUnmountAutoFocus = (e2)=>props.onUnmountAutoFocus?.(e2);\n    const ownerDocument = ()=>getDocument(ref());\n    const createSentinel = ()=>{\n        const element = ownerDocument().createElement(\"span\");\n        element.setAttribute(\"data-focus-trap\", \"\");\n        element.tabIndex = 0;\n        Object.assign(element.style, visuallyHiddenStyles);\n        return element;\n    };\n    const tabbables = ()=>{\n        const container = ref();\n        if (!container) {\n            return [];\n        }\n        return getAllTabbableIn(container, true).filter((el)=>!el.hasAttribute(\"data-focus-trap\"));\n    };\n    const firstTabbable = ()=>{\n        const items = tabbables();\n        return items.length > 0 ? items[0] : null;\n    };\n    const lastTabbable = ()=>{\n        const items = tabbables();\n        return items.length > 0 ? items[items.length - 1] : null;\n    };\n    const shouldPreventUnmountAutoFocus = ()=>{\n        const container = ref();\n        if (!container) {\n            return false;\n        }\n        const activeElement = getActiveElement(container);\n        if (!activeElement) {\n            return false;\n        }\n        if (contains(container, activeElement)) {\n            return false;\n        }\n        return isFocusable(activeElement);\n    };\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.isServer) {\n            return;\n        }\n        const container = ref();\n        if (!container) {\n            return;\n        }\n        focusScopeStack.add(focusScope);\n        const previouslyFocusedElement = getActiveElement(container);\n        const hasFocusedCandidate = contains(container, previouslyFocusedElement);\n        if (!hasFocusedCandidate) {\n            const mountEvent = new CustomEvent(AUTOFOCUS_ON_MOUNT_EVENT, EVENT_OPTIONS);\n            container.addEventListener(AUTOFOCUS_ON_MOUNT_EVENT, onMountAutoFocus);\n            container.dispatchEvent(mountEvent);\n            if (!mountEvent.defaultPrevented) {\n                setTimeout(()=>{\n                    focusWithoutScrolling(firstTabbable());\n                    if (getActiveElement(container) === previouslyFocusedElement) {\n                        focusWithoutScrolling(container);\n                    }\n                }, 0);\n            }\n        }\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            container.removeEventListener(AUTOFOCUS_ON_MOUNT_EVENT, onMountAutoFocus);\n            setTimeout(()=>{\n                const unmountEvent = new CustomEvent(AUTOFOCUS_ON_UNMOUNT_EVENT, EVENT_OPTIONS);\n                if (shouldPreventUnmountAutoFocus()) {\n                    unmountEvent.preventDefault();\n                }\n                container.addEventListener(AUTOFOCUS_ON_UNMOUNT_EVENT, onUnmountAutoFocus);\n                container.dispatchEvent(unmountEvent);\n                if (!unmountEvent.defaultPrevented) {\n                    focusWithoutScrolling(previouslyFocusedElement ?? ownerDocument().body);\n                }\n                container.removeEventListener(AUTOFOCUS_ON_UNMOUNT_EVENT, onUnmountAutoFocus);\n                focusScopeStack.remove(focusScope);\n            }, 0);\n        });\n    });\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.isServer) {\n            return;\n        }\n        const container = ref();\n        if (!container || !access(props.trapFocus) || isPaused()) {\n            return;\n        }\n        const onFocusIn = (event)=>{\n            const target = event.target;\n            if (target?.closest(`[${DATA_TOP_LAYER_ATTR}]`)) {\n                return;\n            }\n            if (contains(container, target)) {\n                lastFocusedElement = target;\n            } else {\n                focusWithoutScrolling(lastFocusedElement);\n            }\n        };\n        const onFocusOut = (event)=>{\n            const relatedTarget = event.relatedTarget;\n            const target = relatedTarget ?? getActiveElement(container);\n            if (target?.closest(`[${DATA_TOP_LAYER_ATTR}]`)) {\n                return;\n            }\n            if (!contains(container, target)) {\n                focusWithoutScrolling(lastFocusedElement);\n            }\n        };\n        ownerDocument().addEventListener(\"focusin\", onFocusIn);\n        ownerDocument().addEventListener(\"focusout\", onFocusOut);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            ownerDocument().removeEventListener(\"focusin\", onFocusIn);\n            ownerDocument().removeEventListener(\"focusout\", onFocusOut);\n        });\n    });\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.isServer) {\n            return;\n        }\n        const container = ref();\n        if (!container || !access(props.trapFocus) || isPaused()) {\n            return;\n        }\n        const startSentinel = createSentinel();\n        container.insertAdjacentElement(\"afterbegin\", startSentinel);\n        const endSentinel = createSentinel();\n        container.insertAdjacentElement(\"beforeend\", endSentinel);\n        function onFocus(event) {\n            const first = firstTabbable();\n            const last = lastTabbable();\n            if (event.relatedTarget === first) {\n                focusWithoutScrolling(last);\n            } else {\n                focusWithoutScrolling(first);\n            }\n        }\n        startSentinel.addEventListener(\"focusin\", onFocus);\n        endSentinel.addEventListener(\"focusin\", onFocus);\n        const observer = new MutationObserver((mutations)=>{\n            for (const mutation of mutations){\n                if (mutation.previousSibling === endSentinel) {\n                    endSentinel.remove();\n                    container.insertAdjacentElement(\"beforeend\", endSentinel);\n                }\n                if (mutation.nextSibling === startSentinel) {\n                    startSentinel.remove();\n                    container.insertAdjacentElement(\"afterbegin\", startSentinel);\n                }\n            }\n        });\n        observer.observe(container, {\n            childList: true,\n            subtree: false\n        });\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            startSentinel.removeEventListener(\"focusin\", onFocus);\n            endSentinel.removeEventListener(\"focusin\", onFocus);\n            startSentinel.remove();\n            endSentinel.remove();\n            observer.disconnect();\n        });\n    });\n}\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/YA7DCYMB.js\nvar DATA_LIVE_ANNOUNCER_ATTR = \"data-live-announcer\";\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/TZGE2AQH.js\nfunction createHideOutside(props) {\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (access(props.isDisabled)) {\n            return;\n        }\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(ariaHideOutside(access(props.targets), access(props.root)));\n    });\n}\nvar refCountMap = /* @__PURE__ */ new WeakMap();\nvar observerStack = [];\nfunction ariaHideOutside(targets, root = document.body) {\n    const visibleNodes = new Set(targets);\n    const hiddenNodes = /* @__PURE__ */ new Set();\n    const walk = (root2)=>{\n        for (const element of root2.querySelectorAll(`[${DATA_LIVE_ANNOUNCER_ATTR}], [${DATA_TOP_LAYER_ATTR}]`)){\n            visibleNodes.add(element);\n        }\n        const acceptNode = (node)=>{\n            if (visibleNodes.has(node) || node.parentElement && hiddenNodes.has(node.parentElement) && node.parentElement.getAttribute(\"role\") !== \"row\") {\n                return NodeFilter.FILTER_REJECT;\n            }\n            for (const target of visibleNodes){\n                if (node.contains(target)) {\n                    return NodeFilter.FILTER_SKIP;\n                }\n            }\n            return NodeFilter.FILTER_ACCEPT;\n        };\n        const walker = document.createTreeWalker(root2, NodeFilter.SHOW_ELEMENT, {\n            acceptNode\n        });\n        const acceptRoot = acceptNode(root2);\n        if (acceptRoot === NodeFilter.FILTER_ACCEPT) {\n            hide3(root2);\n        }\n        if (acceptRoot !== NodeFilter.FILTER_REJECT) {\n            let node = walker.nextNode();\n            while(node != null){\n                hide3(node);\n                node = walker.nextNode();\n            }\n        }\n    };\n    const hide3 = (node)=>{\n        const refCount = refCountMap.get(node) ?? 0;\n        if (node.getAttribute(\"aria-hidden\") === \"true\" && refCount === 0) {\n            return;\n        }\n        if (refCount === 0) {\n            node.setAttribute(\"aria-hidden\", \"true\");\n        }\n        hiddenNodes.add(node);\n        refCountMap.set(node, refCount + 1);\n    };\n    if (observerStack.length) {\n        observerStack[observerStack.length - 1].disconnect();\n    }\n    walk(root);\n    const observer = new MutationObserver((changes)=>{\n        for (const change of changes){\n            if (change.type !== \"childList\" || change.addedNodes.length === 0) {\n                continue;\n            }\n            if (![\n                ...visibleNodes,\n                ...hiddenNodes\n            ].some((node)=>node.contains(change.target))) {\n                for (const node of change.removedNodes){\n                    if (node instanceof Element) {\n                        visibleNodes.delete(node);\n                        hiddenNodes.delete(node);\n                    }\n                }\n                for (const node of change.addedNodes){\n                    if ((node instanceof HTMLElement || node instanceof SVGElement) && (node.dataset.liveAnnouncer === \"true\" || node.dataset.reactAriaTopLayer === \"true\")) {\n                        visibleNodes.add(node);\n                    } else if (node instanceof Element) {\n                        walk(node);\n                    }\n                }\n            }\n        }\n    });\n    observer.observe(root, {\n        childList: true,\n        subtree: true\n    });\n    const observerWrapper = {\n        observe () {\n            observer.observe(root, {\n                childList: true,\n                subtree: true\n            });\n        },\n        disconnect () {\n            observer.disconnect();\n        }\n    };\n    observerStack.push(observerWrapper);\n    return ()=>{\n        observer.disconnect();\n        for (const node of hiddenNodes){\n            const count = refCountMap.get(node);\n            if (count == null) {\n                return;\n            }\n            if (count === 1) {\n                node.removeAttribute(\"aria-hidden\");\n                refCountMap.delete(node);\n            } else {\n                refCountMap.set(node, count - 1);\n            }\n        }\n        if (observerWrapper === observerStack[observerStack.length - 1]) {\n            observerStack.pop();\n            if (observerStack.length) {\n                observerStack[observerStack.length - 1].observe();\n            }\n        } else {\n            observerStack.splice(observerStack.indexOf(observerWrapper), 1);\n        }\n    };\n}\n// ../../node_modules/.pnpm/@corvu+utils@0.3.2_solid-js@1.9.5/node_modules/@corvu/utils/dist/chunk/HD4B7J7A.js\nvar activeStyles = /* @__PURE__ */ new Map();\nvar createStyle = (props)=>{\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        const style = access2(props.style) ?? {};\n        const properties = access2(props.properties) ?? [];\n        const originalStyles = {};\n        for(const key in style){\n            originalStyles[key] = props.element.style[key];\n        }\n        const activeStyle = activeStyles.get(props.key);\n        if (activeStyle) {\n            activeStyle.activeCount++;\n        } else {\n            activeStyles.set(props.key, {\n                activeCount: 1,\n                originalStyles,\n                properties: properties.map((property)=>property.key)\n            });\n        }\n        Object.assign(props.element.style, props.style);\n        for (const property of properties){\n            props.element.style.setProperty(property.key, property.value);\n        }\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            const activeStyle2 = activeStyles.get(props.key);\n            if (!activeStyle2) return;\n            if (activeStyle2.activeCount !== 1) {\n                activeStyle2.activeCount--;\n                return;\n            }\n            activeStyles.delete(props.key);\n            for (const [key, value] of Object.entries(activeStyle2.originalStyles)){\n                props.element.style[key] = value;\n            }\n            for (const property of activeStyle2.properties){\n                props.element.style.removeProperty(property);\n            }\n            if (props.element.style.length === 0) {\n                props.element.removeAttribute(\"style\");\n            }\n            props.cleanup?.();\n        });\n    });\n};\nvar style_default = createStyle;\n// ../../node_modules/.pnpm/@corvu+utils@0.3.2_solid-js@1.9.5/node_modules/@corvu/utils/dist/scroll/index.js\nvar getScrollDimensions = (element, axis)=>{\n    switch(axis){\n        case \"x\":\n            return [\n                element.clientWidth,\n                element.scrollLeft,\n                element.scrollWidth\n            ];\n        case \"y\":\n            return [\n                element.clientHeight,\n                element.scrollTop,\n                element.scrollHeight\n            ];\n    }\n};\nvar isScrollContainer = (element, axis)=>{\n    const styles = getComputedStyle(element);\n    const overflow = axis === \"x\" ? styles.overflowX : styles.overflowY;\n    return overflow === \"auto\" || overflow === \"scroll\" || // The HTML element is a scroll container if it has overflow visible\n    element.tagName === \"HTML\" && overflow === \"visible\";\n};\nvar getScrollAtLocation = (location, axis, stopAt)=>{\n    const directionFactor = axis === \"x\" && window.getComputedStyle(location).direction === \"rtl\" ? -1 : 1;\n    let currentElement = location;\n    let availableScroll = 0;\n    let availableScrollTop = 0;\n    let wrapperReached = false;\n    do {\n        const [clientSize, scrollOffset, scrollSize] = getScrollDimensions(currentElement, axis);\n        const scrolled = scrollSize - clientSize - directionFactor * scrollOffset;\n        if ((scrollOffset !== 0 || scrolled !== 0) && isScrollContainer(currentElement, axis)) {\n            availableScroll += scrolled;\n            availableScrollTop += scrollOffset;\n        }\n        if (currentElement === (stopAt ?? document.documentElement)) {\n            wrapperReached = true;\n        } else {\n            currentElement = currentElement._$host ?? currentElement.parentElement;\n        }\n    }while (currentElement && !wrapperReached);\n    return [\n        availableScroll,\n        availableScrollTop\n    ];\n};\n// ../../node_modules/.pnpm/solid-prevent-scroll@0.1.9_solid-js@1.9.5/node_modules/solid-prevent-scroll/dist/index.js\nvar [preventScrollStack, setPreventScrollStack] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)([]);\nvar isActive = (id)=>preventScrollStack().indexOf(id) === preventScrollStack().length - 1;\nvar createPreventScroll = (props)=>{\n    const defaultedProps = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        element: null,\n        enabled: true,\n        hideScrollbar: true,\n        preventScrollbarShift: true,\n        preventScrollbarShiftMode: \"padding\",\n        restoreScrollPosition: true,\n        allowPinchZoom: false\n    }, props);\n    const preventScrollId = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createUniqueId)();\n    let currentTouchStart = [\n        0,\n        0\n    ];\n    let currentTouchStartAxis = null;\n    let currentTouchStartDelta = null;\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (!access2(defaultedProps.enabled)) return;\n        setPreventScrollStack((stack)=>[\n                ...stack,\n                preventScrollId\n            ]);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            setPreventScrollStack((stack)=>stack.filter((id)=>id !== preventScrollId));\n        });\n    });\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (!access2(defaultedProps.enabled) || !access2(defaultedProps.hideScrollbar)) return;\n        const { body } = document;\n        const scrollbarWidth = window.innerWidth - body.offsetWidth;\n        if (access2(defaultedProps.preventScrollbarShift)) {\n            const style = {\n                overflow: \"hidden\"\n            };\n            const properties = [];\n            if (scrollbarWidth > 0) {\n                if (access2(defaultedProps.preventScrollbarShiftMode) === \"padding\") {\n                    style.paddingRight = `calc(${window.getComputedStyle(body).paddingRight} + ${scrollbarWidth}px)`;\n                } else {\n                    style.marginRight = `calc(${window.getComputedStyle(body).marginRight} + ${scrollbarWidth}px)`;\n                }\n                properties.push({\n                    key: \"--scrollbar-width\",\n                    value: `${scrollbarWidth}px`\n                });\n            }\n            const offsetTop = window.scrollY;\n            const offsetLeft = window.scrollX;\n            style_default({\n                key: \"prevent-scroll\",\n                element: body,\n                style,\n                properties,\n                cleanup: ()=>{\n                    if (access2(defaultedProps.restoreScrollPosition) && scrollbarWidth > 0) {\n                        window.scrollTo(offsetLeft, offsetTop);\n                    }\n                }\n            });\n        } else {\n            style_default({\n                key: \"prevent-scroll\",\n                element: body,\n                style: {\n                    overflow: \"hidden\"\n                }\n            });\n        }\n    });\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (!isActive(preventScrollId) || !access2(defaultedProps.enabled)) return;\n        document.addEventListener(\"wheel\", maybePreventWheel, {\n            passive: false\n        });\n        document.addEventListener(\"touchstart\", logTouchStart, {\n            passive: false\n        });\n        document.addEventListener(\"touchmove\", maybePreventTouch, {\n            passive: false\n        });\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            document.removeEventListener(\"wheel\", maybePreventWheel);\n            document.removeEventListener(\"touchstart\", logTouchStart);\n            document.removeEventListener(\"touchmove\", maybePreventTouch);\n        });\n    });\n    const logTouchStart = (event)=>{\n        currentTouchStart = getTouchXY(event);\n        currentTouchStartAxis = null;\n        currentTouchStartDelta = null;\n    };\n    const maybePreventWheel = (event)=>{\n        const target = event.target;\n        const wrapper = access2(defaultedProps.element);\n        const delta = getDeltaXY(event);\n        const axis = Math.abs(delta[0]) > Math.abs(delta[1]) ? \"x\" : \"y\";\n        const axisDelta = axis === \"x\" ? delta[0] : delta[1];\n        const resultsInScroll = wouldScroll(target, axis, axisDelta, wrapper);\n        let shouldCancel;\n        if (wrapper && contains2(wrapper, target)) {\n            shouldCancel = !resultsInScroll;\n        } else {\n            shouldCancel = true;\n        }\n        if (shouldCancel && event.cancelable) {\n            event.preventDefault();\n        }\n    };\n    const maybePreventTouch = (event)=>{\n        const wrapper = access2(defaultedProps.element);\n        const target = event.target;\n        let shouldCancel;\n        if (event.touches.length === 2) {\n            shouldCancel = !access2(defaultedProps.allowPinchZoom);\n        } else {\n            if (currentTouchStartAxis == null || currentTouchStartDelta === null) {\n                const delta = getTouchXY(event).map((touch, i2)=>currentTouchStart[i2] - touch);\n                const axis = Math.abs(delta[0]) > Math.abs(delta[1]) ? \"x\" : \"y\";\n                currentTouchStartAxis = axis;\n                currentTouchStartDelta = axis === \"x\" ? delta[0] : delta[1];\n            }\n            if (target.type === \"range\") {\n                shouldCancel = false;\n            } else {\n                const wouldResultInScroll = wouldScroll(target, currentTouchStartAxis, currentTouchStartDelta, wrapper);\n                if (wrapper && contains2(wrapper, target)) {\n                    shouldCancel = !wouldResultInScroll;\n                } else {\n                    shouldCancel = true;\n                }\n            }\n        }\n        if (shouldCancel && event.cancelable) {\n            event.preventDefault();\n        }\n    };\n};\nvar getDeltaXY = (event)=>[\n        event.deltaX,\n        event.deltaY\n    ];\nvar getTouchXY = (event)=>event.changedTouches[0] ? [\n        event.changedTouches[0].clientX,\n        event.changedTouches[0].clientY\n    ] : [\n        0,\n        0\n    ];\nvar wouldScroll = (target, axis, delta, wrapper)=>{\n    const targetInWrapper = wrapper !== null && contains2(wrapper, target);\n    const [availableScroll, availableScrollTop] = getScrollAtLocation(target, axis, targetInWrapper ? wrapper : void 0);\n    if (delta > 0 && Math.abs(availableScroll) <= 1) {\n        return false;\n    }\n    if (delta < 0 && Math.abs(availableScrollTop) < 1) {\n        return false;\n    }\n    return true;\n};\nvar contains2 = (wrapper, target)=>{\n    if (wrapper.contains(target)) return true;\n    let currentElement = target;\n    while(currentElement){\n        if (currentElement === wrapper) return true;\n        currentElement = currentElement._$host ?? currentElement.parentElement;\n    }\n    return false;\n};\nvar preventScroll_default = createPreventScroll;\nvar src_default2 = preventScroll_default;\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/3F4B62RP.js\nvar MenuContext = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction useOptionalMenuContext() {\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(MenuContext);\n}\nfunction useMenuContext() {\n    const context = useOptionalMenuContext();\n    if (context === void 0) {\n        throw new Error(\"[kobalte]: `useMenuContext` must be used within a `Menu` component\");\n    }\n    return context;\n}\nvar MenuItemContext = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction useMenuItemContext() {\n    const context = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(MenuItemContext);\n    if (context === void 0) {\n        throw new Error(\"[kobalte]: `useMenuItemContext` must be used within a `Menu.Item` component\");\n    }\n    return context;\n}\nvar MenuRootContext = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction useMenuRootContext() {\n    const context = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(MenuRootContext);\n    if (context === void 0) {\n        throw new Error(\"[kobalte]: `useMenuRootContext` must be used within a `MenuRoot` component\");\n    }\n    return context;\n}\nfunction MenuItemBase(props) {\n    let ref;\n    const rootContext = useMenuRootContext();\n    const menuContext = useMenuContext();\n    const mergedProps = mergeDefaultProps({\n        id: rootContext.generateId(`item-${(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createUniqueId)()}`)\n    }, props);\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(mergedProps, [\n        \"ref\",\n        \"textValue\",\n        \"disabled\",\n        \"closeOnSelect\",\n        \"checked\",\n        \"indeterminate\",\n        \"onSelect\",\n        \"onPointerMove\",\n        \"onPointerLeave\",\n        \"onPointerDown\",\n        \"onPointerUp\",\n        \"onClick\",\n        \"onKeyDown\",\n        \"onMouseDown\",\n        \"onFocus\"\n    ]);\n    const [labelId, setLabelId] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [descriptionId, setDescriptionId] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [labelRef, setLabelRef] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const selectionManager = ()=>menuContext.listState().selectionManager();\n    const key = ()=>others.id;\n    const isHighlighted = ()=>selectionManager().focusedKey() === key();\n    const onSelect = ()=>{\n        local.onSelect?.();\n        if (local.closeOnSelect) {\n            setTimeout(()=>{\n                menuContext.close(true);\n            });\n        }\n    };\n    createDomCollectionItem({\n        getItem: ()=>({\n                ref: ()=>ref,\n                type: \"item\",\n                key: key(),\n                textValue: local.textValue ?? labelRef()?.textContent ?? ref?.textContent ?? \"\",\n                disabled: local.disabled ?? false\n            })\n    });\n    const selectableItem = createSelectableItem({\n        key,\n        selectionManager,\n        shouldSelectOnPressUp: true,\n        allowsDifferentPressOrigin: true,\n        disabled: ()=>local.disabled\n    }, ()=>ref);\n    const onPointerMove = (e2)=>{\n        callHandler(e2, local.onPointerMove);\n        if (e2.pointerType !== \"mouse\") {\n            return;\n        }\n        if (local.disabled) {\n            menuContext.onItemLeave(e2);\n        } else {\n            menuContext.onItemEnter(e2);\n            if (!e2.defaultPrevented) {\n                focusWithoutScrolling(e2.currentTarget);\n                menuContext.listState().selectionManager().setFocused(true);\n                menuContext.listState().selectionManager().setFocusedKey(key());\n            }\n        }\n    };\n    const onPointerLeave = (e2)=>{\n        callHandler(e2, local.onPointerLeave);\n        if (e2.pointerType !== \"mouse\") {\n            return;\n        }\n        menuContext.onItemLeave(e2);\n    };\n    const onPointerUp = (e2)=>{\n        callHandler(e2, local.onPointerUp);\n        if (!local.disabled && e2.button === 0) {\n            onSelect();\n        }\n    };\n    const onKeyDown = (e2)=>{\n        callHandler(e2, local.onKeyDown);\n        if (e2.repeat) {\n            return;\n        }\n        if (local.disabled) {\n            return;\n        }\n        switch(e2.key){\n            case \"Enter\":\n            case \" \":\n                onSelect();\n                break;\n        }\n    };\n    const ariaChecked = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        if (local.indeterminate) {\n            return \"mixed\";\n        }\n        if (local.checked == null) {\n            return void 0;\n        }\n        return local.checked;\n    });\n    const dataset = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>({\n            \"data-indeterminate\": local.indeterminate ? \"\" : void 0,\n            \"data-checked\": local.checked && !local.indeterminate ? \"\" : void 0,\n            \"data-disabled\": local.disabled ? \"\" : void 0,\n            \"data-highlighted\": isHighlighted() ? \"\" : void 0\n        }));\n    const context = {\n        isChecked: ()=>local.checked,\n        dataset,\n        setLabelRef,\n        generateId: createGenerateId(()=>others.id),\n        registerLabel: createRegisterId(setLabelId),\n        registerDescription: createRegisterId(setDescriptionId)\n    };\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MenuItemContext.Provider, {\n        value: context,\n        get children () {\n            return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n                as: \"div\",\n                ref (r$) {\n                    const _ref$ = mergeRefs((el)=>ref = el, local.ref);\n                    typeof _ref$ === \"function\" && _ref$(r$);\n                },\n                get tabIndex () {\n                    return selectableItem.tabIndex();\n                },\n                get [\"aria-checked\"] () {\n                    return ariaChecked();\n                },\n                get [\"aria-disabled\"] () {\n                    return local.disabled;\n                },\n                get [\"aria-labelledby\"] () {\n                    return labelId();\n                },\n                get [\"aria-describedby\"] () {\n                    return descriptionId();\n                },\n                get [\"data-key\"] () {\n                    return selectableItem.dataKey();\n                },\n                get onPointerDown () {\n                    return composeEventHandlers([\n                        local.onPointerDown,\n                        selectableItem.onPointerDown\n                    ]);\n                },\n                get onPointerUp () {\n                    return composeEventHandlers([\n                        onPointerUp,\n                        selectableItem.onPointerUp\n                    ]);\n                },\n                get onClick () {\n                    return composeEventHandlers([\n                        local.onClick,\n                        selectableItem.onClick\n                    ]);\n                },\n                get onKeyDown () {\n                    return composeEventHandlers([\n                        onKeyDown,\n                        selectableItem.onKeyDown\n                    ]);\n                },\n                get onMouseDown () {\n                    return composeEventHandlers([\n                        local.onMouseDown,\n                        selectableItem.onMouseDown\n                    ]);\n                },\n                get onFocus () {\n                    return composeEventHandlers([\n                        local.onFocus,\n                        selectableItem.onFocus\n                    ]);\n                },\n                onPointerMove,\n                onPointerLeave\n            }, dataset, others));\n        }\n    });\n}\nfunction MenuCheckboxItem(props) {\n    const mergedProps = mergeDefaultProps({\n        closeOnSelect: false\n    }, props);\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(mergedProps, [\n        \"checked\",\n        \"defaultChecked\",\n        \"onChange\",\n        \"onSelect\"\n    ]);\n    const state = createToggleState({\n        isSelected: ()=>local.checked,\n        defaultIsSelected: ()=>local.defaultChecked,\n        onSelectedChange: (checked)=>local.onChange?.(checked),\n        isDisabled: ()=>others.disabled\n    });\n    const onSelect = ()=>{\n        local.onSelect?.();\n        state.toggle();\n    };\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MenuItemBase, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        role: \"menuitemcheckbox\",\n        get checked () {\n            return state.isSelected();\n        },\n        onSelect\n    }, others));\n}\nvar MenubarContext = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction useOptionalMenubarContext() {\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(MenubarContext);\n}\nvar MENUBAR_KEYS = {\n    next: (dir, orientation)=>dir === \"ltr\" ? orientation === \"horizontal\" ? \"ArrowRight\" : \"ArrowDown\" : orientation === \"horizontal\" ? \"ArrowLeft\" : \"ArrowUp\",\n    previous: (dir, orientation)=>MENUBAR_KEYS.next(dir === \"ltr\" ? \"rtl\" : \"ltr\", orientation)\n};\nvar MENU_KEYS = {\n    first: (orientation)=>orientation === \"horizontal\" ? \"ArrowDown\" : \"ArrowRight\",\n    last: (orientation)=>orientation === \"horizontal\" ? \"ArrowUp\" : \"ArrowLeft\"\n};\nfunction MenuTrigger(props) {\n    const rootContext = useMenuRootContext();\n    const context = useMenuContext();\n    const optionalMenubarContext = useOptionalMenubarContext();\n    const { direction } = useLocale();\n    const mergedProps = mergeDefaultProps({\n        id: rootContext.generateId(\"trigger\")\n    }, props);\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(mergedProps, [\n        \"ref\",\n        \"id\",\n        \"disabled\",\n        \"onPointerDown\",\n        \"onClick\",\n        \"onKeyDown\",\n        \"onMouseOver\",\n        \"onFocus\"\n    ]);\n    let key = ()=>rootContext.value();\n    if (optionalMenubarContext !== void 0) {\n        key = ()=>rootContext.value() ?? local.id;\n        if (optionalMenubarContext.lastValue() === void 0) optionalMenubarContext.setLastValue(key);\n    }\n    const tagName = createTagName(()=>context.triggerRef(), ()=>\"button\");\n    const isNativeLink = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return tagName() === \"a\" && context.triggerRef()?.getAttribute(\"href\") != null;\n    });\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)((0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.on)(()=>optionalMenubarContext?.value(), (value)=>{\n        if (!isNativeLink()) return;\n        if (value === key()) context.triggerRef()?.focus();\n    }));\n    const handleClick = ()=>{\n        if (optionalMenubarContext !== void 0) {\n            if (!context.isOpen()) {\n                if (!optionalMenubarContext.autoFocusMenu()) {\n                    optionalMenubarContext.setAutoFocusMenu(true);\n                }\n                context.open(false);\n            } else {\n                if (optionalMenubarContext.value() === key()) optionalMenubarContext.closeMenu();\n            }\n        } else context.toggle(true);\n    };\n    const onPointerDown = (e2)=>{\n        callHandler(e2, local.onPointerDown);\n        e2.currentTarget.dataset.pointerType = e2.pointerType;\n        if (!local.disabled && e2.pointerType !== \"touch\" && e2.button === 0) {\n            handleClick();\n        }\n    };\n    const onClick = (e2)=>{\n        callHandler(e2, local.onClick);\n        if (!local.disabled) {\n            if (e2.currentTarget.dataset.pointerType === \"touch\") handleClick();\n        }\n    };\n    const onKeyDown = (e2)=>{\n        callHandler(e2, local.onKeyDown);\n        if (local.disabled) {\n            return;\n        }\n        if (isNativeLink()) {\n            switch(e2.key){\n                case \"Enter\":\n                case \" \":\n                    return;\n            }\n        }\n        switch(e2.key){\n            case \"Enter\":\n            case \" \":\n            case MENU_KEYS.first(rootContext.orientation()):\n                e2.stopPropagation();\n                e2.preventDefault();\n                scrollIntoViewport(e2.currentTarget);\n                context.open(\"first\");\n                optionalMenubarContext?.setAutoFocusMenu(true);\n                optionalMenubarContext?.setValue(key);\n                break;\n            case MENU_KEYS.last(rootContext.orientation()):\n                e2.stopPropagation();\n                e2.preventDefault();\n                context.open(\"last\");\n                break;\n            case MENUBAR_KEYS.next(direction(), rootContext.orientation()):\n                if (optionalMenubarContext === void 0) break;\n                e2.stopPropagation();\n                e2.preventDefault();\n                optionalMenubarContext.nextMenu();\n                break;\n            case MENUBAR_KEYS.previous(direction(), rootContext.orientation()):\n                if (optionalMenubarContext === void 0) break;\n                e2.stopPropagation();\n                e2.preventDefault();\n                optionalMenubarContext.previousMenu();\n                break;\n        }\n    };\n    const onMouseOver = (e2)=>{\n        callHandler(e2, local.onMouseOver);\n        if (context.triggerRef()?.dataset.pointerType === \"touch\") return;\n        if (!local.disabled && optionalMenubarContext !== void 0 && optionalMenubarContext.value() !== void 0) {\n            optionalMenubarContext.setValue(key);\n        }\n    };\n    const onFocus = (e2)=>{\n        callHandler(e2, local.onFocus);\n        if (optionalMenubarContext !== void 0 && e2.currentTarget.dataset.pointerType !== \"touch\") optionalMenubarContext.setValue(key);\n    };\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(context.registerTriggerId(local.id)));\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ButtonRoot, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        ref (r$) {\n            const _ref$ = mergeRefs(context.setTriggerRef, local.ref);\n            typeof _ref$ === \"function\" && _ref$(r$);\n        },\n        get [\"data-kb-menu-value-trigger\"] () {\n            return rootContext.value();\n        },\n        get id () {\n            return local.id;\n        },\n        get disabled () {\n            return local.disabled;\n        },\n        \"aria-haspopup\": \"true\",\n        get [\"aria-expanded\"] () {\n            return context.isOpen();\n        },\n        get [\"aria-controls\"] () {\n            return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>!!context.isOpen())() ? context.contentId() : void 0;\n        },\n        get [\"data-highlighted\"] () {\n            return key() !== void 0 && optionalMenubarContext?.value() === key() ? true : void 0;\n        },\n        get tabIndex () {\n            return optionalMenubarContext !== void 0 ? optionalMenubarContext.value() === key() || optionalMenubarContext.lastValue() === key() ? 0 : -1 : void 0;\n        },\n        onPointerDown,\n        onMouseOver,\n        onClick,\n        onKeyDown,\n        onFocus,\n        role: optionalMenubarContext !== void 0 ? \"menuitem\" : void 0\n    }, ()=>context.dataset(), others));\n}\nvar NavigationMenuContext = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction useOptionalNavigationMenuContext() {\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(NavigationMenuContext);\n}\nfunction MenuContentBase(props) {\n    let ref;\n    const rootContext = useMenuRootContext();\n    const context = useMenuContext();\n    const optionalMenubarContext = useOptionalMenubarContext();\n    const optionalNavigationMenuContext = useOptionalNavigationMenuContext();\n    const { direction } = useLocale();\n    const mergedProps = mergeDefaultProps({\n        id: rootContext.generateId(`content-${(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createUniqueId)()}`)\n    }, props);\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(mergedProps, [\n        \"ref\",\n        \"id\",\n        \"style\",\n        \"onOpenAutoFocus\",\n        \"onCloseAutoFocus\",\n        \"onEscapeKeyDown\",\n        \"onFocusOutside\",\n        \"onPointerEnter\",\n        \"onPointerMove\",\n        \"onKeyDown\",\n        \"onMouseDown\",\n        \"onFocusIn\",\n        \"onFocusOut\"\n    ]);\n    let lastPointerX = 0;\n    const isRootModalContent = ()=>{\n        return context.parentMenuContext() == null && optionalMenubarContext === void 0 && rootContext.isModal();\n    };\n    const selectableList = createSelectableList({\n        selectionManager: context.listState().selectionManager,\n        collection: context.listState().collection,\n        autoFocus: context.autoFocus,\n        deferAutoFocus: true,\n        // ensure all menu items are mounted and collection is not empty before trying to autofocus.\n        shouldFocusWrap: true,\n        disallowTypeAhead: ()=>!context.listState().selectionManager().isFocused(),\n        orientation: ()=>rootContext.orientation() === \"horizontal\" ? \"vertical\" : \"horizontal\"\n    }, ()=>ref);\n    createFocusScope({\n        trapFocus: ()=>isRootModalContent() && context.isOpen(),\n        onMountAutoFocus: (event)=>{\n            if (optionalMenubarContext === void 0) local.onOpenAutoFocus?.(event);\n        },\n        onUnmountAutoFocus: local.onCloseAutoFocus\n    }, ()=>ref);\n    const onKeyDown = (e2)=>{\n        if (!contains(e2.currentTarget, e2.target)) {\n            return;\n        }\n        if (e2.key === \"Tab\" && context.isOpen()) {\n            e2.preventDefault();\n        }\n        if (optionalMenubarContext !== void 0) {\n            if (e2.currentTarget.getAttribute(\"aria-haspopup\") !== \"true\") switch(e2.key){\n                case MENUBAR_KEYS.next(direction(), rootContext.orientation()):\n                    e2.stopPropagation();\n                    e2.preventDefault();\n                    context.close(true);\n                    optionalMenubarContext.setAutoFocusMenu(true);\n                    optionalMenubarContext.nextMenu();\n                    break;\n                case MENUBAR_KEYS.previous(direction(), rootContext.orientation()):\n                    if (e2.currentTarget.hasAttribute(\"data-closed\")) break;\n                    e2.stopPropagation();\n                    e2.preventDefault();\n                    context.close(true);\n                    optionalMenubarContext.setAutoFocusMenu(true);\n                    optionalMenubarContext.previousMenu();\n                    break;\n            }\n        }\n    };\n    const onEscapeKeyDown = (e2)=>{\n        local.onEscapeKeyDown?.(e2);\n        optionalMenubarContext?.setAutoFocusMenu(false);\n        context.close(true);\n    };\n    const onFocusOutside = (e2)=>{\n        local.onFocusOutside?.(e2);\n        if (rootContext.isModal()) {\n            e2.preventDefault();\n        }\n    };\n    const onPointerEnter = (e2)=>{\n        callHandler(e2, local.onPointerEnter);\n        if (!context.isOpen()) {\n            return;\n        }\n        context.parentMenuContext()?.listState().selectionManager().setFocused(false);\n        context.parentMenuContext()?.listState().selectionManager().setFocusedKey(void 0);\n    };\n    const onPointerMove = (e2)=>{\n        callHandler(e2, local.onPointerMove);\n        if (e2.pointerType !== \"mouse\") {\n            return;\n        }\n        const target = e2.target;\n        const pointerXHasChanged = lastPointerX !== e2.clientX;\n        if (contains(e2.currentTarget, target) && pointerXHasChanged) {\n            context.setPointerDir(e2.clientX > lastPointerX ? \"right\" : \"left\");\n            lastPointerX = e2.clientX;\n        }\n    };\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(context.registerContentId(local.id)));\n    const commonAttributes = {\n        ref: mergeRefs((el)=>{\n            context.setContentRef(el);\n            ref = el;\n        }, local.ref),\n        role: \"menu\",\n        get id () {\n            return local.id;\n        },\n        get tabIndex () {\n            return selectableList.tabIndex();\n        },\n        get \"aria-labelledby\" () {\n            return context.triggerId();\n        },\n        onKeyDown: composeEventHandlers([\n            local.onKeyDown,\n            selectableList.onKeyDown,\n            onKeyDown\n        ]),\n        onMouseDown: composeEventHandlers([\n            local.onMouseDown,\n            selectableList.onMouseDown\n        ]),\n        onFocusIn: composeEventHandlers([\n            local.onFocusIn,\n            selectableList.onFocusIn\n        ]),\n        onFocusOut: composeEventHandlers([\n            local.onFocusOut,\n            selectableList.onFocusOut\n        ]),\n        onPointerEnter,\n        onPointerMove,\n        get \"data-orientation\" () {\n            return rootContext.orientation();\n        }\n    };\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n        get when () {\n            return context.contentPresent();\n        },\n        get children () {\n            return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return optionalNavigationMenuContext === void 0 || context.parentMenuContext() != null;\n                },\n                get fallback () {\n                    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n                        as: \"div\"\n                    }, ()=>context.dataset(), commonAttributes, others));\n                },\n                get children () {\n                    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Popper.Positioner, {\n                        get children () {\n                            return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(DismissableLayer, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n                                get disableOutsidePointerEvents () {\n                                    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>!!isRootModalContent())() && context.isOpen();\n                                },\n                                get excludedElements () {\n                                    return [\n                                        context.triggerRef\n                                    ];\n                                },\n                                bypassTopMostLayerCheck: true,\n                                get style () {\n                                    return combineStyle({\n                                        \"--kb-menu-content-transform-origin\": \"var(--kb-popper-content-transform-origin)\",\n                                        position: \"relative\"\n                                    }, local.style);\n                                },\n                                onEscapeKeyDown,\n                                onFocusOutside,\n                                get onDismiss () {\n                                    return context.close;\n                                }\n                            }, ()=>context.dataset(), commonAttributes, others));\n                        }\n                    });\n                }\n            });\n        }\n    });\n}\nfunction MenuContent(props) {\n    let ref;\n    const rootContext = useMenuRootContext();\n    const context = useMenuContext();\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"ref\"\n    ]);\n    src_default2({\n        element: ()=>ref ?? null,\n        enabled: ()=>context.contentPresent() && rootContext.preventScroll()\n    });\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MenuContentBase, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        ref (r$) {\n            const _ref$ = mergeRefs((el)=>{\n                ref = el;\n            }, local.ref);\n            typeof _ref$ === \"function\" && _ref$(r$);\n        }\n    }, others));\n}\nvar MenuGroupContext = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction useMenuGroupContext() {\n    const context = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(MenuGroupContext);\n    if (context === void 0) {\n        throw new Error(\"[kobalte]: `useMenuGroupContext` must be used within a `Menu.Group` component\");\n    }\n    return context;\n}\nfunction MenuGroup(props) {\n    const rootContext = useMenuRootContext();\n    const mergedProps = mergeDefaultProps({\n        id: rootContext.generateId(`group-${(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createUniqueId)()}`)\n    }, props);\n    const [labelId, setLabelId] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const context = {\n        generateId: createGenerateId(()=>mergedProps.id),\n        registerLabelId: createRegisterId(setLabelId)\n    };\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MenuGroupContext.Provider, {\n        value: context,\n        get children () {\n            return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n                as: \"div\",\n                role: \"group\",\n                get [\"aria-labelledby\"] () {\n                    return labelId();\n                }\n            }, mergedProps));\n        }\n    });\n}\nfunction MenuGroupLabel(props) {\n    const context = useMenuGroupContext();\n    const mergedProps = mergeDefaultProps({\n        id: context.generateId(\"label\")\n    }, props);\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(mergedProps, [\n        \"id\"\n    ]);\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(context.registerLabelId(local.id)));\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"span\",\n        get id () {\n            return local.id;\n        },\n        \"aria-hidden\": \"true\"\n    }, others));\n}\nfunction MenuIcon(props) {\n    const context = useMenuContext();\n    const mergedProps = mergeDefaultProps({\n        children: \"▼\"\n    }, props);\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"span\",\n        \"aria-hidden\": \"true\"\n    }, ()=>context.dataset(), mergedProps));\n}\nfunction MenuItem(props) {\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MenuItemBase, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        role: \"menuitem\",\n        closeOnSelect: true\n    }, props));\n}\nfunction MenuItemDescription(props) {\n    const context = useMenuItemContext();\n    const mergedProps = mergeDefaultProps({\n        id: context.generateId(\"description\")\n    }, props);\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(mergedProps, [\n        \"id\"\n    ]);\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(context.registerDescription(local.id)));\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"div\",\n        get id () {\n            return local.id;\n        }\n    }, ()=>context.dataset(), others));\n}\nfunction MenuItemIndicator(props) {\n    const context = useMenuItemContext();\n    const mergedProps = mergeDefaultProps({\n        id: context.generateId(\"indicator\")\n    }, props);\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(mergedProps, [\n        \"forceMount\"\n    ]);\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n        get when () {\n            return local.forceMount || context.isChecked();\n        },\n        get children () {\n            return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n                as: \"div\"\n            }, ()=>context.dataset(), others));\n        }\n    });\n}\nfunction MenuItemLabel(props) {\n    const context = useMenuItemContext();\n    const mergedProps = mergeDefaultProps({\n        id: context.generateId(\"label\")\n    }, props);\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(mergedProps, [\n        \"ref\",\n        \"id\"\n    ]);\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(context.registerLabel(local.id)));\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"div\",\n        ref (r$) {\n            const _ref$ = mergeRefs(context.setLabelRef, local.ref);\n            typeof _ref$ === \"function\" && _ref$(r$);\n        },\n        get id () {\n            return local.id;\n        }\n    }, ()=>context.dataset(), others));\n}\nfunction MenuPortal(props) {\n    const context = useMenuContext();\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n        get when () {\n            return context.contentPresent();\n        },\n        get children () {\n            return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Portal, props);\n        }\n    });\n}\nvar MenuRadioGroupContext = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction useMenuRadioGroupContext() {\n    const context = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(MenuRadioGroupContext);\n    if (context === void 0) {\n        throw new Error(\"[kobalte]: `useMenuRadioGroupContext` must be used within a `Menu.RadioGroup` component\");\n    }\n    return context;\n}\nfunction MenuRadioGroup(props) {\n    const rootContext = useMenuRootContext();\n    const defaultId = rootContext.generateId(`radiogroup-${(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createUniqueId)()}`);\n    const mergedProps = mergeDefaultProps({\n        id: defaultId\n    }, props);\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(mergedProps, [\n        \"value\",\n        \"defaultValue\",\n        \"onChange\",\n        \"disabled\"\n    ]);\n    const [selected, setSelected] = createControllableSignal({\n        value: ()=>local.value,\n        defaultValue: ()=>local.defaultValue,\n        onChange: (value)=>local.onChange?.(value)\n    });\n    const context = {\n        isDisabled: ()=>local.disabled,\n        isSelectedValue: (value)=>value === selected(),\n        setSelectedValue: setSelected\n    };\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MenuRadioGroupContext.Provider, {\n        value: context,\n        get children () {\n            return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MenuGroup, others);\n        }\n    });\n}\nfunction MenuRadioItem(props) {\n    const context = useMenuRadioGroupContext();\n    const mergedProps = mergeDefaultProps({\n        closeOnSelect: false\n    }, props);\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(mergedProps, [\n        \"value\",\n        \"onSelect\"\n    ]);\n    const onSelect = ()=>{\n        local.onSelect?.();\n        context.setSelectedValue(local.value);\n    };\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MenuItemBase, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        role: \"menuitemradio\",\n        get checked () {\n            return context.isSelectedValue(local.value);\n        },\n        onSelect\n    }, others));\n}\nfunction getPointerGraceArea(placement, event, contentEl) {\n    const basePlacement = placement.split(\"-\")[0];\n    const contentRect = contentEl.getBoundingClientRect();\n    const polygon = [];\n    const pointerX = event.clientX;\n    const pointerY = event.clientY;\n    switch(basePlacement){\n        case \"top\":\n            polygon.push([\n                pointerX,\n                pointerY + 5\n            ]);\n            polygon.push([\n                contentRect.left,\n                contentRect.bottom\n            ]);\n            polygon.push([\n                contentRect.left,\n                contentRect.top\n            ]);\n            polygon.push([\n                contentRect.right,\n                contentRect.top\n            ]);\n            polygon.push([\n                contentRect.right,\n                contentRect.bottom\n            ]);\n            break;\n        case \"right\":\n            polygon.push([\n                pointerX - 5,\n                pointerY\n            ]);\n            polygon.push([\n                contentRect.left,\n                contentRect.top\n            ]);\n            polygon.push([\n                contentRect.right,\n                contentRect.top\n            ]);\n            polygon.push([\n                contentRect.right,\n                contentRect.bottom\n            ]);\n            polygon.push([\n                contentRect.left,\n                contentRect.bottom\n            ]);\n            break;\n        case \"bottom\":\n            polygon.push([\n                pointerX,\n                pointerY - 5\n            ]);\n            polygon.push([\n                contentRect.right,\n                contentRect.top\n            ]);\n            polygon.push([\n                contentRect.right,\n                contentRect.bottom\n            ]);\n            polygon.push([\n                contentRect.left,\n                contentRect.bottom\n            ]);\n            polygon.push([\n                contentRect.left,\n                contentRect.top\n            ]);\n            break;\n        case \"left\":\n            polygon.push([\n                pointerX + 5,\n                pointerY\n            ]);\n            polygon.push([\n                contentRect.right,\n                contentRect.bottom\n            ]);\n            polygon.push([\n                contentRect.left,\n                contentRect.bottom\n            ]);\n            polygon.push([\n                contentRect.left,\n                contentRect.top\n            ]);\n            polygon.push([\n                contentRect.right,\n                contentRect.top\n            ]);\n            break;\n    }\n    return polygon;\n}\nfunction isPointerInGraceArea(event, area) {\n    if (!area) {\n        return false;\n    }\n    return isPointInPolygon([\n        event.clientX,\n        event.clientY\n    ], area);\n}\nfunction Menu(props) {\n    const rootContext = useMenuRootContext();\n    const parentDomCollectionContext = useOptionalDomCollectionContext();\n    const parentMenuContext = useOptionalMenuContext();\n    const optionalMenubarContext = useOptionalMenubarContext();\n    const optionalNavigationMenuContext = useOptionalNavigationMenuContext();\n    const mergedProps = mergeDefaultProps({\n        placement: rootContext.orientation() === \"horizontal\" ? \"bottom-start\" : \"right-start\"\n    }, props);\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(mergedProps, [\n        \"open\",\n        \"defaultOpen\",\n        \"onOpenChange\"\n    ]);\n    let pointerGraceTimeoutId = 0;\n    let pointerGraceIntent = null;\n    let pointerDir = \"right\";\n    const [triggerId, setTriggerId] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [contentId, setContentId] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [triggerRef, setTriggerRef] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [contentRef, setContentRef] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [focusStrategy, setFocusStrategy] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(true);\n    const [currentPlacement, setCurrentPlacement] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(others.placement);\n    const [nestedMenus, setNestedMenus] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)([]);\n    const [items, setItems] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)([]);\n    const { DomCollectionProvider } = createDomCollection({\n        items,\n        onItemsChange: setItems\n    });\n    const disclosureState = createDisclosureState({\n        open: ()=>local.open,\n        defaultOpen: ()=>local.defaultOpen,\n        onOpenChange: (isOpen)=>local.onOpenChange?.(isOpen)\n    });\n    const { present: contentPresent } = src_default({\n        show: ()=>rootContext.forceMount() || disclosureState.isOpen(),\n        element: ()=>contentRef() ?? null\n    });\n    const listState = createListState({\n        selectionMode: \"none\",\n        dataSource: items\n    });\n    const open = (focusStrategy2)=>{\n        setFocusStrategy(focusStrategy2);\n        disclosureState.open();\n    };\n    const close = (recursively = false)=>{\n        disclosureState.close();\n        if (recursively && parentMenuContext) {\n            parentMenuContext.close(true);\n        }\n    };\n    const toggle = (focusStrategy2)=>{\n        setFocusStrategy(focusStrategy2);\n        disclosureState.toggle();\n    };\n    const _focusContent = ()=>{\n        const content = contentRef();\n        if (content) {\n            focusWithoutScrolling(content);\n            listState.selectionManager().setFocused(true);\n            listState.selectionManager().setFocusedKey(void 0);\n        }\n    };\n    const focusContent = ()=>{\n        if (optionalNavigationMenuContext != null) setTimeout(()=>_focusContent());\n        else _focusContent();\n    };\n    const registerNestedMenu = (element)=>{\n        setNestedMenus((prev)=>[\n                ...prev,\n                element\n            ]);\n        const parentUnregister = parentMenuContext?.registerNestedMenu(element);\n        return ()=>{\n            setNestedMenus((prev)=>removeItemFromArray(prev, element));\n            parentUnregister?.();\n        };\n    };\n    const isPointerMovingToSubmenu = (e2)=>{\n        const isMovingTowards = pointerDir === pointerGraceIntent?.side;\n        return isMovingTowards && isPointerInGraceArea(e2, pointerGraceIntent?.area);\n    };\n    const onItemEnter = (e2)=>{\n        if (isPointerMovingToSubmenu(e2)) {\n            e2.preventDefault();\n        }\n    };\n    const onItemLeave = (e2)=>{\n        if (isPointerMovingToSubmenu(e2)) {\n            return;\n        }\n        focusContent();\n    };\n    const onTriggerLeave = (e2)=>{\n        if (isPointerMovingToSubmenu(e2)) {\n            e2.preventDefault();\n        }\n    };\n    createHideOutside({\n        isDisabled: ()=>{\n            return !(parentMenuContext == null && disclosureState.isOpen() && rootContext.isModal());\n        },\n        targets: ()=>[\n                contentRef(),\n                ...nestedMenus()\n            ].filter(Boolean)\n    });\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        const contentEl = contentRef();\n        if (!contentEl || !parentMenuContext) {\n            return;\n        }\n        const parentUnregister = parentMenuContext.registerNestedMenu(contentEl);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            parentUnregister();\n        });\n    });\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (parentMenuContext !== void 0) return;\n        optionalMenubarContext?.registerMenu(rootContext.value(), [\n            contentRef(),\n            ...nestedMenus()\n        ]);\n    });\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (parentMenuContext !== void 0 || optionalMenubarContext === void 0) return;\n        if (optionalMenubarContext.value() === rootContext.value()) {\n            triggerRef()?.focus();\n            if (optionalMenubarContext.autoFocusMenu()) open(true);\n        } else close();\n    });\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (parentMenuContext !== void 0 || optionalMenubarContext === void 0) return;\n        if (disclosureState.isOpen()) optionalMenubarContext.setValue(rootContext.value());\n    });\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n        if (parentMenuContext !== void 0) return;\n        optionalMenubarContext?.unregisterMenu(rootContext.value());\n    });\n    const dataset = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>({\n            \"data-expanded\": disclosureState.isOpen() ? \"\" : void 0,\n            \"data-closed\": !disclosureState.isOpen() ? \"\" : void 0\n        }));\n    const context = {\n        dataset,\n        isOpen: disclosureState.isOpen,\n        contentPresent,\n        nestedMenus,\n        currentPlacement,\n        pointerGraceTimeoutId: ()=>pointerGraceTimeoutId,\n        autoFocus: focusStrategy,\n        listState: ()=>listState,\n        parentMenuContext: ()=>parentMenuContext,\n        triggerRef,\n        contentRef,\n        triggerId,\n        contentId,\n        setTriggerRef,\n        setContentRef,\n        open,\n        close,\n        toggle,\n        focusContent,\n        onItemEnter,\n        onItemLeave,\n        onTriggerLeave,\n        setPointerDir: (dir)=>pointerDir = dir,\n        setPointerGraceTimeoutId: (id)=>pointerGraceTimeoutId = id,\n        setPointerGraceIntent: (intent)=>pointerGraceIntent = intent,\n        registerNestedMenu,\n        registerItemToParentDomCollection: parentDomCollectionContext?.registerItem,\n        registerTriggerId: createRegisterId(setTriggerId),\n        registerContentId: createRegisterId(setContentId)\n    };\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(DomCollectionProvider, {\n        get children () {\n            return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MenuContext.Provider, {\n                value: context,\n                get children () {\n                    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                        when: optionalNavigationMenuContext === void 0,\n                        get fallback () {\n                            return others.children;\n                        },\n                        get children () {\n                            return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Popper, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n                                anchorRef: triggerRef,\n                                contentRef,\n                                onCurrentPlacementChange: setCurrentPlacement\n                            }, others));\n                        }\n                    });\n                }\n            });\n        }\n    });\n}\nfunction MenuSub(props) {\n    const { direction } = useLocale();\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Menu, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        get placement () {\n            return direction() === \"rtl\" ? \"left-start\" : \"right-start\";\n        },\n        flip: true\n    }, props));\n}\nvar SUB_CLOSE_KEYS = {\n    close: (dir, orientation)=>{\n        if (dir === \"ltr\") {\n            return [\n                orientation === \"horizontal\" ? \"ArrowLeft\" : \"ArrowUp\"\n            ];\n        }\n        return [\n            orientation === \"horizontal\" ? \"ArrowRight\" : \"ArrowDown\"\n        ];\n    }\n};\nfunction MenuSubContent(props) {\n    const context = useMenuContext();\n    const rootContext = useMenuRootContext();\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"onFocusOutside\",\n        \"onKeyDown\"\n    ]);\n    const { direction } = useLocale();\n    const onOpenAutoFocus = (e2)=>{\n        e2.preventDefault();\n    };\n    const onCloseAutoFocus = (e2)=>{\n        e2.preventDefault();\n    };\n    const onFocusOutside = (e2)=>{\n        local.onFocusOutside?.(e2);\n        const target = e2.target;\n        if (!contains(context.triggerRef(), target)) {\n            context.close();\n        }\n    };\n    const onKeyDown = (e2)=>{\n        callHandler(e2, local.onKeyDown);\n        const isKeyDownInside = contains(e2.currentTarget, e2.target);\n        const isCloseKey = SUB_CLOSE_KEYS.close(direction(), rootContext.orientation()).includes(e2.key);\n        const isSubMenu = context.parentMenuContext() != null;\n        if (isKeyDownInside && isCloseKey && isSubMenu) {\n            context.close();\n            focusWithoutScrolling(context.triggerRef());\n        }\n    };\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MenuContentBase, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        onOpenAutoFocus,\n        onCloseAutoFocus,\n        onFocusOutside,\n        onKeyDown\n    }, others));\n}\nvar SELECTION_KEYS = [\n    \"Enter\",\n    \" \"\n];\nvar SUB_OPEN_KEYS = {\n    open: (dir, orientation)=>{\n        if (dir === \"ltr\") {\n            return [\n                ...SELECTION_KEYS,\n                orientation === \"horizontal\" ? \"ArrowRight\" : \"ArrowDown\"\n            ];\n        }\n        return [\n            ...SELECTION_KEYS,\n            orientation === \"horizontal\" ? \"ArrowLeft\" : \"ArrowUp\"\n        ];\n    }\n};\nfunction MenuSubTrigger(props) {\n    let ref;\n    const rootContext = useMenuRootContext();\n    const context = useMenuContext();\n    const mergedProps = mergeDefaultProps({\n        id: rootContext.generateId(`sub-trigger-${(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createUniqueId)()}`)\n    }, props);\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(mergedProps, [\n        \"ref\",\n        \"id\",\n        \"textValue\",\n        \"disabled\",\n        \"onPointerMove\",\n        \"onPointerLeave\",\n        \"onPointerDown\",\n        \"onPointerUp\",\n        \"onClick\",\n        \"onKeyDown\",\n        \"onMouseDown\",\n        \"onFocus\"\n    ]);\n    let openTimeoutId = null;\n    const clearOpenTimeout = ()=>{\n        if (_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.isServer) {\n            return;\n        }\n        if (openTimeoutId) {\n            window.clearTimeout(openTimeoutId);\n        }\n        openTimeoutId = null;\n    };\n    const { direction } = useLocale();\n    const key = ()=>local.id;\n    const parentSelectionManager = ()=>{\n        const parentMenuContext = context.parentMenuContext();\n        if (parentMenuContext == null) {\n            throw new Error(\"[kobalte]: `Menu.SubTrigger` must be used within a `Menu.Sub` component\");\n        }\n        return parentMenuContext.listState().selectionManager();\n    };\n    const collection = ()=>context.listState().collection();\n    const isHighlighted = ()=>parentSelectionManager().focusedKey() === key();\n    const selectableItem = createSelectableItem({\n        key,\n        selectionManager: parentSelectionManager,\n        shouldSelectOnPressUp: true,\n        allowsDifferentPressOrigin: true,\n        disabled: ()=>local.disabled\n    }, ()=>ref);\n    const onClick = (e2)=>{\n        callHandler(e2, local.onClick);\n        if (!context.isOpen() && !local.disabled) {\n            context.open(true);\n        }\n    };\n    const onPointerMove = (e2)=>{\n        callHandler(e2, local.onPointerMove);\n        if (e2.pointerType !== \"mouse\") {\n            return;\n        }\n        const parentMenuContext = context.parentMenuContext();\n        parentMenuContext?.onItemEnter(e2);\n        if (e2.defaultPrevented) {\n            return;\n        }\n        if (local.disabled) {\n            parentMenuContext?.onItemLeave(e2);\n            return;\n        }\n        if (!context.isOpen() && !openTimeoutId) {\n            context.parentMenuContext()?.setPointerGraceIntent(null);\n            openTimeoutId = window.setTimeout(()=>{\n                context.open(false);\n                clearOpenTimeout();\n            }, 100);\n        }\n        parentMenuContext?.onItemEnter(e2);\n        if (!e2.defaultPrevented) {\n            if (context.listState().selectionManager().isFocused()) {\n                context.listState().selectionManager().setFocused(false);\n                context.listState().selectionManager().setFocusedKey(void 0);\n            }\n            focusWithoutScrolling(e2.currentTarget);\n            parentMenuContext?.listState().selectionManager().setFocused(true);\n            parentMenuContext?.listState().selectionManager().setFocusedKey(key());\n        }\n    };\n    const onPointerLeave = (e2)=>{\n        callHandler(e2, local.onPointerLeave);\n        if (e2.pointerType !== \"mouse\") {\n            return;\n        }\n        clearOpenTimeout();\n        const parentMenuContext = context.parentMenuContext();\n        const contentEl = context.contentRef();\n        if (contentEl) {\n            parentMenuContext?.setPointerGraceIntent({\n                area: getPointerGraceArea(context.currentPlacement(), e2, contentEl),\n                // Safe because sub menu always open \"left\" or \"right\".\n                side: context.currentPlacement().split(\"-\")[0]\n            });\n            window.clearTimeout(parentMenuContext?.pointerGraceTimeoutId());\n            const pointerGraceTimeoutId = window.setTimeout(()=>{\n                parentMenuContext?.setPointerGraceIntent(null);\n            }, 300);\n            parentMenuContext?.setPointerGraceTimeoutId(pointerGraceTimeoutId);\n        } else {\n            parentMenuContext?.onTriggerLeave(e2);\n            if (e2.defaultPrevented) {\n                return;\n            }\n            parentMenuContext?.setPointerGraceIntent(null);\n        }\n        parentMenuContext?.onItemLeave(e2);\n    };\n    const onKeyDown = (e2)=>{\n        callHandler(e2, local.onKeyDown);\n        if (e2.repeat) {\n            return;\n        }\n        if (local.disabled) {\n            return;\n        }\n        if (SUB_OPEN_KEYS.open(direction(), rootContext.orientation()).includes(e2.key)) {\n            e2.stopPropagation();\n            e2.preventDefault();\n            parentSelectionManager().setFocused(false);\n            parentSelectionManager().setFocusedKey(void 0);\n            if (!context.isOpen()) {\n                context.open(\"first\");\n            }\n            context.focusContent();\n            context.listState().selectionManager().setFocused(true);\n            context.listState().selectionManager().setFocusedKey(collection().getFirstKey());\n        }\n    };\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (context.registerItemToParentDomCollection == null) {\n            throw new Error(\"[kobalte]: `Menu.SubTrigger` must be used within a `Menu.Sub` component\");\n        }\n        const unregister = context.registerItemToParentDomCollection({\n            ref: ()=>ref,\n            type: \"item\",\n            key: key(),\n            textValue: local.textValue ?? ref?.textContent ?? \"\",\n            disabled: local.disabled ?? false\n        });\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(unregister);\n    });\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)((0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.on)(()=>context.parentMenuContext()?.pointerGraceTimeoutId(), (pointerGraceTimer)=>{\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            window.clearTimeout(pointerGraceTimer);\n            context.parentMenuContext()?.setPointerGraceIntent(null);\n        });\n    }));\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(context.registerTriggerId(local.id)));\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n        clearOpenTimeout();\n    });\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"div\",\n        ref (r$) {\n            const _ref$ = mergeRefs((el)=>{\n                context.setTriggerRef(el);\n                ref = el;\n            }, local.ref);\n            typeof _ref$ === \"function\" && _ref$(r$);\n        },\n        get id () {\n            return local.id;\n        },\n        role: \"menuitem\",\n        get tabIndex () {\n            return selectableItem.tabIndex();\n        },\n        \"aria-haspopup\": \"true\",\n        get [\"aria-expanded\"] () {\n            return context.isOpen();\n        },\n        get [\"aria-controls\"] () {\n            return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>!!context.isOpen())() ? context.contentId() : void 0;\n        },\n        get [\"aria-disabled\"] () {\n            return local.disabled;\n        },\n        get [\"data-key\"] () {\n            return selectableItem.dataKey();\n        },\n        get [\"data-highlighted\"] () {\n            return isHighlighted() ? \"\" : void 0;\n        },\n        get [\"data-disabled\"] () {\n            return local.disabled ? \"\" : void 0;\n        },\n        get onPointerDown () {\n            return composeEventHandlers([\n                local.onPointerDown,\n                selectableItem.onPointerDown\n            ]);\n        },\n        get onPointerUp () {\n            return composeEventHandlers([\n                local.onPointerUp,\n                selectableItem.onPointerUp\n            ]);\n        },\n        get onClick () {\n            return composeEventHandlers([\n                onClick,\n                selectableItem.onClick\n            ]);\n        },\n        get onKeyDown () {\n            return composeEventHandlers([\n                onKeyDown,\n                selectableItem.onKeyDown\n            ]);\n        },\n        get onMouseDown () {\n            return composeEventHandlers([\n                local.onMouseDown,\n                selectableItem.onMouseDown\n            ]);\n        },\n        get onFocus () {\n            return composeEventHandlers([\n                local.onFocus,\n                selectableItem.onFocus\n            ]);\n        },\n        onPointerMove,\n        onPointerLeave\n    }, ()=>context.dataset(), others));\n}\nfunction MenuRoot(props) {\n    const optionalMenubarContext = useOptionalMenubarContext();\n    const defaultId = `menu-${(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createUniqueId)()}`;\n    const mergedProps = mergeDefaultProps({\n        id: defaultId,\n        modal: true\n    }, props);\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(mergedProps, [\n        \"id\",\n        \"modal\",\n        \"preventScroll\",\n        \"forceMount\",\n        \"open\",\n        \"defaultOpen\",\n        \"onOpenChange\",\n        \"value\",\n        \"orientation\"\n    ]);\n    const disclosureState = createDisclosureState({\n        open: ()=>local.open,\n        defaultOpen: ()=>local.defaultOpen,\n        onOpenChange: (isOpen)=>local.onOpenChange?.(isOpen)\n    });\n    const context = {\n        isModal: ()=>local.modal ?? true,\n        preventScroll: ()=>local.preventScroll ?? context.isModal(),\n        forceMount: ()=>local.forceMount ?? false,\n        generateId: createGenerateId(()=>local.id),\n        value: ()=>local.value,\n        orientation: ()=>local.orientation ?? optionalMenubarContext?.orientation() ?? \"horizontal\"\n    };\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MenuRootContext.Provider, {\n        value: context,\n        get children () {\n            return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Menu, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n                get open () {\n                    return disclosureState.isOpen();\n                },\n                get onOpenChange () {\n                    return disclosureState.setIsOpen;\n                }\n            }, others));\n        }\n    });\n}\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/STGRFJHZ.js\nvar separator_exports = {};\n__export(separator_exports, {\n    Root: ()=>SeparatorRoot,\n    Separator: ()=>Separator\n});\nfunction SeparatorRoot(props) {\n    let ref;\n    const mergedProps = mergeDefaultProps({\n        orientation: \"horizontal\"\n    }, props);\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(mergedProps, [\n        \"ref\",\n        \"orientation\"\n    ]);\n    const tagName = createTagName(()=>ref, ()=>\"hr\");\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"hr\",\n        ref (r$) {\n            const _ref$ = mergeRefs((el)=>ref = el, local.ref);\n            typeof _ref$ === \"function\" && _ref$(r$);\n        },\n        get role () {\n            return tagName() !== \"hr\" ? \"separator\" : void 0;\n        },\n        get [\"aria-orientation\"] () {\n            return local.orientation === \"vertical\" ? \"vertical\" : void 0;\n        },\n        get [\"data-orientation\"] () {\n            return local.orientation;\n        }\n    }, others));\n}\nvar Separator = SeparatorRoot;\n// ../../node_modules/.pnpm/@kobalte+core@0.13.4_solid-js@1.9.5/node_modules/@kobalte/core/dist/chunk/V2JBZ7BJ.js\nvar dropdown_menu_exports = {};\n__export(dropdown_menu_exports, {\n    Arrow: ()=>PopperArrow,\n    CheckboxItem: ()=>MenuCheckboxItem,\n    Content: ()=>DropdownMenuContent,\n    DropdownMenu: ()=>DropdownMenu,\n    Group: ()=>MenuGroup,\n    GroupLabel: ()=>MenuGroupLabel,\n    Icon: ()=>MenuIcon,\n    Item: ()=>MenuItem,\n    ItemDescription: ()=>MenuItemDescription,\n    ItemIndicator: ()=>MenuItemIndicator,\n    ItemLabel: ()=>MenuItemLabel,\n    Portal: ()=>MenuPortal,\n    RadioGroup: ()=>MenuRadioGroup,\n    RadioItem: ()=>MenuRadioItem,\n    Root: ()=>DropdownMenuRoot,\n    Separator: ()=>SeparatorRoot,\n    Sub: ()=>MenuSub,\n    SubContent: ()=>MenuSubContent,\n    SubTrigger: ()=>MenuSubTrigger,\n    Trigger: ()=>MenuTrigger\n});\nfunction DropdownMenuContent(props) {\n    const rootContext = useMenuRootContext();\n    const context = useMenuContext();\n    const [local, others] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"onCloseAutoFocus\",\n        \"onInteractOutside\"\n    ]);\n    let hasInteractedOutside = false;\n    const onCloseAutoFocus = (e2)=>{\n        local.onCloseAutoFocus?.(e2);\n        if (!hasInteractedOutside) {\n            focusWithoutScrolling(context.triggerRef());\n        }\n        hasInteractedOutside = false;\n        e2.preventDefault();\n    };\n    const onInteractOutside = (e2)=>{\n        local.onInteractOutside?.(e2);\n        if (!rootContext.isModal() || e2.detail.isContextMenu) {\n            hasInteractedOutside = true;\n        }\n    };\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MenuContent, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        onCloseAutoFocus,\n        onInteractOutside\n    }, others));\n}\nfunction DropdownMenuRoot(props) {\n    const defaultId = `dropdownmenu-${(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createUniqueId)()}`;\n    const mergedProps = mergeDefaultProps({\n        id: defaultId\n    }, props);\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MenuRoot, mergedProps);\n}\nvar DropdownMenu = Object.assign(DropdownMenuRoot, {\n    Arrow: PopperArrow,\n    CheckboxItem: MenuCheckboxItem,\n    Content: DropdownMenuContent,\n    Group: MenuGroup,\n    GroupLabel: MenuGroupLabel,\n    Icon: MenuIcon,\n    Item: MenuItem,\n    ItemDescription: MenuItemDescription,\n    ItemIndicator: MenuItemIndicator,\n    ItemLabel: MenuItemLabel,\n    Portal: MenuPortal,\n    RadioGroup: MenuRadioGroup,\n    RadioItem: MenuRadioItem,\n    Separator: SeparatorRoot,\n    Sub: MenuSub,\n    SubContent: MenuSubContent,\n    SubTrigger: MenuSubTrigger,\n    Trigger: MenuTrigger\n});\n// src/theme.ts\nvar tokens = {\n    colors: {\n        inherit: \"inherit\",\n        current: \"currentColor\",\n        transparent: \"transparent\",\n        black: \"#000000\",\n        white: \"#ffffff\",\n        neutral: {\n            50: \"#f9fafb\",\n            100: \"#f2f4f7\",\n            200: \"#eaecf0\",\n            300: \"#d0d5dd\",\n            400: \"#98a2b3\",\n            500: \"#667085\",\n            600: \"#475467\",\n            700: \"#344054\",\n            800: \"#1d2939\",\n            900: \"#101828\"\n        },\n        darkGray: {\n            50: \"#525c7a\",\n            100: \"#49536e\",\n            200: \"#414962\",\n            300: \"#394056\",\n            400: \"#313749\",\n            500: \"#292e3d\",\n            600: \"#212530\",\n            700: \"#191c24\",\n            800: \"#111318\",\n            900: \"#0b0d10\"\n        },\n        gray: {\n            50: \"#f9fafb\",\n            100: \"#f2f4f7\",\n            200: \"#eaecf0\",\n            300: \"#d0d5dd\",\n            400: \"#98a2b3\",\n            500: \"#667085\",\n            600: \"#475467\",\n            700: \"#344054\",\n            800: \"#1d2939\",\n            900: \"#101828\"\n        },\n        blue: {\n            25: \"#F5FAFF\",\n            50: \"#EFF8FF\",\n            100: \"#D1E9FF\",\n            200: \"#B2DDFF\",\n            300: \"#84CAFF\",\n            400: \"#53B1FD\",\n            500: \"#2E90FA\",\n            600: \"#1570EF\",\n            700: \"#175CD3\",\n            800: \"#1849A9\",\n            900: \"#194185\"\n        },\n        green: {\n            25: \"#F6FEF9\",\n            50: \"#ECFDF3\",\n            100: \"#D1FADF\",\n            200: \"#A6F4C5\",\n            300: \"#6CE9A6\",\n            400: \"#32D583\",\n            500: \"#12B76A\",\n            600: \"#039855\",\n            700: \"#027A48\",\n            800: \"#05603A\",\n            900: \"#054F31\"\n        },\n        red: {\n            50: \"#fef2f2\",\n            100: \"#fee2e2\",\n            200: \"#fecaca\",\n            300: \"#fca5a5\",\n            400: \"#f87171\",\n            500: \"#ef4444\",\n            600: \"#dc2626\",\n            700: \"#b91c1c\",\n            800: \"#991b1b\",\n            900: \"#7f1d1d\",\n            950: \"#450a0a\"\n        },\n        yellow: {\n            25: \"#FFFCF5\",\n            50: \"#FFFAEB\",\n            100: \"#FEF0C7\",\n            200: \"#FEDF89\",\n            300: \"#FEC84B\",\n            400: \"#FDB022\",\n            500: \"#F79009\",\n            600: \"#DC6803\",\n            700: \"#B54708\",\n            800: \"#93370D\",\n            900: \"#7A2E0E\"\n        },\n        purple: {\n            25: \"#FAFAFF\",\n            50: \"#F4F3FF\",\n            100: \"#EBE9FE\",\n            200: \"#D9D6FE\",\n            300: \"#BDB4FE\",\n            400: \"#9B8AFB\",\n            500: \"#7A5AF8\",\n            600: \"#6938EF\",\n            700: \"#5925DC\",\n            800: \"#4A1FB8\",\n            900: \"#3E1C96\"\n        },\n        teal: {\n            25: \"#F6FEFC\",\n            50: \"#F0FDF9\",\n            100: \"#CCFBEF\",\n            200: \"#99F6E0\",\n            300: \"#5FE9D0\",\n            400: \"#2ED3B7\",\n            500: \"#15B79E\",\n            600: \"#0E9384\",\n            700: \"#107569\",\n            800: \"#125D56\",\n            900: \"#134E48\"\n        },\n        pink: {\n            25: \"#fdf2f8\",\n            50: \"#fce7f3\",\n            100: \"#fbcfe8\",\n            200: \"#f9a8d4\",\n            300: \"#f472b6\",\n            400: \"#ec4899\",\n            500: \"#db2777\",\n            600: \"#be185d\",\n            700: \"#9d174d\",\n            800: \"#831843\",\n            900: \"#500724\"\n        },\n        cyan: {\n            25: \"#ecfeff\",\n            50: \"#cffafe\",\n            100: \"#a5f3fc\",\n            200: \"#67e8f9\",\n            300: \"#22d3ee\",\n            400: \"#06b6d4\",\n            500: \"#0891b2\",\n            600: \"#0e7490\",\n            700: \"#155e75\",\n            800: \"#164e63\",\n            900: \"#083344\"\n        }\n    },\n    alpha: {\n        100: \"ff\",\n        90: \"e5\",\n        80: \"cc\",\n        70: \"b3\",\n        60: \"99\",\n        50: \"80\",\n        40: \"66\",\n        30: \"4d\",\n        20: \"33\",\n        10: \"1a\",\n        0: \"00\"\n    },\n    font: {\n        size: {\n            \"2xs\": \"calc(var(--tsqd-font-size) * 0.625)\",\n            xs: \"calc(var(--tsqd-font-size) * 0.75)\",\n            sm: \"calc(var(--tsqd-font-size) * 0.875)\",\n            md: \"var(--tsqd-font-size)\",\n            lg: \"calc(var(--tsqd-font-size) * 1.125)\",\n            xl: \"calc(var(--tsqd-font-size) * 1.25)\",\n            \"2xl\": \"calc(var(--tsqd-font-size) * 1.5)\",\n            \"3xl\": \"calc(var(--tsqd-font-size) * 1.875)\",\n            \"4xl\": \"calc(var(--tsqd-font-size) * 2.25)\",\n            \"5xl\": \"calc(var(--tsqd-font-size) * 3)\",\n            \"6xl\": \"calc(var(--tsqd-font-size) * 3.75)\",\n            \"7xl\": \"calc(var(--tsqd-font-size) * 4.5)\",\n            \"8xl\": \"calc(var(--tsqd-font-size) * 6)\",\n            \"9xl\": \"calc(var(--tsqd-font-size) * 8)\"\n        },\n        lineHeight: {\n            xs: \"calc(var(--tsqd-font-size) * 1)\",\n            sm: \"calc(var(--tsqd-font-size) * 1.25)\",\n            md: \"calc(var(--tsqd-font-size) * 1.5)\",\n            lg: \"calc(var(--tsqd-font-size) * 1.75)\",\n            xl: \"calc(var(--tsqd-font-size) * 2)\",\n            \"2xl\": \"calc(var(--tsqd-font-size) * 2.25)\",\n            \"3xl\": \"calc(var(--tsqd-font-size) * 2.5)\",\n            \"4xl\": \"calc(var(--tsqd-font-size) * 2.75)\",\n            \"5xl\": \"calc(var(--tsqd-font-size) * 3)\",\n            \"6xl\": \"calc(var(--tsqd-font-size) * 3.25)\",\n            \"7xl\": \"calc(var(--tsqd-font-size) * 3.5)\",\n            \"8xl\": \"calc(var(--tsqd-font-size) * 3.75)\",\n            \"9xl\": \"calc(var(--tsqd-font-size) * 4)\"\n        },\n        weight: {\n            thin: \"100\",\n            extralight: \"200\",\n            light: \"300\",\n            normal: \"400\",\n            medium: \"500\",\n            semibold: \"600\",\n            bold: \"700\",\n            extrabold: \"800\",\n            black: \"900\"\n        }\n    },\n    breakpoints: {\n        xs: \"320px\",\n        sm: \"640px\",\n        md: \"768px\",\n        lg: \"1024px\",\n        xl: \"1280px\",\n        \"2xl\": \"1536px\"\n    },\n    border: {\n        radius: {\n            none: \"0px\",\n            xs: \"calc(var(--tsqd-font-size) * 0.125)\",\n            sm: \"calc(var(--tsqd-font-size) * 0.25)\",\n            md: \"calc(var(--tsqd-font-size) * 0.375)\",\n            lg: \"calc(var(--tsqd-font-size) * 0.5)\",\n            xl: \"calc(var(--tsqd-font-size) * 0.75)\",\n            \"2xl\": \"calc(var(--tsqd-font-size) * 1)\",\n            \"3xl\": \"calc(var(--tsqd-font-size) * 1.5)\",\n            full: \"9999px\"\n        }\n    },\n    size: {\n        0: \"0px\",\n        0.25: \"calc(var(--tsqd-font-size) * 0.0625)\",\n        0.5: \"calc(var(--tsqd-font-size) * 0.125)\",\n        1: \"calc(var(--tsqd-font-size) * 0.25)\",\n        1.5: \"calc(var(--tsqd-font-size) * 0.375)\",\n        2: \"calc(var(--tsqd-font-size) * 0.5)\",\n        2.5: \"calc(var(--tsqd-font-size) * 0.625)\",\n        3: \"calc(var(--tsqd-font-size) * 0.75)\",\n        3.5: \"calc(var(--tsqd-font-size) * 0.875)\",\n        4: \"calc(var(--tsqd-font-size) * 1)\",\n        4.5: \"calc(var(--tsqd-font-size) * 1.125)\",\n        5: \"calc(var(--tsqd-font-size) * 1.25)\",\n        5.5: \"calc(var(--tsqd-font-size) * 1.375)\",\n        6: \"calc(var(--tsqd-font-size) * 1.5)\",\n        6.5: \"calc(var(--tsqd-font-size) * 1.625)\",\n        7: \"calc(var(--tsqd-font-size) * 1.75)\",\n        8: \"calc(var(--tsqd-font-size) * 2)\",\n        9: \"calc(var(--tsqd-font-size) * 2.25)\",\n        10: \"calc(var(--tsqd-font-size) * 2.5)\",\n        11: \"calc(var(--tsqd-font-size) * 2.75)\",\n        12: \"calc(var(--tsqd-font-size) * 3)\",\n        14: \"calc(var(--tsqd-font-size) * 3.5)\",\n        16: \"calc(var(--tsqd-font-size) * 4)\",\n        20: \"calc(var(--tsqd-font-size) * 5)\",\n        24: \"calc(var(--tsqd-font-size) * 6)\",\n        28: \"calc(var(--tsqd-font-size) * 7)\",\n        32: \"calc(var(--tsqd-font-size) * 8)\",\n        36: \"calc(var(--tsqd-font-size) * 9)\",\n        40: \"calc(var(--tsqd-font-size) * 10)\",\n        44: \"calc(var(--tsqd-font-size) * 11)\",\n        48: \"calc(var(--tsqd-font-size) * 12)\",\n        52: \"calc(var(--tsqd-font-size) * 13)\",\n        56: \"calc(var(--tsqd-font-size) * 14)\",\n        60: \"calc(var(--tsqd-font-size) * 15)\",\n        64: \"calc(var(--tsqd-font-size) * 16)\",\n        72: \"calc(var(--tsqd-font-size) * 18)\",\n        80: \"calc(var(--tsqd-font-size) * 20)\",\n        96: \"calc(var(--tsqd-font-size) * 24)\"\n    },\n    shadow: {\n        xs: (_ = \"rgb(0 0 0 / 0.1)\")=>`0 1px 2px 0 rgb(0 0 0 / 0.05)`,\n        sm: (color = \"rgb(0 0 0 / 0.1)\")=>`0 1px 3px 0 ${color}, 0 1px 2px -1px ${color}`,\n        md: (color = \"rgb(0 0 0 / 0.1)\")=>`0 4px 6px -1px ${color}, 0 2px 4px -2px ${color}`,\n        lg: (color = \"rgb(0 0 0 / 0.1)\")=>`0 10px 15px -3px ${color}, 0 4px 6px -4px ${color}`,\n        xl: (color = \"rgb(0 0 0 / 0.1)\")=>`0 20px 25px -5px ${color}, 0 8px 10px -6px ${color}`,\n        \"2xl\": (color = \"rgb(0 0 0 / 0.25)\")=>`0 25px 50px -12px ${color}`,\n        inner: (color = \"rgb(0 0 0 / 0.05)\")=>`inset 0 2px 4px 0 ${color}`,\n        none: ()=>`none`\n    },\n    zIndices: {\n        hide: -1,\n        auto: \"auto\",\n        base: 0,\n        docked: 10,\n        dropdown: 1e3,\n        sticky: 1100,\n        banner: 1200,\n        overlay: 1300,\n        modal: 1400,\n        popover: 1500,\n        skipLink: 1600,\n        toast: 1700,\n        tooltip: 1800\n    }\n};\n// src/icons/index.tsx\nvar _tmpl$2 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=14 height=14 viewBox=\"0 0 14 14\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M13 13L9.00007 9M10.3333 5.66667C10.3333 8.244 8.244 10.3333 5.66667 10.3333C3.08934 10.3333 1 8.244 1 5.66667C1 3.08934 3.08934 1 5.66667 1C8.244 1 10.3333 3.08934 10.3333 5.66667Z\"stroke=currentColor stroke-width=1.66667 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$22 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=24 height=24 viewBox=\"0 0 24 24\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M9 3H15M3 6H21M19 6L18.2987 16.5193C18.1935 18.0975 18.1409 18.8867 17.8 19.485C17.4999 20.0118 17.0472 20.4353 16.5017 20.6997C15.882 21 15.0911 21 13.5093 21H10.4907C8.90891 21 8.11803 21 7.49834 20.6997C6.95276 20.4353 6.50009 20.0118 6.19998 19.485C5.85911 18.8867 5.8065 18.0975 5.70129 16.5193L5 6M10 10.5V15.5M14 10.5V15.5\"stroke=currentColor stroke-width=2 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$3 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=10 height=6 viewBox=\"0 0 10 6\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M1 1L5 5L9 1\"stroke=currentColor stroke-width=1.66667 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$4 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=12 height=12 viewBox=\"0 0 16 16\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M8 13.3333V2.66667M8 2.66667L4 6.66667M8 2.66667L12 6.66667\"stroke=currentColor stroke-width=1.66667 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$5 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=12 height=12 viewBox=\"0 0 16 16\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M8 2.66667V13.3333M8 13.3333L4 9.33333M8 13.3333L12 9.33333\"stroke=currentColor stroke-width=1.66667 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$6 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg viewBox=\"0 0 24 24\"height=12 width=12 fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M12 2v2m0 16v2M4 12H2m4.314-5.686L4.9 4.9m12.786 1.414L19.1 4.9M6.314 17.69 4.9 19.104m12.786-1.414 1.414 1.414M22 12h-2m-3 0a5 5 0 1 1-10 0 5 5 0 0 1 10 0Z\"stroke=currentColor stroke-width=2 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$7 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg viewBox=\"0 0 24 24\"height=12 width=12 fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M22 15.844a10.424 10.424 0 0 1-4.306.925c-5.779 0-10.463-4.684-10.463-10.462 0-1.536.33-2.994.925-4.307A10.464 10.464 0 0 0 2 11.538C2 17.316 6.684 22 12.462 22c4.243 0 7.896-2.526 9.538-6.156Z\"stroke=currentColor stroke-width=2 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$8 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg viewBox=\"0 0 24 24\"height=12 width=12 fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M8 21h8m-4-4v4m-5.2-4h10.4c1.68 0 2.52 0 3.162-.327a3 3 0 0 0 1.311-1.311C22 14.72 22 13.88 22 12.2V7.8c0-1.68 0-2.52-.327-3.162a3 3 0 0 0-1.311-1.311C19.72 3 18.88 3 17.2 3H6.8c-1.68 0-2.52 0-3.162.327a3 3 0 0 0-1.311 1.311C2 5.28 2 6.12 2 7.8v4.4c0 1.68 0 2.52.327 3.162a3 3 0 0 0 1.311 1.311C4.28 17 5.12 17 6.8 17Z\"stroke=currentColor stroke-width=2 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$9 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg stroke=currentColor fill=currentColor stroke-width=0 viewBox=\"0 0 24 24\"height=1em width=1em xmlns=http://www.w3.org/2000/svg><path fill=none d=\"M0 0h24v24H0z\"></path><path d=\"M1 9l2 2c4.97-4.97 13.03-4.97 18 0l2-2C16.93 2.93 7.08 2.93 1 9zm8 8l3 3 3-3a4.237 4.237 0 00-6 0zm-4-4l2 2a7.074 7.074 0 0110 0l2-2C15.14 9.14 8.87 9.14 5 13z\">`);\nvar _tmpl$10 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg stroke-width=0 viewBox=\"0 0 24 24\"height=1em width=1em xmlns=http://www.w3.org/2000/svg><path fill=none d=\"M24 .01c0-.01 0-.01 0 0L0 0v24h24V.01zM0 0h24v24H0V0zm0 0h24v24H0V0z\"></path><path d=\"M22.99 9C19.15 5.16 13.8 3.76 8.84 4.78l2.52 2.52c3.47-.17 6.99 1.05 9.63 3.7l2-2zm-4 4a9.793 9.793 0 00-4.49-2.56l3.53 3.53.96-.97zM2 3.05L5.07 6.1C3.6 6.82 2.22 7.78 1 9l1.99 2c1.24-1.24 2.67-2.16 4.2-2.77l2.24 2.24A9.684 9.684 0 005 13v.01L6.99 15a7.042 7.042 0 014.92-2.06L18.98 20l1.27-1.26L3.29 1.79 2 3.05zM9 17l3 3 3-3a4.237 4.237 0 00-6 0z\">`);\nvar _tmpl$11 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=24 height=24 viewBox=\"0 0 24 24\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M9.3951 19.3711L9.97955 20.6856C10.1533 21.0768 10.4368 21.4093 10.7958 21.6426C11.1547 21.8759 11.5737 22.0001 12.0018 22C12.4299 22.0001 12.8488 21.8759 13.2078 21.6426C13.5667 21.4093 13.8503 21.0768 14.024 20.6856L14.6084 19.3711C14.8165 18.9047 15.1664 18.5159 15.6084 18.26C16.0532 18.0034 16.5678 17.8941 17.0784 17.9478L18.5084 18.1C18.9341 18.145 19.3637 18.0656 19.7451 17.8713C20.1265 17.6771 20.4434 17.3763 20.6573 17.0056C20.8715 16.635 20.9735 16.2103 20.9511 15.7829C20.9286 15.3555 20.7825 14.9438 20.5307 14.5978L19.684 13.4344C19.3825 13.0171 19.2214 12.5148 19.224 12C19.2239 11.4866 19.3865 10.9864 19.6884 10.5711L20.5351 9.40778C20.787 9.06175 20.933 8.65007 20.9555 8.22267C20.978 7.79528 20.8759 7.37054 20.6618 7C20.4479 6.62923 20.131 6.32849 19.7496 6.13423C19.3681 5.93997 18.9386 5.86053 18.5129 5.90556L17.0829 6.05778C16.5722 6.11141 16.0577 6.00212 15.6129 5.74556C15.17 5.48825 14.82 5.09736 14.6129 4.62889L14.024 3.31444C13.8503 2.92317 13.5667 2.59072 13.2078 2.3574C12.8488 2.12408 12.4299 1.99993 12.0018 2C11.5737 1.99993 11.1547 2.12408 10.7958 2.3574C10.4368 2.59072 10.1533 2.92317 9.97955 3.31444L9.3951 4.62889C9.18803 5.09736 8.83798 5.48825 8.3951 5.74556C7.95032 6.00212 7.43577 6.11141 6.9251 6.05778L5.49066 5.90556C5.06499 5.86053 4.6354 5.93997 4.25397 6.13423C3.87255 6.32849 3.55567 6.62923 3.34177 7C3.12759 7.37054 3.02555 7.79528 3.04804 8.22267C3.07052 8.65007 3.21656 9.06175 3.46844 9.40778L4.3151 10.5711C4.61704 10.9864 4.77964 11.4866 4.77955 12C4.77964 12.5134 4.61704 13.0137 4.3151 13.4289L3.46844 14.5922C3.21656 14.9382 3.07052 15.3499 3.04804 15.7773C3.02555 16.2047 3.12759 16.6295 3.34177 17C3.55589 17.3706 3.8728 17.6712 4.25417 17.8654C4.63554 18.0596 5.06502 18.1392 5.49066 18.0944L6.92066 17.9422C7.43133 17.8886 7.94587 17.9979 8.39066 18.2544C8.83519 18.511 9.18687 18.902 9.3951 19.3711Z\"stroke=currentColor stroke-width=2 stroke-linecap=round stroke-linejoin=round></path><path d=\"M12 15C13.6568 15 15 13.6569 15 12C15 10.3431 13.6568 9 12 9C10.3431 9 8.99998 10.3431 8.99998 12C8.99998 13.6569 10.3431 15 12 15Z\"stroke=currentColor stroke-width=2 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$12 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=24 height=24 viewBox=\"0 0 24 24\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M16 21H16.2C17.8802 21 18.7202 21 19.362 20.673C19.9265 20.3854 20.3854 19.9265 20.673 19.362C21 18.7202 21 17.8802 21 16.2V7.8C21 6.11984 21 5.27976 20.673 4.63803C20.3854 4.07354 19.9265 3.6146 19.362 3.32698C18.7202 3 17.8802 3 16.2 3H7.8C6.11984 3 5.27976 3 4.63803 3.32698C4.07354 3.6146 3.6146 4.07354 3.32698 4.63803C3 5.27976 3 6.11984 3 7.8V8M11.5 12.5L17 7M17 7H12M17 7V12M6.2 21H8.8C9.9201 21 10.4802 21 10.908 20.782C11.2843 20.5903 11.5903 20.2843 11.782 19.908C12 19.4802 12 18.9201 12 17.8V15.2C12 14.0799 12 13.5198 11.782 13.092C11.5903 12.7157 11.2843 12.4097 10.908 12.218C10.4802 12 9.92011 12 8.8 12H6.2C5.0799 12 4.51984 12 4.09202 12.218C3.71569 12.4097 3.40973 12.7157 3.21799 13.092C3 13.5198 3 14.0799 3 15.2V17.8C3 18.9201 3 19.4802 3.21799 19.908C3.40973 20.2843 3.71569 20.5903 4.09202 20.782C4.51984 21 5.07989 21 6.2 21Z\"stroke=currentColor stroke-width=2 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$13 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=24 height=24 viewBox=\"0 0 24 24\"fill=none xmlns=http://www.w3.org/2000/svg><path class=copier d=\"M8 8V5.2C8 4.0799 8 3.51984 8.21799 3.09202C8.40973 2.71569 8.71569 2.40973 9.09202 2.21799C9.51984 2 10.0799 2 11.2 2H18.8C19.9201 2 20.4802 2 20.908 2.21799C21.2843 2.40973 21.5903 2.71569 21.782 3.09202C22 3.51984 22 4.0799 22 5.2V12.8C22 13.9201 22 14.4802 21.782 14.908C21.5903 15.2843 21.2843 15.5903 20.908 15.782C20.4802 16 19.9201 16 18.8 16H16M5.2 22H12.8C13.9201 22 14.4802 22 14.908 21.782C15.2843 21.5903 15.5903 21.2843 15.782 20.908C16 20.4802 16 19.9201 16 18.8V11.2C16 10.0799 16 9.51984 15.782 9.09202C15.5903 8.71569 15.2843 8.40973 14.908 8.21799C14.4802 8 13.9201 8 12.8 8H5.2C4.0799 8 3.51984 8 3.09202 8.21799C2.71569 8.40973 2.40973 8.71569 2.21799 9.09202C2 9.51984 2 10.0799 2 11.2V18.8C2 19.9201 2 20.4802 2.21799 20.908C2.40973 21.2843 2.71569 21.5903 3.09202 21.782C3.51984 22 4.07989 22 5.2 22Z\"stroke-width=2 stroke-linecap=round stroke-linejoin=round stroke=currentColor>`);\nvar _tmpl$14 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=24 height=24 viewBox=\"0 0 24 24\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M2.5 21.4998L8.04927 19.3655C8.40421 19.229 8.58168 19.1607 8.74772 19.0716C8.8952 18.9924 9.0358 18.901 9.16804 18.7984C9.31692 18.6829 9.45137 18.5484 9.72028 18.2795L21 6.99982C22.1046 5.89525 22.1046 4.10438 21 2.99981C19.8955 1.89525 18.1046 1.89524 17 2.99981L5.72028 14.2795C5.45138 14.5484 5.31692 14.6829 5.20139 14.8318C5.09877 14.964 5.0074 15.1046 4.92823 15.2521C4.83911 15.4181 4.77085 15.5956 4.63433 15.9506L2.5 21.4998ZM2.5 21.4998L4.55812 16.1488C4.7054 15.7659 4.77903 15.5744 4.90534 15.4867C5.01572 15.4101 5.1523 15.3811 5.2843 15.4063C5.43533 15.4351 5.58038 15.5802 5.87048 15.8703L8.12957 18.1294C8.41967 18.4195 8.56472 18.5645 8.59356 18.7155C8.61877 18.8475 8.58979 18.9841 8.51314 19.0945C8.42545 19.2208 8.23399 19.2944 7.85107 19.4417L2.5 21.4998Z\"stroke=currentColor stroke-width=2 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$15 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=24 height=24 viewBox=\"0 0 24 24\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M7.5 12L10.5 15L16.5 9M7.8 21H16.2C17.8802 21 18.7202 21 19.362 20.673C19.9265 20.3854 20.3854 19.9265 20.673 19.362C21 18.7202 21 17.8802 21 16.2V7.8C21 6.11984 21 5.27976 20.673 4.63803C20.3854 4.07354 19.9265 3.6146 19.362 3.32698C18.7202 3 17.8802 3 16.2 3H7.8C6.11984 3 5.27976 3 4.63803 3.32698C4.07354 3.6146 3.6146 4.07354 3.32698 4.63803C3 5.27976 3 6.11984 3 7.8V16.2C3 17.8802 3 18.7202 3.32698 19.362C3.6146 19.9265 4.07354 20.3854 4.63803 20.673C5.27976 21 6.11984 21 7.8 21Z\"stroke-width=2 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$16 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=24 height=24 viewBox=\"0 0 24 24\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M9 9L15 15M15 9L9 15M7.8 21H16.2C17.8802 21 18.7202 21 19.362 20.673C19.9265 20.3854 20.3854 19.9265 20.673 19.362C21 18.7202 21 17.8802 21 16.2V7.8C21 6.11984 21 5.27976 20.673 4.63803C20.3854 4.07354 19.9265 3.6146 19.362 3.32698C18.7202 3 17.8802 3 16.2 3H7.8C6.11984 3 5.27976 3 4.63803 3.32698C4.07354 3.6146 3.6146 4.07354 3.32698 4.63803C3 5.27976 3 6.11984 3 7.8V16.2C3 17.8802 3 18.7202 3.32698 19.362C3.6146 19.9265 4.07354 20.3854 4.63803 20.673C5.27976 21 6.11984 21 7.8 21Z\"stroke=#F04438 stroke-width=2 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$17 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=24 height=24 viewBox=\"0 0 24 24\"fill=none stroke=currentColor stroke-width=2 xmlns=http://www.w3.org/2000/svg><rect class=list width=20 height=20 y=2 x=2 rx=2></rect><line class=list-item y1=7 y2=7 x1=6 x2=18></line><line class=list-item y2=12 y1=12 x1=6 x2=18></line><line class=list-item y1=17 y2=17 x1=6 x2=18>`);\nvar _tmpl$18 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg viewBox=\"0 0 24 24\"height=20 width=20 fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M3 7.8c0-1.68 0-2.52.327-3.162a3 3 0 0 1 1.311-1.311C5.28 3 6.12 3 7.8 3h8.4c1.68 0 2.52 0 3.162.327a3 3 0 0 1 1.311 1.311C21 5.28 21 6.12 21 7.8v8.4c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311C18.72 21 17.88 21 16.2 21H7.8c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311C3 18.72 3 17.88 3 16.2V7.8Z\"stroke-width=2 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$19 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=14 height=14 viewBox=\"0 0 24 24\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M7.5 12L10.5 15L16.5 9M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12Z\"stroke=currentColor stroke-width=2 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$20 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=14 height=14 viewBox=\"0 0 24 24\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M12 2V6M12 18V22M6 12H2M22 12H18M19.0784 19.0784L16.25 16.25M19.0784 4.99994L16.25 7.82837M4.92157 19.0784L7.75 16.25M4.92157 4.99994L7.75 7.82837\"stroke=currentColor stroke-width=2 stroke-linecap=round stroke-linejoin=round></path><animateTransform attributeName=transform attributeType=XML type=rotate from=0 to=360 dur=2s repeatCount=indefinite>`);\nvar _tmpl$21 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=14 height=14 viewBox=\"0 0 24 24\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M15 9L9 15M9 9L15 15M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12Z\"stroke=currentColor stroke-width=2 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$222 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=14 height=14 viewBox=\"0 0 24 24\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M9.5 15V9M14.5 15V9M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12Z\"stroke=currentColor stroke-width=2 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$23 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg version=1.0 viewBox=\"0 0 633 633\"><linearGradient x1=-666.45 x2=-666.45 y1=163.28 y2=163.99 gradientTransform=\"matrix(633 0 0 633 422177 -103358)\"gradientUnits=userSpaceOnUse><stop stop-color=#6BDAFF offset=0></stop><stop stop-color=#F9FFB5 offset=.32></stop><stop stop-color=#FFA770 offset=.71></stop><stop stop-color=#FF7373 offset=1></stop></linearGradient><circle cx=316.5 cy=316.5 r=316.5></circle><defs><filter x=-137.5 y=412 width=454 height=396.9 filterUnits=userSpaceOnUse><feColorMatrix values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0\"></feColorMatrix></filter></defs><mask x=-137.5 y=412 width=454 height=396.9 maskUnits=userSpaceOnUse><g><circle cx=316.5 cy=316.5 r=316.5 fill=#fff></circle></g></mask><g><ellipse cx=89.5 cy=610.5 rx=214.5 ry=186 fill=#015064 stroke=#00CFE2 stroke-width=25></ellipse></g><defs><filter x=316.5 y=412 width=454 height=396.9 filterUnits=userSpaceOnUse><feColorMatrix values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0\"></feColorMatrix></filter></defs><mask x=316.5 y=412 width=454 height=396.9 maskUnits=userSpaceOnUse><g><circle cx=316.5 cy=316.5 r=316.5 fill=#fff></circle></g></mask><g><ellipse cx=543.5 cy=610.5 rx=214.5 ry=186 fill=#015064 stroke=#00CFE2 stroke-width=25></ellipse></g><defs><filter x=-137.5 y=450 width=454 height=396.9 filterUnits=userSpaceOnUse><feColorMatrix values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0\"></feColorMatrix></filter></defs><mask x=-137.5 y=450 width=454 height=396.9 maskUnits=userSpaceOnUse><g><circle cx=316.5 cy=316.5 r=316.5 fill=#fff></circle></g></mask><g><ellipse cx=89.5 cy=648.5 rx=214.5 ry=186 fill=#015064 stroke=#00A8B8 stroke-width=25></ellipse></g><defs><filter x=316.5 y=450 width=454 height=396.9 filterUnits=userSpaceOnUse><feColorMatrix values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0\"></feColorMatrix></filter></defs><mask x=316.5 y=450 width=454 height=396.9 maskUnits=userSpaceOnUse><g><circle cx=316.5 cy=316.5 r=316.5 fill=#fff></circle></g></mask><g><ellipse cx=543.5 cy=648.5 rx=214.5 ry=186 fill=#015064 stroke=#00A8B8 stroke-width=25></ellipse></g><defs><filter x=-137.5 y=486 width=454 height=396.9 filterUnits=userSpaceOnUse><feColorMatrix values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0\"></feColorMatrix></filter></defs><mask x=-137.5 y=486 width=454 height=396.9 maskUnits=userSpaceOnUse><g><circle cx=316.5 cy=316.5 r=316.5 fill=#fff></circle></g></mask><g><ellipse cx=89.5 cy=684.5 rx=214.5 ry=186 fill=#015064 stroke=#007782 stroke-width=25></ellipse></g><defs><filter x=316.5 y=486 width=454 height=396.9 filterUnits=userSpaceOnUse><feColorMatrix values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0\"></feColorMatrix></filter></defs><mask x=316.5 y=486 width=454 height=396.9 maskUnits=userSpaceOnUse><g><circle cx=316.5 cy=316.5 r=316.5 fill=#fff></circle></g></mask><g><ellipse cx=543.5 cy=684.5 rx=214.5 ry=186 fill=#015064 stroke=#007782 stroke-width=25></ellipse></g><defs><filter x=272.2 y=308 width=176.9 height=129.3 filterUnits=userSpaceOnUse><feColorMatrix values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0\"></feColorMatrix></filter></defs><mask x=272.2 y=308 width=176.9 height=129.3 maskUnits=userSpaceOnUse><g><circle cx=316.5 cy=316.5 r=316.5 fill=#fff></circle></g></mask><g><line x1=436 x2=431 y1=403.2 y2=431.8 fill=none stroke=#000 stroke-linecap=round stroke-linejoin=bevel stroke-width=11></line><line x1=291 x2=280 y1=341.5 y2=403.5 fill=none stroke=#000 stroke-linecap=round stroke-linejoin=bevel stroke-width=11></line><line x1=332.9 x2=328.6 y1=384.1 y2=411.2 fill=none stroke=#000 stroke-linecap=round stroke-linejoin=bevel stroke-width=11></line><linearGradient x1=-670.75 x2=-671.59 y1=164.4 y2=164.49 gradientTransform=\"matrix(-184.16 -32.472 -11.461 64.997 -121359 -32126)\"gradientUnits=userSpaceOnUse><stop stop-color=#EE2700 offset=0></stop><stop stop-color=#FF008E offset=1></stop></linearGradient><path d=\"m344.1 363 97.7 17.2c5.8 2.1 8.2 6.1 7.1 12.1s-4.7 9.2-11 9.9l-106-18.7-57.5-59.2c-3.2-4.8-2.9-9.1 0.8-12.8s8.3-4.4 13.7-2.1l55.2 53.6z\"clip-rule=evenodd fill-rule=evenodd></path><line x1=428.2 x2=429.1 y1=384.5 y2=378 fill=none stroke=#fff stroke-linecap=round stroke-linejoin=bevel stroke-width=7></line><line x1=395.2 x2=396.1 y1=379.5 y2=373 fill=none stroke=#fff stroke-linecap=round stroke-linejoin=bevel stroke-width=7></line><line x1=362.2 x2=363.1 y1=373.5 y2=367.4 fill=none stroke=#fff stroke-linecap=round stroke-linejoin=bevel stroke-width=7></line><line x1=324.2 x2=328.4 y1=351.3 y2=347.4 fill=none stroke=#fff stroke-linecap=round stroke-linejoin=bevel stroke-width=7></line><line x1=303.2 x2=307.4 y1=331.3 y2=327.4 fill=none stroke=#fff stroke-linecap=round stroke-linejoin=bevel stroke-width=7></line></g><defs><filter x=73.2 y=113.8 width=280.6 height=317.4 filterUnits=userSpaceOnUse><feColorMatrix values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0\"></feColorMatrix></filter></defs><mask x=73.2 y=113.8 width=280.6 height=317.4 maskUnits=userSpaceOnUse><g><circle cx=316.5 cy=316.5 r=316.5 fill=#fff></circle></g></mask><g><linearGradient x1=-672.16 x2=-672.16 y1=165.03 y2=166.03 gradientTransform=\"matrix(-100.18 48.861 97.976 200.88 -83342 -93.059)\"gradientUnits=userSpaceOnUse><stop stop-color=#A17500 offset=0></stop><stop stop-color=#5D2100 offset=1></stop></linearGradient><path d=\"m192.3 203c8.1 37.3 14 73.6 17.8 109.1 3.8 35.4 2.8 75.1-3 119.2l61.2-16.7c-15.6-59-25.2-97.9-28.6-116.6s-10.8-51.9-22.1-99.6l-25.3 4.6\"clip-rule=evenodd fill-rule=evenodd></path><g stroke=#2F8A00><linearGradient x1=-660.23 x2=-660.23 y1=166.72 y2=167.72 gradientTransform=\"matrix(92.683 4.8573 -2.0259 38.657 61680 -3088.6)\"gradientUnits=userSpaceOnUse><stop stop-color=#2F8A00 offset=0></stop><stop stop-color=#90FF57 offset=1></stop></linearGradient><path d=\"m195 183.9s-12.6-22.1-36.5-29.9c-15.9-5.2-34.4-1.5-55.5 11.1 15.9 14.3 29.5 22.6 40.7 24.9 16.8 3.6 51.3-6.1 51.3-6.1z\"clip-rule=evenodd fill-rule=evenodd stroke-width=13></path><linearGradient x1=-661.36 x2=-661.36 y1=164.18 y2=165.18 gradientTransform=\"matrix(110 5.7648 -6.3599 121.35 73933 -15933)\"gradientUnits=userSpaceOnUse><stop stop-color=#2F8A00 offset=0></stop><stop stop-color=#90FF57 offset=1></stop></linearGradient><path d=\"m194.9 184.5s-47.5-8.5-83.2 15.7c-23.8 16.2-34.3 49.3-31.6 99.4 30.3-27.8 52.1-48.5 65.2-61.9 19.8-20.2 49.6-53.2 49.6-53.2z\"clip-rule=evenodd fill-rule=evenodd stroke-width=13></path><linearGradient x1=-656.79 x2=-656.79 y1=165.15 y2=166.15 gradientTransform=\"matrix(62.954 3.2993 -3.5023 66.828 42156 -8754.1)\"gradientUnits=userSpaceOnUse><stop stop-color=#2F8A00 offset=0></stop><stop stop-color=#90FF57 offset=1></stop></linearGradient><path d=\"m195 183.9c-0.8-21.9 6-38 20.6-48.2s29.8-15.4 45.5-15.3c-6.1 21.4-14.5 35.8-25.2 43.4s-24.4 14.2-40.9 20.1z\"clip-rule=evenodd fill-rule=evenodd stroke-width=13></path><linearGradient x1=-663.07 x2=-663.07 y1=165.44 y2=166.44 gradientTransform=\"matrix(152.47 7.9907 -3.0936 59.029 101884 -4318.7)\"gradientUnits=userSpaceOnUse><stop stop-color=#2F8A00 offset=0></stop><stop stop-color=#90FF57 offset=1></stop></linearGradient><path d=\"m194.9 184.5c31.9-30 64.1-39.7 96.7-29s50.8 30.4 54.6 59.1c-35.2-5.5-60.4-9.6-75.8-12.1-15.3-2.6-40.5-8.6-75.5-18z\"clip-rule=evenodd fill-rule=evenodd stroke-width=13></path><linearGradient x1=-662.57 x2=-662.57 y1=164.44 y2=165.44 gradientTransform=\"matrix(136.46 7.1517 -5.2163 99.533 91536 -11442)\"gradientUnits=userSpaceOnUse><stop stop-color=#2F8A00 offset=0></stop><stop stop-color=#90FF57 offset=1></stop></linearGradient><path d=\"m194.9 184.5c35.8-7.6 65.6-0.2 89.2 22s37.7 49 42.3 80.3c-39.8-9.7-68.3-23.8-85.5-42.4s-32.5-38.5-46-59.9z\"clip-rule=evenodd fill-rule=evenodd stroke-width=13></path><linearGradient x1=-656.43 x2=-656.43 y1=163.86 y2=164.86 gradientTransform=\"matrix(60.866 3.1899 -8.7773 167.48 41560 -25168)\"gradientUnits=userSpaceOnUse><stop stop-color=#2F8A00 offset=0></stop><stop stop-color=#90FF57 offset=1></stop></linearGradient><path d=\"m194.9 184.5c-33.6 13.8-53.6 35.7-60.1 65.6s-3.6 63.1 8.7 99.6c27.4-40.3 43.2-69.6 47.4-88s5.6-44.1 4-77.2z\"clip-rule=evenodd fill-rule=evenodd stroke-width=13></path><path d=\"m196.5 182.3c-14.8 21.6-25.1 41.4-30.8 59.4s-9.5 33-11.1 45.1\"fill=none stroke-linecap=round stroke-width=8></path><path d=\"m194.9 185.7c-24.4 1.7-43.8 9-58.1 21.8s-24.7 25.4-31.3 37.8\"fill=none stroke-linecap=round stroke-width=8></path><path d=\"m204.5 176.4c29.7-6.7 52-8.4 67-5.1s26.9 8.6 35.8 15.9\"fill=none stroke-linecap=round stroke-width=8></path><path d=\"m196.5 181.4c20.3 9.9 38.2 20.5 53.9 31.9s27.4 22.1 35.1 32\"fill=none stroke-linecap=round stroke-width=8></path></g></g><defs><filter x=50.5 y=399 width=532 height=633 filterUnits=userSpaceOnUse><feColorMatrix values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0\"></feColorMatrix></filter></defs><mask x=50.5 y=399 width=532 height=633 maskUnits=userSpaceOnUse><g><circle cx=316.5 cy=316.5 r=316.5 fill=#fff></circle></g></mask><g><linearGradient x1=-666.06 x2=-666.23 y1=163.36 y2=163.75 gradientTransform=\"matrix(532 0 0 633 354760 -102959)\"gradientUnits=userSpaceOnUse><stop stop-color=#FFF400 offset=0></stop><stop stop-color=#3C8700 offset=1></stop></linearGradient><ellipse cx=316.5 cy=715.5 rx=266 ry=316.5></ellipse></g><defs><filter x=391 y=-24 width=288 height=283 filterUnits=userSpaceOnUse><feColorMatrix values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0\"></feColorMatrix></filter></defs><mask x=391 y=-24 width=288 height=283 maskUnits=userSpaceOnUse><g><circle cx=316.5 cy=316.5 r=316.5 fill=#fff></circle></g></mask><g><linearGradient x1=-664.56 x2=-664.56 y1=163.79 y2=164.79 gradientTransform=\"matrix(227 0 0 227 151421 -37204)\"gradientUnits=userSpaceOnUse><stop stop-color=#FFDF00 offset=0></stop><stop stop-color=#FF9D00 offset=1></stop></linearGradient><circle cx=565.5 cy=89.5 r=113.5></circle><linearGradient x1=-644.5 x2=-645.77 y1=342 y2=342 gradientTransform=\"matrix(30 0 0 1 19770 -253)\"gradientUnits=userSpaceOnUse><stop stop-color=#FFA400 offset=0></stop><stop stop-color=#FF5E00 offset=1></stop></linearGradient><line x1=427 x2=397 y1=89 y2=89 fill=none stroke-linecap=round stroke-linejoin=bevel stroke-width=12></line><linearGradient x1=-641.56 x2=-642.83 y1=196.02 y2=196.07 gradientTransform=\"matrix(26.5 0 0 5.5 17439 -1025.5)\"gradientUnits=userSpaceOnUse><stop stop-color=#FFA400 offset=0></stop><stop stop-color=#FF5E00 offset=1></stop></linearGradient><line x1=430.5 x2=404 y1=55.5 y2=50 fill=none stroke-linecap=round stroke-linejoin=bevel stroke-width=12></line><linearGradient x1=-643.73 x2=-645 y1=185.83 y2=185.9 gradientTransform=\"matrix(29 0 0 8 19107 -1361)\"gradientUnits=userSpaceOnUse><stop stop-color=#FFA400 offset=0></stop><stop stop-color=#FF5E00 offset=1></stop></linearGradient><line x1=431 x2=402 y1=122 y2=130 fill=none stroke-linecap=round stroke-linejoin=bevel stroke-width=12></line><linearGradient x1=-638.94 x2=-640.22 y1=177.09 y2=177.39 gradientTransform=\"matrix(24 0 0 13 15783 -2145)\"gradientUnits=userSpaceOnUse><stop stop-color=#FFA400 offset=0></stop><stop stop-color=#FF5E00 offset=1></stop></linearGradient><line x1=442 x2=418 y1=153 y2=166 fill=none stroke-linecap=round stroke-linejoin=bevel stroke-width=12></line><linearGradient x1=-633.42 x2=-634.7 y1=172.41 y2=173.31 gradientTransform=\"matrix(20 0 0 19 13137 -3096)\"gradientUnits=userSpaceOnUse><stop stop-color=#FFA400 offset=0></stop><stop stop-color=#FF5E00 offset=1></stop></linearGradient><line x1=464 x2=444 y1=180 y2=199 fill=none stroke-linecap=round stroke-linejoin=bevel stroke-width=12></line><linearGradient x1=-619.05 x2=-619.52 y1=170.82 y2=171.82 gradientTransform=\"matrix(13.83 0 0 22.85 9050 -3703.4)\"gradientUnits=userSpaceOnUse><stop stop-color=#FFA400 offset=0></stop><stop stop-color=#FF5E00 offset=1></stop></linearGradient><line x1=491.4 x2=477.5 y1=203 y2=225.9 fill=none stroke-linecap=round stroke-linejoin=bevel stroke-width=12></line><linearGradient x1=-578.5 x2=-578.63 y1=170.31 y2=171.31 gradientTransform=\"matrix(7.5 0 0 24.5 4860 -3953)\"gradientUnits=userSpaceOnUse><stop stop-color=#FFA400 offset=0></stop><stop stop-color=#FF5E00 offset=1></stop></linearGradient><line x1=524.5 x2=517 y1=219.5 y2=244 fill=none stroke-linecap=round stroke-linejoin=bevel stroke-width=12></line><linearGradient x1=666.5 x2=666.5 y1=170.31 y2=171.31 gradientTransform=\"matrix(.5 0 0 24.5 231.5 -3944)\"gradientUnits=userSpaceOnUse><stop stop-color=#FFA400 offset=0></stop><stop stop-color=#FF5E00 offset=1></stop></linearGradient><line x1=564.5 x2=565 y1=228.5 y2=253 fill=none stroke-linecap=round stroke-linejoin=bevel stroke-width=12>`);\nfunction Search() {\n    return _tmpl$2();\n}\nfunction Trash() {\n    return _tmpl$22();\n}\nfunction ChevronDown() {\n    return _tmpl$3();\n}\nfunction ArrowUp() {\n    return _tmpl$4();\n}\nfunction ArrowDown() {\n    return _tmpl$5();\n}\nfunction ArrowLeft() {\n    return (()=>{\n        var _el$6 = _tmpl$5();\n        _el$6.style.setProperty(\"transform\", \"rotate(90deg)\");\n        return _el$6;\n    })();\n}\nfunction ArrowRight() {\n    return (()=>{\n        var _el$7 = _tmpl$5();\n        _el$7.style.setProperty(\"transform\", \"rotate(-90deg)\");\n        return _el$7;\n    })();\n}\nfunction Sun() {\n    return _tmpl$6();\n}\nfunction Moon() {\n    return _tmpl$7();\n}\nfunction Monitor() {\n    return _tmpl$8();\n}\nfunction Wifi() {\n    return _tmpl$9();\n}\nfunction Offline() {\n    return _tmpl$10();\n}\nfunction Settings() {\n    return _tmpl$11();\n}\nfunction PiPIcon() {\n    return _tmpl$12();\n}\nfunction Copier() {\n    return _tmpl$13();\n}\nfunction Pencil() {\n    return _tmpl$14();\n}\nfunction CopiedCopier(props) {\n    return (()=>{\n        var _el$17 = _tmpl$15(), _el$18 = _el$17.firstChild;\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$18, \"stroke\", props.theme === \"dark\" ? \"#12B76A\" : \"#027A48\"));\n        return _el$17;\n    })();\n}\nfunction ErrorCopier() {\n    return _tmpl$16();\n}\nfunction List() {\n    return _tmpl$17();\n}\nfunction Check(props) {\n    return [\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n            get when () {\n                return props.checked;\n            },\n            get children () {\n                var _el$21 = _tmpl$15(), _el$22 = _el$21.firstChild;\n                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$22, \"stroke\", props.theme === \"dark\" ? \"#9B8AFB\" : \"#6938EF\"));\n                return _el$21;\n            }\n        }),\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n            get when () {\n                return !props.checked;\n            },\n            get children () {\n                var _el$23 = _tmpl$18(), _el$24 = _el$23.firstChild;\n                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$24, \"stroke\", props.theme === \"dark\" ? \"#9B8AFB\" : \"#6938EF\"));\n                return _el$23;\n            }\n        })\n    ];\n}\nfunction CheckCircle() {\n    return _tmpl$19();\n}\nfunction LoadingCircle() {\n    return _tmpl$20();\n}\nfunction XCircle() {\n    return _tmpl$21();\n}\nfunction PauseCircle() {\n    return _tmpl$222();\n}\nfunction TanstackLogo() {\n    const id = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createUniqueId)();\n    return (()=>{\n        var _el$29 = _tmpl$23(), _el$30 = _el$29.firstChild, _el$31 = _el$30.nextSibling, _el$32 = _el$31.nextSibling, _el$33 = _el$32.firstChild, _el$34 = _el$32.nextSibling, _el$35 = _el$34.firstChild, _el$36 = _el$34.nextSibling, _el$37 = _el$36.nextSibling, _el$38 = _el$37.firstChild, _el$39 = _el$37.nextSibling, _el$40 = _el$39.firstChild, _el$41 = _el$39.nextSibling, _el$42 = _el$41.nextSibling, _el$43 = _el$42.firstChild, _el$44 = _el$42.nextSibling, _el$45 = _el$44.firstChild, _el$46 = _el$44.nextSibling, _el$47 = _el$46.nextSibling, _el$48 = _el$47.firstChild, _el$49 = _el$47.nextSibling, _el$50 = _el$49.firstChild, _el$51 = _el$49.nextSibling, _el$52 = _el$51.nextSibling, _el$53 = _el$52.firstChild, _el$54 = _el$52.nextSibling, _el$55 = _el$54.firstChild, _el$56 = _el$54.nextSibling, _el$57 = _el$56.nextSibling, _el$58 = _el$57.firstChild, _el$59 = _el$57.nextSibling, _el$60 = _el$59.firstChild, _el$61 = _el$59.nextSibling, _el$62 = _el$61.nextSibling, _el$63 = _el$62.firstChild, _el$64 = _el$62.nextSibling, _el$65 = _el$64.firstChild, _el$66 = _el$64.nextSibling, _el$67 = _el$66.firstChild, _el$68 = _el$67.nextSibling, _el$69 = _el$68.nextSibling, _el$70 = _el$69.nextSibling, _el$71 = _el$70.nextSibling, _el$72 = _el$66.nextSibling, _el$73 = _el$72.firstChild, _el$74 = _el$72.nextSibling, _el$75 = _el$74.firstChild, _el$76 = _el$74.nextSibling, _el$77 = _el$76.firstChild, _el$78 = _el$77.nextSibling, _el$79 = _el$78.nextSibling, _el$80 = _el$79.firstChild, _el$81 = _el$80.nextSibling, _el$82 = _el$81.nextSibling, _el$83 = _el$82.nextSibling, _el$84 = _el$83.nextSibling, _el$85 = _el$84.nextSibling, _el$86 = _el$85.nextSibling, _el$87 = _el$86.nextSibling, _el$88 = _el$87.nextSibling, _el$89 = _el$88.nextSibling, _el$90 = _el$89.nextSibling, _el$91 = _el$90.nextSibling, _el$92 = _el$76.nextSibling, _el$93 = _el$92.firstChild, _el$94 = _el$92.nextSibling, _el$95 = _el$94.firstChild, _el$96 = _el$94.nextSibling, _el$97 = _el$96.firstChild, _el$98 = _el$97.nextSibling, _el$99 = _el$96.nextSibling, _el$100 = _el$99.firstChild, _el$101 = _el$99.nextSibling, _el$102 = _el$101.firstChild, _el$103 = _el$101.nextSibling, _el$104 = _el$103.firstChild, _el$105 = _el$104.nextSibling, _el$106 = _el$105.nextSibling, _el$107 = _el$106.nextSibling, _el$108 = _el$107.nextSibling, _el$109 = _el$108.nextSibling, _el$110 = _el$109.nextSibling, _el$111 = _el$110.nextSibling, _el$112 = _el$111.nextSibling, _el$113 = _el$112.nextSibling, _el$114 = _el$113.nextSibling, _el$115 = _el$114.nextSibling, _el$116 = _el$115.nextSibling, _el$117 = _el$116.nextSibling, _el$118 = _el$117.nextSibling, _el$119 = _el$118.nextSibling, _el$120 = _el$119.nextSibling, _el$121 = _el$120.nextSibling;\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$30, \"id\", `a-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$31, \"fill\", `url(#a-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$33, \"id\", `am-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$34, \"id\", `b-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$35, \"filter\", `url(#am-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$36, \"mask\", `url(#b-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$38, \"id\", `ah-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$39, \"id\", `k-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$40, \"filter\", `url(#ah-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$41, \"mask\", `url(#k-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$43, \"id\", `ae-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$44, \"id\", `j-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$45, \"filter\", `url(#ae-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$46, \"mask\", `url(#j-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$48, \"id\", `ai-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$49, \"id\", `i-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$50, \"filter\", `url(#ai-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$51, \"mask\", `url(#i-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$53, \"id\", `aj-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$54, \"id\", `h-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$55, \"filter\", `url(#aj-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$56, \"mask\", `url(#h-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$58, \"id\", `ag-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$59, \"id\", `g-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$60, \"filter\", `url(#ag-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$61, \"mask\", `url(#g-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$63, \"id\", `af-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$64, \"id\", `f-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$65, \"filter\", `url(#af-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$66, \"mask\", `url(#f-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$70, \"id\", `m-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$71, \"fill\", `url(#m-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$73, \"id\", `ak-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$74, \"id\", `e-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$75, \"filter\", `url(#ak-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$76, \"mask\", `url(#e-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$77, \"id\", `n-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$78, \"fill\", `url(#n-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$80, \"id\", `r-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$81, \"fill\", `url(#r-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$82, \"id\", `s-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$83, \"fill\", `url(#s-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$84, \"id\", `q-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$85, \"fill\", `url(#q-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$86, \"id\", `p-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$87, \"fill\", `url(#p-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$88, \"id\", `o-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$89, \"fill\", `url(#o-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$90, \"id\", `l-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$91, \"fill\", `url(#l-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$93, \"id\", `al-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$94, \"id\", `d-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$95, \"filter\", `url(#al-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$96, \"mask\", `url(#d-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$97, \"id\", `u-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$98, \"fill\", `url(#u-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$100, \"id\", `ad-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$101, \"id\", `c-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$102, \"filter\", `url(#ad-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$103, \"mask\", `url(#c-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$104, \"id\", `t-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$105, \"fill\", `url(#t-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$106, \"id\", `v-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$107, \"stroke\", `url(#v-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$108, \"id\", `aa-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$109, \"stroke\", `url(#aa-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$110, \"id\", `w-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$111, \"stroke\", `url(#w-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$112, \"id\", `ac-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$113, \"stroke\", `url(#ac-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$114, \"id\", `ab-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$115, \"stroke\", `url(#ab-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$116, \"id\", `y-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$117, \"stroke\", `url(#y-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$118, \"id\", `x-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$119, \"stroke\", `url(#x-${id})`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$120, \"id\", `z-${id}`);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$121, \"stroke\", `url(#z-${id})`);\n        return _el$29;\n    })();\n}\n// src/Explorer.tsx\nvar _tmpl$24 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span><svg width=16 height=16 viewBox=\"0 0 16 16\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M6 12L10 8L6 4\"stroke-width=2 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$25 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<button title=\"Copy object to clipboard\">`);\nvar _tmpl$32 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<button title=\"Remove all items\"aria-label=\"Remove all items\">`);\nvar _tmpl$42 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<button title=\"Delete item\"aria-label=\"Delete item\">`);\nvar _tmpl$52 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<button title=\"Toggle value\"aria-label=\"Toggle value\">`);\nvar _tmpl$62 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<button title=\"Bulk Edit Data\"aria-label=\"Bulk Edit Data\">`);\nvar _tmpl$72 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div>`);\nvar _tmpl$82 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div><button> <span></span> <span> `);\nvar _tmpl$92 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<input>`);\nvar _tmpl$102 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span>`);\nvar _tmpl$112 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div><span>:`);\nvar _tmpl$122 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div><div><button> [<!>...<!>]`);\nfunction chunkArray(array, size3) {\n    let i2 = 0;\n    const result = [];\n    while(i2 < array.length){\n        result.push(array.slice(i2, i2 + size3));\n        i2 = i2 + size3;\n    }\n    return result;\n}\nvar Expander = (props)=>{\n    const theme = useTheme();\n    const css = useQueryDevtoolsContext().shadowDOMTarget ? u.bind({\n        target: useQueryDevtoolsContext().shadowDOMTarget\n    }) : u;\n    const styles = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles(css) : lightStyles(css);\n    });\n    return (()=>{\n        var _el$ = _tmpl$24();\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$, clsx(styles().expander, css`\n          transform: rotate(${props.expanded ? 90 : 0}deg);\n        `, props.expanded && css`\n            & svg {\n              top: -1px;\n            }\n          `)));\n        return _el$;\n    })();\n};\nvar CopyButton = (props)=>{\n    const theme = useTheme();\n    const css = useQueryDevtoolsContext().shadowDOMTarget ? u.bind({\n        target: useQueryDevtoolsContext().shadowDOMTarget\n    }) : u;\n    const styles = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles(css) : lightStyles(css);\n    });\n    const [copyState, setCopyState] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(\"NoCopy\");\n    return (()=>{\n        var _el$2 = _tmpl$25();\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.addEventListener)(_el$2, \"click\", copyState() === \"NoCopy\" ? ()=>{\n            navigator.clipboard.writeText((0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.stringify)(props.value)).then(()=>{\n                setCopyState(\"SuccessCopy\");\n                setTimeout(()=>{\n                    setCopyState(\"NoCopy\");\n                }, 1500);\n            }, (err)=>{\n                console.error(\"Failed to copy: \", err);\n                setCopyState(\"ErrorCopy\");\n                setTimeout(()=>{\n                    setCopyState(\"NoCopy\");\n                }, 1500);\n            });\n        } : void 0, true);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$2, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Switch, {\n            get children () {\n                return [\n                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Match, {\n                        get when () {\n                            return copyState() === \"NoCopy\";\n                        },\n                        get children () {\n                            return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Copier, {});\n                        }\n                    }),\n                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Match, {\n                        get when () {\n                            return copyState() === \"SuccessCopy\";\n                        },\n                        get children () {\n                            return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(CopiedCopier, {\n                                get theme () {\n                                    return theme();\n                                }\n                            });\n                        }\n                    }),\n                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Match, {\n                        get when () {\n                            return copyState() === \"ErrorCopy\";\n                        },\n                        get children () {\n                            return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ErrorCopier, {});\n                        }\n                    })\n                ];\n            }\n        }));\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n            var _v$ = styles().actionButton, _v$2 = `${copyState() === \"NoCopy\" ? \"Copy object to clipboard\" : copyState() === \"SuccessCopy\" ? \"Object copied to clipboard\" : \"Error copying object to clipboard\"}`;\n            _v$ !== _p$.e && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$2, _p$.e = _v$);\n            _v$2 !== _p$.t && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$2, \"aria-label\", _p$.t = _v$2);\n            return _p$;\n        }, {\n            e: void 0,\n            t: void 0\n        });\n        return _el$2;\n    })();\n};\nvar ClearArrayButton = (props)=>{\n    const theme = useTheme();\n    const css = useQueryDevtoolsContext().shadowDOMTarget ? u.bind({\n        target: useQueryDevtoolsContext().shadowDOMTarget\n    }) : u;\n    const styles = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles(css) : lightStyles(css);\n    });\n    const queryClient = useQueryDevtoolsContext().client;\n    return (()=>{\n        var _el$3 = _tmpl$32();\n        _el$3.$$click = ()=>{\n            const oldData = props.activeQuery.state.data;\n            const newData = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.updateNestedDataByPath)(oldData, props.dataPath, []);\n            queryClient.setQueryData(props.activeQuery.queryKey, newData);\n        };\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$3, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(List, {}));\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$3, styles().actionButton));\n        return _el$3;\n    })();\n};\nvar DeleteItemButton = (props)=>{\n    const theme = useTheme();\n    const css = useQueryDevtoolsContext().shadowDOMTarget ? u.bind({\n        target: useQueryDevtoolsContext().shadowDOMTarget\n    }) : u;\n    const styles = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles(css) : lightStyles(css);\n    });\n    const queryClient = useQueryDevtoolsContext().client;\n    return (()=>{\n        var _el$4 = _tmpl$42();\n        _el$4.$$click = ()=>{\n            const oldData = props.activeQuery.state.data;\n            const newData = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.deleteNestedDataByPath)(oldData, props.dataPath);\n            queryClient.setQueryData(props.activeQuery.queryKey, newData);\n        };\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$4, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Trash, {}));\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$4, clsx(styles().actionButton)));\n        return _el$4;\n    })();\n};\nvar ToggleValueButton = (props)=>{\n    const theme = useTheme();\n    const css = useQueryDevtoolsContext().shadowDOMTarget ? u.bind({\n        target: useQueryDevtoolsContext().shadowDOMTarget\n    }) : u;\n    const styles = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles(css) : lightStyles(css);\n    });\n    const queryClient = useQueryDevtoolsContext().client;\n    return (()=>{\n        var _el$5 = _tmpl$52();\n        _el$5.$$click = ()=>{\n            const oldData = props.activeQuery.state.data;\n            const newData = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.updateNestedDataByPath)(oldData, props.dataPath, !props.value);\n            queryClient.setQueryData(props.activeQuery.queryKey, newData);\n        };\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$5, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Check, {\n            get theme () {\n                return theme();\n            },\n            get checked () {\n                return props.value;\n            }\n        }));\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$5, clsx(styles().actionButton, css`\n          width: ${tokens.size[3.5]};\n          height: ${tokens.size[3.5]};\n        `)));\n        return _el$5;\n    })();\n};\nfunction isIterable(x) {\n    return Symbol.iterator in x;\n}\nfunction Explorer(props) {\n    const theme = useTheme();\n    const css = useQueryDevtoolsContext().shadowDOMTarget ? u.bind({\n        target: useQueryDevtoolsContext().shadowDOMTarget\n    }) : u;\n    const styles = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles(css) : lightStyles(css);\n    });\n    const queryClient = useQueryDevtoolsContext().client;\n    const [expanded, setExpanded] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)((props.defaultExpanded || []).includes(props.label));\n    const toggleExpanded = ()=>setExpanded((old)=>!old);\n    const [expandedPages, setExpandedPages] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)([]);\n    const subEntries = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        if (Array.isArray(props.value)) {\n            return props.value.map((d, i2)=>({\n                    label: i2.toString(),\n                    value: d\n                }));\n        } else if (props.value !== null && typeof props.value === \"object\" && isIterable(props.value) && typeof props.value[Symbol.iterator] === \"function\") {\n            if (props.value instanceof Map) {\n                return Array.from(props.value, ([key, val])=>({\n                        label: key,\n                        value: val\n                    }));\n            }\n            return Array.from(props.value, (val, i2)=>({\n                    label: i2.toString(),\n                    value: val\n                }));\n        } else if (typeof props.value === \"object\" && props.value !== null) {\n            return Object.entries(props.value).map(([key, val])=>({\n                    label: key,\n                    value: val\n                }));\n        }\n        return [];\n    });\n    const type = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        if (Array.isArray(props.value)) {\n            return \"array\";\n        } else if (props.value !== null && typeof props.value === \"object\" && isIterable(props.value) && typeof props.value[Symbol.iterator] === \"function\") {\n            return \"Iterable\";\n        } else if (typeof props.value === \"object\" && props.value !== null) {\n            return \"object\";\n        }\n        return typeof props.value;\n    });\n    const subEntryPages = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>chunkArray(subEntries(), 100));\n    const currentDataPath = props.dataPath ?? [];\n    return (()=>{\n        var _el$6 = _tmpl$72();\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$6, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n            get when () {\n                return subEntryPages().length;\n            },\n            get children () {\n                return [\n                    (()=>{\n                        var _el$7 = _tmpl$82(), _el$8 = _el$7.firstChild, _el$9 = _el$8.firstChild, _el$10 = _el$9.nextSibling, _el$11 = _el$10.nextSibling, _el$12 = _el$11.nextSibling, _el$13 = _el$12.firstChild;\n                        _el$8.$$click = ()=>toggleExpanded();\n                        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$8, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Expander, {\n                            get expanded () {\n                                return expanded();\n                            }\n                        }), _el$9);\n                        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$10, ()=>props.label);\n                        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$12, ()=>String(type()).toLowerCase() === \"iterable\" ? \"(Iterable) \" : \"\", _el$13);\n                        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$12, ()=>subEntries().length, _el$13);\n                        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$12, ()=>subEntries().length > 1 ? `items` : `item`, null);\n                        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$7, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                            get when () {\n                                return props.editable;\n                            },\n                            get children () {\n                                var _el$14 = _tmpl$72();\n                                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$14, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(CopyButton, {\n                                    get value () {\n                                        return props.value;\n                                    }\n                                }), null);\n                                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$14, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                                    get when () {\n                                        return props.itemsDeletable && props.activeQuery !== void 0;\n                                    },\n                                    get children () {\n                                        return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(DeleteItemButton, {\n                                            get activeQuery () {\n                                                return props.activeQuery;\n                                            },\n                                            dataPath: currentDataPath\n                                        });\n                                    }\n                                }), null);\n                                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$14, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                                    get when () {\n                                        return type() === \"array\" && props.activeQuery !== void 0;\n                                    },\n                                    get children () {\n                                        return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ClearArrayButton, {\n                                            get activeQuery () {\n                                                return props.activeQuery;\n                                            },\n                                            dataPath: currentDataPath\n                                        });\n                                    }\n                                }), null);\n                                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$14, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                                    get when () {\n                                        return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>!!!!props.onEdit)() && !(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.serialize)(props.value).meta;\n                                    },\n                                    get children () {\n                                        var _el$15 = _tmpl$62();\n                                        _el$15.$$click = ()=>{\n                                            props.onEdit?.();\n                                        };\n                                        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$15, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Pencil, {}));\n                                        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$15, styles().actionButton));\n                                        return _el$15;\n                                    }\n                                }), null);\n                                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$14, styles().actions));\n                                return _el$14;\n                            }\n                        }), null);\n                        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n                            var _v$3 = styles().expanderButtonContainer, _v$4 = styles().expanderButton, _v$5 = styles().info;\n                            _v$3 !== _p$.e && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$7, _p$.e = _v$3);\n                            _v$4 !== _p$.t && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$8, _p$.t = _v$4);\n                            _v$5 !== _p$.a && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$12, _p$.a = _v$5);\n                            return _p$;\n                        }, {\n                            e: void 0,\n                            t: void 0,\n                            a: void 0\n                        });\n                        return _el$7;\n                    })(),\n                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                        get when () {\n                            return expanded();\n                        },\n                        get children () {\n                            return [\n                                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                                    get when () {\n                                        return subEntryPages().length === 1;\n                                    },\n                                    get children () {\n                                        var _el$16 = _tmpl$72();\n                                        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$16, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Key, {\n                                            get each () {\n                                                return subEntries();\n                                            },\n                                            by: (item)=>item.label,\n                                            children: (entry)=>{\n                                                return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Explorer, {\n                                                    get defaultExpanded () {\n                                                        return props.defaultExpanded;\n                                                    },\n                                                    get label () {\n                                                        return entry().label;\n                                                    },\n                                                    get value () {\n                                                        return entry().value;\n                                                    },\n                                                    get editable () {\n                                                        return props.editable;\n                                                    },\n                                                    get dataPath () {\n                                                        return [\n                                                            ...currentDataPath,\n                                                            entry().label\n                                                        ];\n                                                    },\n                                                    get activeQuery () {\n                                                        return props.activeQuery;\n                                                    },\n                                                    get itemsDeletable () {\n                                                        return type() === \"array\" || type() === \"Iterable\" || type() === \"object\";\n                                                    }\n                                                });\n                                            }\n                                        }));\n                                        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$16, styles().subEntry));\n                                        return _el$16;\n                                    }\n                                }),\n                                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                                    get when () {\n                                        return subEntryPages().length > 1;\n                                    },\n                                    get children () {\n                                        var _el$17 = _tmpl$72();\n                                        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$17, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Index, {\n                                            get each () {\n                                                return subEntryPages();\n                                            },\n                                            children: (entries2, index)=>(()=>{\n                                                    var _el$23 = _tmpl$122(), _el$24 = _el$23.firstChild, _el$25 = _el$24.firstChild, _el$26 = _el$25.firstChild, _el$30 = _el$26.nextSibling, _el$28 = _el$30.nextSibling, _el$31 = _el$28.nextSibling;\n                                                    _el$31.nextSibling;\n                                                    _el$25.$$click = ()=>setExpandedPages((old)=>old.includes(index) ? old.filter((d)=>d !== index) : [\n                                                                ...old,\n                                                                index\n                                                            ]);\n                                                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$25, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Expander, {\n                                                        get expanded () {\n                                                            return expandedPages().includes(index);\n                                                        }\n                                                    }), _el$26);\n                                                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$25, index * 100, _el$30);\n                                                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$25, index * 100 + 100 - 1, _el$31);\n                                                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$24, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                                                        get when () {\n                                                            return expandedPages().includes(index);\n                                                        },\n                                                        get children () {\n                                                            var _el$32 = _tmpl$72();\n                                                            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$32, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Key, {\n                                                                get each () {\n                                                                    return entries2();\n                                                                },\n                                                                by: (entry)=>entry.label,\n                                                                children: (entry)=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Explorer, {\n                                                                        get defaultExpanded () {\n                                                                            return props.defaultExpanded;\n                                                                        },\n                                                                        get label () {\n                                                                            return entry().label;\n                                                                        },\n                                                                        get value () {\n                                                                            return entry().value;\n                                                                        },\n                                                                        get editable () {\n                                                                            return props.editable;\n                                                                        },\n                                                                        get dataPath () {\n                                                                            return [\n                                                                                ...currentDataPath,\n                                                                                entry().label\n                                                                            ];\n                                                                        },\n                                                                        get activeQuery () {\n                                                                            return props.activeQuery;\n                                                                        }\n                                                                    })\n                                                            }));\n                                                            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$32, styles().subEntry));\n                                                            return _el$32;\n                                                        }\n                                                    }), null);\n                                                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n                                                        var _v$10 = styles().entry, _v$11 = styles().expanderButton;\n                                                        _v$10 !== _p$.e && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$24, _p$.e = _v$10);\n                                                        _v$11 !== _p$.t && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$25, _p$.t = _v$11);\n                                                        return _p$;\n                                                    }, {\n                                                        e: void 0,\n                                                        t: void 0\n                                                    });\n                                                    return _el$23;\n                                                })()\n                                        }));\n                                        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$17, styles().subEntry));\n                                        return _el$17;\n                                    }\n                                })\n                            ];\n                        }\n                    })\n                ];\n            }\n        }), null);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$6, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n            get when () {\n                return subEntryPages().length === 0;\n            },\n            get children () {\n                var _el$18 = _tmpl$112(), _el$19 = _el$18.firstChild, _el$20 = _el$19.firstChild;\n                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$19, ()=>props.label, _el$20);\n                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$18, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                    get when () {\n                        return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>!!(props.editable && props.activeQuery !== void 0))() && (type() === \"string\" || type() === \"number\" || type() === \"boolean\");\n                    },\n                    get fallback () {\n                        return (()=>{\n                            var _el$33 = _tmpl$102();\n                            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$33, ()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.displayValue)(props.value));\n                            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$33, styles().value));\n                            return _el$33;\n                        })();\n                    },\n                    get children () {\n                        return [\n                            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                                get when () {\n                                    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>!!(props.editable && props.activeQuery !== void 0))() && (type() === \"string\" || type() === \"number\");\n                                },\n                                get children () {\n                                    var _el$21 = _tmpl$92();\n                                    _el$21.addEventListener(\"change\", (changeEvent)=>{\n                                        const oldData = props.activeQuery.state.data;\n                                        const newData = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.updateNestedDataByPath)(oldData, currentDataPath, type() === \"number\" ? changeEvent.target.valueAsNumber : changeEvent.target.value);\n                                        queryClient.setQueryData(props.activeQuery.queryKey, newData);\n                                    });\n                                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n                                        var _v$6 = type() === \"number\" ? \"number\" : \"text\", _v$7 = clsx(styles().value, styles().editableInput);\n                                        _v$6 !== _p$.e && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$21, \"type\", _p$.e = _v$6);\n                                        _v$7 !== _p$.t && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$21, _p$.t = _v$7);\n                                        return _p$;\n                                    }, {\n                                        e: void 0,\n                                        t: void 0\n                                    });\n                                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>_el$21.value = props.value);\n                                    return _el$21;\n                                }\n                            }),\n                            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                                get when () {\n                                    return type() === \"boolean\";\n                                },\n                                get children () {\n                                    var _el$22 = _tmpl$102();\n                                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$22, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ToggleValueButton, {\n                                        get activeQuery () {\n                                            return props.activeQuery;\n                                        },\n                                        dataPath: currentDataPath,\n                                        get value () {\n                                            return props.value;\n                                        }\n                                    }), null);\n                                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$22, ()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.displayValue)(props.value), null);\n                                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$22, clsx(styles().value, styles().actions, styles().editableInput)));\n                                    return _el$22;\n                                }\n                            })\n                        ];\n                    }\n                }), null);\n                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$18, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                    get when () {\n                        return props.editable && props.itemsDeletable && props.activeQuery !== void 0;\n                    },\n                    get children () {\n                        return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(DeleteItemButton, {\n                            get activeQuery () {\n                                return props.activeQuery;\n                            },\n                            dataPath: currentDataPath\n                        });\n                    }\n                }), null);\n                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n                    var _v$8 = styles().row, _v$9 = styles().label;\n                    _v$8 !== _p$.e && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$18, _p$.e = _v$8);\n                    _v$9 !== _p$.t && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$19, _p$.t = _v$9);\n                    return _p$;\n                }, {\n                    e: void 0,\n                    t: void 0\n                });\n                return _el$18;\n            }\n        }), null);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$6, styles().entry));\n        return _el$6;\n    })();\n}\nvar stylesFactory = (theme, css)=>{\n    const { colors, font, size: size3, border } = tokens;\n    const t2 = (light, dark)=>theme === \"light\" ? light : dark;\n    return {\n        entry: css`\n      & * {\n        font-size: ${font.size.xs};\n        font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,\n          'Liberation Mono', 'Courier New', monospace;\n      }\n      position: relative;\n      outline: none;\n      word-break: break-word;\n    `,\n        subEntry: css`\n      margin: 0 0 0 0.5em;\n      padding-left: 0.75em;\n      border-left: 2px solid ${t2(colors.gray[300], colors.darkGray[400])};\n      /* outline: 1px solid ${colors.teal[400]}; */\n    `,\n        expander: css`\n      & path {\n        stroke: ${colors.gray[400]};\n      }\n      & svg {\n        width: ${size3[3]};\n        height: ${size3[3]};\n      }\n      display: inline-flex;\n      align-items: center;\n      transition: all 0.1s ease;\n      /* outline: 1px solid ${colors.blue[400]}; */\n    `,\n        expanderButtonContainer: css`\n      display: flex;\n      align-items: center;\n      line-height: ${size3[4]};\n      min-height: ${size3[4]};\n      gap: ${size3[2]};\n    `,\n        expanderButton: css`\n      cursor: pointer;\n      color: inherit;\n      font: inherit;\n      outline: inherit;\n      height: ${size3[5]};\n      background: transparent;\n      border: none;\n      padding: 0;\n      display: inline-flex;\n      align-items: center;\n      gap: ${size3[1]};\n      position: relative;\n      /* outline: 1px solid ${colors.green[400]}; */\n\n      &:focus-visible {\n        border-radius: ${border.radius.xs};\n        outline: 2px solid ${colors.blue[800]};\n      }\n\n      & svg {\n        position: relative;\n        left: 1px;\n      }\n    `,\n        info: css`\n      color: ${t2(colors.gray[500], colors.gray[500])};\n      font-size: ${font.size.xs};\n      margin-left: ${size3[1]};\n      /* outline: 1px solid ${colors.yellow[400]}; */\n    `,\n        label: css`\n      color: ${t2(colors.gray[700], colors.gray[300])};\n      white-space: nowrap;\n    `,\n        value: css`\n      color: ${t2(colors.purple[600], colors.purple[400])};\n      flex-grow: 1;\n    `,\n        actions: css`\n      display: inline-flex;\n      gap: ${size3[2]};\n      align-items: center;\n    `,\n        row: css`\n      display: inline-flex;\n      gap: ${size3[2]};\n      width: 100%;\n      margin: ${size3[0.25]} 0px;\n      line-height: ${size3[4.5]};\n      align-items: center;\n    `,\n        editableInput: css`\n      border: none;\n      padding: ${size3[0.5]} ${size3[1]} ${size3[0.5]} ${size3[1.5]};\n      flex-grow: 1;\n      border-radius: ${border.radius.xs};\n      background-color: ${t2(colors.gray[200], colors.darkGray[500])};\n\n      &:hover {\n        background-color: ${t2(colors.gray[300], colors.darkGray[600])};\n      }\n    `,\n        actionButton: css`\n      background-color: transparent;\n      color: ${t2(colors.gray[500], colors.gray[500])};\n      border: none;\n      display: inline-flex;\n      padding: 0px;\n      align-items: center;\n      justify-content: center;\n      cursor: pointer;\n      width: ${size3[3]};\n      height: ${size3[3]};\n      position: relative;\n      z-index: 1;\n\n      &:hover svg {\n        color: ${t2(colors.gray[600], colors.gray[400])};\n      }\n\n      &:focus-visible {\n        border-radius: ${border.radius.xs};\n        outline: 2px solid ${colors.blue[800]};\n        outline-offset: 2px;\n      }\n    `\n    };\n};\nvar lightStyles = (css)=>stylesFactory(\"light\", css);\nvar darkStyles = (css)=>stylesFactory(\"dark\", css);\n(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.delegateEvents)([\n    \"click\"\n]);\n// src/Devtools.tsx\nvar _tmpl$26 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div><div aria-hidden=true></div><button type=button aria-label=\"Open Tanstack query devtools\"class=tsqd-open-btn>`);\nvar _tmpl$27 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div>`);\nvar _tmpl$33 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<aside aria-label=\"Tanstack query devtools\"><div></div><button aria-label=\"Close tanstack query devtools\">`);\nvar _tmpl$43 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<select name=tsqd-queries-filter-sort>`);\nvar _tmpl$53 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<select name=tsqd-mutations-filter-sort>`);\nvar _tmpl$63 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span>Asc`);\nvar _tmpl$73 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span>Desc`);\nvar _tmpl$83 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<button aria-label=\"Open in picture-in-picture mode\"title=\"Open in picture-in-picture mode\">`);\nvar _tmpl$93 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div>Settings`);\nvar _tmpl$103 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span>Position`);\nvar _tmpl$113 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span>Top`);\nvar _tmpl$123 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span>Bottom`);\nvar _tmpl$132 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span>Left`);\nvar _tmpl$142 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span>Right`);\nvar _tmpl$152 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span>Theme`);\nvar _tmpl$162 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span>Light`);\nvar _tmpl$172 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span>Dark`);\nvar _tmpl$182 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span>System`);\nvar _tmpl$192 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div><div class=tsqd-queries-container>`);\nvar _tmpl$202 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div><div class=tsqd-mutations-container>`);\nvar _tmpl$212 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div><div><div><button aria-label=\"Close Tanstack query devtools\"><span>TANSTACK</span><span> v</span></button></div></div><div><div><div><input aria-label=\"Filter queries by query key\"type=text placeholder=Filter name=tsqd-query-filter-input></div><div></div><button class=tsqd-query-filter-sort-order-btn></button></div><div><button aria-label=\"Clear query cache\"></button><button>`);\nvar _tmpl$223 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<option>Sort by `);\nvar _tmpl$232 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div class=tsqd-query-disabled-indicator>disabled`);\nvar _tmpl$242 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<button><div></div><code class=tsqd-query-hash>`);\nvar _tmpl$252 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div role=tooltip id=tsqd-status-tooltip>`);\nvar _tmpl$262 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span>`);\nvar _tmpl$272 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<button><span></span><span>`);\nvar _tmpl$28 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<button><span></span> Error`);\nvar _tmpl$29 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div><span></span>Trigger Error<select><option value=\"\"disabled selected>`);\nvar _tmpl$30 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div class=\"tsqd-query-details-explorer-container tsqd-query-details-data-explorer\">`);\nvar _tmpl$31 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<form><textarea name=data></textarea><div><span></span><div><button type=button>Cancel</button><button>Save`);\nvar _tmpl$322 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div><div>Query Details</div><div><div class=tsqd-query-details-summary><pre><code></code></pre><span></span></div><div class=tsqd-query-details-observers-count><span>Observers:</span><span></span></div><div class=tsqd-query-details-last-updated><span>Last Updated:</span><span></span></div></div><div>Actions</div><div><button><span></span>Refetch</button><button><span></span>Invalidate</button><button><span></span>Reset</button><button><span></span>Remove</button><button><span></span> Loading</button></div><div>Data </div><div>Query Explorer</div><div class=\"tsqd-query-details-explorer-container tsqd-query-details-query-explorer\">`);\nvar _tmpl$332 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<option>`);\nvar _tmpl$34 = /* @__PURE__ */ (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div><div>Mutation Details</div><div><div class=tsqd-query-details-summary><pre><code></code></pre><span></span></div><div class=tsqd-query-details-last-updated><span>Submitted At:</span><span></span></div></div><div>Variables Details</div><div class=\"tsqd-query-details-explorer-container tsqd-query-details-query-explorer\"></div><div>Context Details</div><div class=\"tsqd-query-details-explorer-container tsqd-query-details-query-explorer\"></div><div>Data Explorer</div><div class=\"tsqd-query-details-explorer-container tsqd-query-details-query-explorer\"></div><div>Mutations Explorer</div><div class=\"tsqd-query-details-explorer-container tsqd-query-details-query-explorer\">`);\nvar [selectedQueryHash, setSelectedQueryHash] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(null);\nvar [selectedMutationId, setSelectedMutationId] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(null);\nvar [panelWidth, setPanelWidth] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(0);\nvar [offline, setOffline] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(false);\nvar Devtools = (props)=>{\n    const theme = useTheme();\n    const css = useQueryDevtoolsContext().shadowDOMTarget ? u.bind({\n        target: useQueryDevtoolsContext().shadowDOMTarget\n    }) : u;\n    const styles = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles2(css) : lightStyles2(css);\n    });\n    const pip = usePiPWindow();\n    const buttonPosition = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return useQueryDevtoolsContext().buttonPosition || BUTTON_POSITION;\n    });\n    const isOpen = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return props.localStore.open === \"true\" ? true : props.localStore.open === \"false\" ? false : useQueryDevtoolsContext().initialIsOpen || INITIAL_IS_OPEN;\n    });\n    const position = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return props.localStore.position || useQueryDevtoolsContext().position || POSITION;\n    });\n    let transitionsContainerRef;\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        const root = transitionsContainerRef.parentElement;\n        const height = props.localStore.height || DEFAULT_HEIGHT;\n        const width = props.localStore.width || DEFAULT_WIDTH;\n        const panelPosition = position();\n        root.style.setProperty(\"--tsqd-panel-height\", `${panelPosition === \"top\" ? \"-\" : \"\"}${height}px`);\n        root.style.setProperty(\"--tsqd-panel-width\", `${panelPosition === \"left\" ? \"-\" : \"\"}${width}px`);\n    });\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onMount)(()=>{\n        const onFocus = ()=>{\n            const root = transitionsContainerRef.parentElement;\n            const fontSize = getComputedStyle(root).fontSize;\n            root.style.setProperty(\"--tsqd-font-size\", fontSize);\n        };\n        onFocus();\n        window.addEventListener(\"focus\", onFocus);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            window.removeEventListener(\"focus\", onFocus);\n        });\n    });\n    const pip_open = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>props.localStore.pip_open ?? \"false\");\n    return [\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n            get when () {\n                return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>!!pip().pipWindow)() && pip_open() == \"true\";\n            },\n            get children () {\n                return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Portal, {\n                    get mount () {\n                        return pip().pipWindow?.document.body;\n                    },\n                    get children () {\n                        return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(PiPPanel, {\n                            get children () {\n                                return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ContentView, props);\n                            }\n                        });\n                    }\n                });\n            }\n        }),\n        (()=>{\n            var _el$ = _tmpl$27();\n            var _ref$ = transitionsContainerRef;\n            typeof _ref$ === \"function\" ? (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.use)(_ref$, _el$) : transitionsContainerRef = _el$;\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(TransitionGroup, {\n                name: \"tsqd-panel-transition\",\n                get children () {\n                    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                        get when () {\n                            return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>!!(isOpen() && !pip().pipWindow))() && pip_open() == \"false\";\n                        },\n                        get children () {\n                            return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(DraggablePanel, {\n                                get localStore () {\n                                    return props.localStore;\n                                },\n                                get setLocalStore () {\n                                    return props.setLocalStore;\n                                }\n                            });\n                        }\n                    });\n                }\n            }), null);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(TransitionGroup, {\n                name: \"tsqd-button-transition\",\n                get children () {\n                    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                        get when () {\n                            return !isOpen();\n                        },\n                        get children () {\n                            var _el$2 = _tmpl$26(), _el$3 = _el$2.firstChild, _el$4 = _el$3.nextSibling;\n                            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$3, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(TanstackLogo, {}));\n                            _el$4.$$click = ()=>props.setLocalStore(\"open\", \"true\");\n                            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$4, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(TanstackLogo, {}));\n                            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$2, clsx(styles().devtoolsBtn, styles()[`devtoolsBtn-position-${buttonPosition()}`], \"tsqd-open-btn-container\")));\n                            return _el$2;\n                        }\n                    });\n                }\n            }), null);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$, clsx(css`\n            & .tsqd-panel-transition-exit-active,\n            & .tsqd-panel-transition-enter-active {\n              transition:\n                opacity 0.3s,\n                transform 0.3s;\n            }\n\n            & .tsqd-panel-transition-exit-to,\n            & .tsqd-panel-transition-enter {\n              ${position() === \"top\" || position() === \"bottom\" ? `transform: translateY(var(--tsqd-panel-height));` : `transform: translateX(var(--tsqd-panel-width));`}\n            }\n\n            & .tsqd-button-transition-exit-active,\n            & .tsqd-button-transition-enter-active {\n              transition:\n                opacity 0.3s,\n                transform 0.3s;\n              opacity: 1;\n            }\n\n            & .tsqd-button-transition-exit-to,\n            & .tsqd-button-transition-enter {\n              transform: ${buttonPosition() === \"relative\" ? `none;` : buttonPosition() === \"top-left\" ? `translateX(-72px);` : buttonPosition() === \"top-right\" ? `translateX(72px);` : `translateY(72px);`};\n              opacity: 0;\n            }\n          `, \"tsqd-transitions-container\")));\n            return _el$;\n        })()\n    ];\n};\nvar PiPPanel = (props)=>{\n    const pip = usePiPWindow();\n    const theme = useTheme();\n    const css = useQueryDevtoolsContext().shadowDOMTarget ? u.bind({\n        target: useQueryDevtoolsContext().shadowDOMTarget\n    }) : u;\n    const styles = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles2(css) : lightStyles2(css);\n    });\n    const getPanelDynamicStyles = ()=>{\n        const { colors } = tokens;\n        const t2 = (light, dark)=>theme() === \"dark\" ? dark : light;\n        if (panelWidth() < secondBreakpoint) {\n            return css`\n        flex-direction: column;\n        background-color: ${t2(colors.gray[300], colors.gray[600])};\n      `;\n        }\n        return css`\n      flex-direction: row;\n      background-color: ${t2(colors.gray[200], colors.darkGray[900])};\n    `;\n    };\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        const win = pip().pipWindow;\n        const resizeCB = ()=>{\n            if (!win) return;\n            setPanelWidth(win.innerWidth);\n        };\n        if (win) {\n            win.addEventListener(\"resize\", resizeCB);\n            resizeCB();\n        }\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            if (win) {\n                win.removeEventListener(\"resize\", resizeCB);\n            }\n        });\n    });\n    return (()=>{\n        var _el$5 = _tmpl$27();\n        _el$5.style.setProperty(\"--tsqd-font-size\", \"16px\");\n        _el$5.style.setProperty(\"max-height\", \"100vh\");\n        _el$5.style.setProperty(\"height\", \"100vh\");\n        _el$5.style.setProperty(\"width\", \"100vw\");\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$5, ()=>props.children);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$5, clsx(styles().panel, getPanelDynamicStyles(), {\n                [css`\n            min-width: min-content;\n          `]: panelWidth() < thirdBreakpoint\n            }, \"tsqd-main-panel\")));\n        return _el$5;\n    })();\n};\nvar ParentPanel = (props)=>{\n    const theme = useTheme();\n    const css = useQueryDevtoolsContext().shadowDOMTarget ? u.bind({\n        target: useQueryDevtoolsContext().shadowDOMTarget\n    }) : u;\n    const styles = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles2(css) : lightStyles2(css);\n    });\n    let panelRef;\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onMount)(()=>{\n        createResizeObserver(panelRef, ({ width }, el)=>{\n            if (el === panelRef) {\n                setPanelWidth(width);\n            }\n        });\n    });\n    const getPanelDynamicStyles = ()=>{\n        const { colors } = tokens;\n        const t2 = (light, dark)=>theme() === \"dark\" ? dark : light;\n        if (panelWidth() < secondBreakpoint) {\n            return css`\n        flex-direction: column;\n        background-color: ${t2(colors.gray[300], colors.gray[600])};\n      `;\n        }\n        return css`\n      flex-direction: row;\n      background-color: ${t2(colors.gray[200], colors.darkGray[900])};\n    `;\n    };\n    return (()=>{\n        var _el$6 = _tmpl$27();\n        var _ref$2 = panelRef;\n        typeof _ref$2 === \"function\" ? (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.use)(_ref$2, _el$6) : panelRef = _el$6;\n        _el$6.style.setProperty(\"--tsqd-font-size\", \"16px\");\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$6, ()=>props.children);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$6, clsx(styles().parentPanel, getPanelDynamicStyles(), {\n                [css`\n            min-width: min-content;\n          `]: panelWidth() < thirdBreakpoint\n            }, \"tsqd-main-panel\")));\n        return _el$6;\n    })();\n};\nvar DraggablePanel = (props)=>{\n    const theme = useTheme();\n    const css = useQueryDevtoolsContext().shadowDOMTarget ? u.bind({\n        target: useQueryDevtoolsContext().shadowDOMTarget\n    }) : u;\n    const styles = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles2(css) : lightStyles2(css);\n    });\n    const [isResizing, setIsResizing] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(false);\n    const position = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>props.localStore.position || useQueryDevtoolsContext().position || POSITION);\n    const handleDragStart = (event)=>{\n        const panelElement = event.currentTarget.parentElement;\n        if (!panelElement) return;\n        setIsResizing(true);\n        const { height, width } = panelElement.getBoundingClientRect();\n        const startX = event.clientX;\n        const startY = event.clientY;\n        let newSize = 0;\n        const minHeight = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.convertRemToPixels)(3.5);\n        const minWidth = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.convertRemToPixels)(12);\n        const runDrag = (moveEvent)=>{\n            moveEvent.preventDefault();\n            if (position() === \"left\" || position() === \"right\") {\n                const valToAdd = position() === \"right\" ? startX - moveEvent.clientX : moveEvent.clientX - startX;\n                newSize = Math.round(width + valToAdd);\n                if (newSize < minWidth) {\n                    newSize = minWidth;\n                }\n                props.setLocalStore(\"width\", String(Math.round(newSize)));\n                const newWidth = panelElement.getBoundingClientRect().width;\n                if (Number(props.localStore.width) < newWidth) {\n                    props.setLocalStore(\"width\", String(newWidth));\n                }\n            } else {\n                const valToAdd = position() === \"bottom\" ? startY - moveEvent.clientY : moveEvent.clientY - startY;\n                newSize = Math.round(height + valToAdd);\n                if (newSize < minHeight) {\n                    newSize = minHeight;\n                    setSelectedQueryHash(null);\n                }\n                props.setLocalStore(\"height\", String(Math.round(newSize)));\n            }\n        };\n        const unsubscribe = ()=>{\n            if (isResizing()) {\n                setIsResizing(false);\n            }\n            document.removeEventListener(\"mousemove\", runDrag, false);\n            document.removeEventListener(\"mouseUp\", unsubscribe, false);\n        };\n        document.addEventListener(\"mousemove\", runDrag, false);\n        document.addEventListener(\"mouseup\", unsubscribe, false);\n    };\n    let panelRef;\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onMount)(()=>{\n        createResizeObserver(panelRef, ({ width }, el)=>{\n            if (el === panelRef) {\n                setPanelWidth(width);\n            }\n        });\n    });\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        const rootContainer = panelRef.parentElement?.parentElement?.parentElement;\n        if (!rootContainer) return;\n        const currentPosition = props.localStore.position || POSITION;\n        const styleProp = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.getSidedProp)(\"padding\", currentPosition);\n        const isVertical = props.localStore.position === \"left\" || props.localStore.position === \"right\";\n        const previousPaddings = (({ padding, paddingTop, paddingBottom, paddingLeft, paddingRight })=>({\n                padding,\n                paddingTop,\n                paddingBottom,\n                paddingLeft,\n                paddingRight\n            }))(rootContainer.style);\n        rootContainer.style[styleProp] = `${isVertical ? props.localStore.width : props.localStore.height}px`;\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            Object.entries(previousPaddings).forEach(([property, previousValue])=>{\n                rootContainer.style[property] = previousValue;\n            });\n        });\n    });\n    const getPanelDynamicStyles = ()=>{\n        const { colors } = tokens;\n        const t2 = (light, dark)=>theme() === \"dark\" ? dark : light;\n        if (panelWidth() < secondBreakpoint) {\n            return css`\n        flex-direction: column;\n        background-color: ${t2(colors.gray[300], colors.gray[600])};\n      `;\n        }\n        return css`\n      flex-direction: row;\n      background-color: ${t2(colors.gray[200], colors.darkGray[900])};\n    `;\n    };\n    return (()=>{\n        var _el$7 = _tmpl$33(), _el$8 = _el$7.firstChild, _el$9 = _el$8.nextSibling;\n        var _ref$3 = panelRef;\n        typeof _ref$3 === \"function\" ? (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.use)(_ref$3, _el$7) : panelRef = _el$7;\n        _el$8.$$mousedown = handleDragStart;\n        _el$9.$$click = ()=>props.setLocalStore(\"open\", \"false\");\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$9, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ChevronDown, {}));\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$7, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ContentView, props), null);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n            var _v$ = clsx(styles().panel, styles()[`panel-position-${position()}`], getPanelDynamicStyles(), {\n                [css`\n            min-width: min-content;\n          `]: panelWidth() < thirdBreakpoint && (position() === \"right\" || position() === \"left\")\n            }, \"tsqd-main-panel\"), _v$2 = position() === \"bottom\" || position() === \"top\" ? `${props.localStore.height || DEFAULT_HEIGHT}px` : \"auto\", _v$3 = position() === \"right\" || position() === \"left\" ? `${props.localStore.width || DEFAULT_WIDTH}px` : \"auto\", _v$4 = clsx(styles().dragHandle, styles()[`dragHandle-position-${position()}`], \"tsqd-drag-handle\"), _v$5 = clsx(styles().closeBtn, styles()[`closeBtn-position-${position()}`], \"tsqd-minimize-btn\");\n            _v$ !== _p$.e && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$7, _p$.e = _v$);\n            _v$2 !== _p$.t && ((_p$.t = _v$2) != null ? _el$7.style.setProperty(\"height\", _v$2) : _el$7.style.removeProperty(\"height\"));\n            _v$3 !== _p$.a && ((_p$.a = _v$3) != null ? _el$7.style.setProperty(\"width\", _v$3) : _el$7.style.removeProperty(\"width\"));\n            _v$4 !== _p$.o && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$8, _p$.o = _v$4);\n            _v$5 !== _p$.i && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$9, _p$.i = _v$5);\n            return _p$;\n        }, {\n            e: void 0,\n            t: void 0,\n            a: void 0,\n            o: void 0,\n            i: void 0\n        });\n        return _el$7;\n    })();\n};\nvar ContentView = (props)=>{\n    setupQueryCacheSubscription();\n    setupMutationCacheSubscription();\n    let containerRef;\n    const theme = useTheme();\n    const css = useQueryDevtoolsContext().shadowDOMTarget ? u.bind({\n        target: useQueryDevtoolsContext().shadowDOMTarget\n    }) : u;\n    const styles = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles2(css) : lightStyles2(css);\n    });\n    const pip = usePiPWindow();\n    const [selectedView, setSelectedView] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(\"queries\");\n    const sort = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>props.localStore.sort || DEFAULT_SORT_FN_NAME);\n    const sortOrder = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>Number(props.localStore.sortOrder) || DEFAULT_SORT_ORDER);\n    const mutationSort = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>props.localStore.mutationSort || DEFAULT_MUTATION_SORT_FN_NAME);\n    const mutationSortOrder = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>Number(props.localStore.mutationSortOrder) || DEFAULT_SORT_ORDER);\n    const sortFn = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.sortFns[sort()]);\n    const mutationSortFn = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mutationSortFns[mutationSort()]);\n    const onlineManager = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>useQueryDevtoolsContext().onlineManager);\n    const query_cache = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return useQueryDevtoolsContext().client.getQueryCache();\n    });\n    const mutation_cache = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return useQueryDevtoolsContext().client.getMutationCache();\n    });\n    const queryCount = createSubscribeToQueryCacheBatcher((queryCache)=>{\n        return queryCache().getAll().length;\n    }, false);\n    const queries = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)((0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.on)(()=>[\n            queryCount(),\n            props.localStore.filter,\n            sort(),\n            sortOrder()\n        ], ()=>{\n        const curr = query_cache().getAll();\n        const filtered = props.localStore.filter ? curr.filter((item)=>rankItem(item.queryHash, props.localStore.filter || \"\").passed) : [\n            ...curr\n        ];\n        const sorted = sortFn() ? filtered.sort((a2, b2)=>sortFn()(a2, b2) * sortOrder()) : filtered;\n        return sorted;\n    }));\n    const mutationCount = createSubscribeToMutationCacheBatcher((mutationCache)=>{\n        return mutationCache().getAll().length;\n    }, false);\n    const mutations = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)((0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.on)(()=>[\n            mutationCount(),\n            props.localStore.mutationFilter,\n            mutationSort(),\n            mutationSortOrder()\n        ], ()=>{\n        const curr = mutation_cache().getAll();\n        const filtered = props.localStore.mutationFilter ? curr.filter((item)=>{\n            const value = `${item.options.mutationKey ? JSON.stringify(item.options.mutationKey) + \" - \" : \"\"}${new Date(item.state.submittedAt).toLocaleString()}`;\n            return rankItem(value, props.localStore.mutationFilter || \"\").passed;\n        }) : [\n            ...curr\n        ];\n        const sorted = mutationSortFn() ? filtered.sort((a2, b2)=>mutationSortFn()(a2, b2) * mutationSortOrder()) : filtered;\n        return sorted;\n    }));\n    const setDevtoolsPosition = (pos)=>{\n        props.setLocalStore(\"position\", pos);\n    };\n    const setComputedVariables = (el)=>{\n        const computedStyle = getComputedStyle(containerRef);\n        const variable = computedStyle.getPropertyValue(\"--tsqd-font-size\");\n        el.style.setProperty(\"--tsqd-font-size\", variable);\n    };\n    return [\n        (()=>{\n            var _el$10 = _tmpl$212(), _el$11 = _el$10.firstChild, _el$12 = _el$11.firstChild, _el$13 = _el$12.firstChild, _el$14 = _el$13.firstChild, _el$15 = _el$14.nextSibling, _el$16 = _el$15.firstChild, _el$17 = _el$11.nextSibling, _el$18 = _el$17.firstChild, _el$19 = _el$18.firstChild, _el$20 = _el$19.firstChild, _el$21 = _el$19.nextSibling, _el$24 = _el$21.nextSibling, _el$27 = _el$18.nextSibling, _el$28 = _el$27.firstChild, _el$29 = _el$28.nextSibling;\n            var _ref$4 = containerRef;\n            typeof _ref$4 === \"function\" ? (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.use)(_ref$4, _el$10) : containerRef = _el$10;\n            _el$13.$$click = ()=>{\n                if (!pip().pipWindow && !props.showPanelViewOnly) {\n                    props.setLocalStore(\"open\", \"false\");\n                    return;\n                }\n                if (props.onClose) {\n                    props.onClose();\n                }\n            };\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$15, ()=>useQueryDevtoolsContext().queryFlavor, _el$16);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$15, ()=>useQueryDevtoolsContext().version, null);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$12, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(radio_group_exports.Root, {\n                get [\"class\"] () {\n                    return clsx(styles().viewToggle);\n                },\n                get value () {\n                    return selectedView();\n                },\n                onChange: (value)=>{\n                    setSelectedView(value);\n                    setSelectedQueryHash(null);\n                    setSelectedMutationId(null);\n                },\n                get children () {\n                    return [\n                        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(radio_group_exports.Item, {\n                            value: \"queries\",\n                            \"class\": \"tsqd-radio-toggle\",\n                            get children () {\n                                return [\n                                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(radio_group_exports.ItemInput, {}),\n                                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(radio_group_exports.ItemControl, {\n                                        get children () {\n                                            return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(radio_group_exports.ItemIndicator, {});\n                                        }\n                                    }),\n                                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(radio_group_exports.ItemLabel, {\n                                        title: \"Toggle Queries View\",\n                                        children: \"Queries\"\n                                    })\n                                ];\n                            }\n                        }),\n                        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(radio_group_exports.Item, {\n                            value: \"mutations\",\n                            \"class\": \"tsqd-radio-toggle\",\n                            get children () {\n                                return [\n                                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(radio_group_exports.ItemInput, {}),\n                                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(radio_group_exports.ItemControl, {\n                                        get children () {\n                                            return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(radio_group_exports.ItemIndicator, {});\n                                        }\n                                    }),\n                                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(radio_group_exports.ItemLabel, {\n                                        title: \"Toggle Mutations View\",\n                                        children: \"Mutations\"\n                                    })\n                                ];\n                            }\n                        })\n                    ];\n                }\n            }), null);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$11, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return selectedView() === \"queries\";\n                },\n                get children () {\n                    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(QueryStatusCount, {});\n                }\n            }), null);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$11, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return selectedView() === \"mutations\";\n                },\n                get children () {\n                    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MutationStatusCount, {});\n                }\n            }), null);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$19, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Search, {}), _el$20);\n            _el$20.$$input = (e2)=>{\n                if (selectedView() === \"queries\") {\n                    props.setLocalStore(\"filter\", e2.currentTarget.value);\n                } else {\n                    props.setLocalStore(\"mutationFilter\", e2.currentTarget.value);\n                }\n            };\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$21, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return selectedView() === \"queries\";\n                },\n                get children () {\n                    var _el$22 = _tmpl$43();\n                    _el$22.addEventListener(\"change\", (e2)=>{\n                        props.setLocalStore(\"sort\", e2.currentTarget.value);\n                    });\n                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$22, ()=>Object.keys(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.sortFns).map((key)=>(()=>{\n                                var _el$45 = _tmpl$223();\n                                _el$45.firstChild;\n                                _el$45.value = key;\n                                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$45, key, null);\n                                return _el$45;\n                            })()));\n                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>_el$22.value = sort());\n                    return _el$22;\n                }\n            }), null);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$21, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return selectedView() === \"mutations\";\n                },\n                get children () {\n                    var _el$23 = _tmpl$53();\n                    _el$23.addEventListener(\"change\", (e2)=>{\n                        props.setLocalStore(\"mutationSort\", e2.currentTarget.value);\n                    });\n                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$23, ()=>Object.keys(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mutationSortFns).map((key)=>(()=>{\n                                var _el$47 = _tmpl$223();\n                                _el$47.firstChild;\n                                _el$47.value = key;\n                                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$47, key, null);\n                                return _el$47;\n                            })()));\n                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>_el$23.value = mutationSort());\n                    return _el$23;\n                }\n            }), null);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$21, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ChevronDown, {}), null);\n            _el$24.$$click = ()=>{\n                if (selectedView() === \"queries\") {\n                    props.setLocalStore(\"sortOrder\", String(sortOrder() * -1));\n                } else {\n                    props.setLocalStore(\"mutationSortOrder\", String(mutationSortOrder() * -1));\n                }\n            };\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$24, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return (selectedView() === \"queries\" ? sortOrder() : mutationSortOrder()) === 1;\n                },\n                get children () {\n                    return [\n                        _tmpl$63(),\n                        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ArrowUp, {})\n                    ];\n                }\n            }), null);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$24, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return (selectedView() === \"queries\" ? sortOrder() : mutationSortOrder()) === -1;\n                },\n                get children () {\n                    return [\n                        _tmpl$73(),\n                        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ArrowDown, {})\n                    ];\n                }\n            }), null);\n            _el$28.$$click = ()=>{\n                if (selectedView() === \"queries\") {\n                    query_cache().clear();\n                } else {\n                    mutation_cache().clear();\n                }\n            };\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$28, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Trash, {}));\n            _el$29.$$click = ()=>{\n                if (offline()) {\n                    onlineManager().setOnline(true);\n                    setOffline(false);\n                } else {\n                    onlineManager().setOnline(false);\n                    setOffline(true);\n                }\n            };\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$29, (()=>{\n                var _c$ = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>!!offline());\n                return ()=>_c$() ? (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Offline, {}) : (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Wifi, {});\n            })());\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$27, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>!!!pip().pipWindow)() && !pip().disabled;\n                },\n                get children () {\n                    var _el$30 = _tmpl$83();\n                    _el$30.$$click = ()=>{\n                        pip().requestPipWindow(Number(window.innerWidth), Number(props.localStore.height ?? 500));\n                    };\n                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$30, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(PiPIcon, {}));\n                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$30, clsx(styles().actionsBtn, \"tsqd-actions-btn\", \"tsqd-action-open-pip\")));\n                    return _el$30;\n                }\n            }), null);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$27, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(dropdown_menu_exports.Root, {\n                gutter: 4,\n                get children () {\n                    return [\n                        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(dropdown_menu_exports.Trigger, {\n                            get [\"class\"] () {\n                                return clsx(styles().actionsBtn, \"tsqd-actions-btn\", \"tsqd-action-settings\");\n                            },\n                            get children () {\n                                return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Settings, {});\n                            }\n                        }),\n                        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(dropdown_menu_exports.Portal, {\n                            ref: (el)=>setComputedVariables(el),\n                            get mount () {\n                                return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>!!pip().pipWindow)() ? pip().pipWindow.document.body : document.body;\n                            },\n                            get children () {\n                                return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(dropdown_menu_exports.Content, {\n                                    get [\"class\"] () {\n                                        return clsx(styles().settingsMenu, \"tsqd-settings-menu\");\n                                    },\n                                    get children () {\n                                        return [\n                                            (()=>{\n                                                var _el$31 = _tmpl$93();\n                                                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$31, clsx(styles().settingsMenuHeader, \"tsqd-settings-menu-header\")));\n                                                return _el$31;\n                                            })(),\n                                            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                                                get when () {\n                                                    return !props.showPanelViewOnly;\n                                                },\n                                                get children () {\n                                                    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(dropdown_menu_exports.Sub, {\n                                                        overlap: true,\n                                                        gutter: 8,\n                                                        shift: -4,\n                                                        get children () {\n                                                            return [\n                                                                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(dropdown_menu_exports.SubTrigger, {\n                                                                    get [\"class\"] () {\n                                                                        return clsx(styles().settingsSubTrigger, \"tsqd-settings-menu-sub-trigger\", \"tsqd-settings-menu-sub-trigger-position\");\n                                                                    },\n                                                                    get children () {\n                                                                        return [\n                                                                            _tmpl$103(),\n                                                                            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ChevronDown, {})\n                                                                        ];\n                                                                    }\n                                                                }),\n                                                                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(dropdown_menu_exports.Portal, {\n                                                                    ref: (el)=>setComputedVariables(el),\n                                                                    get mount () {\n                                                                        return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>!!pip().pipWindow)() ? pip().pipWindow.document.body : document.body;\n                                                                    },\n                                                                    get children () {\n                                                                        return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(dropdown_menu_exports.SubContent, {\n                                                                            get [\"class\"] () {\n                                                                                return clsx(styles().settingsMenu, \"tsqd-settings-submenu\");\n                                                                            },\n                                                                            get children () {\n                                                                                return [\n                                                                                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(dropdown_menu_exports.Item, {\n                                                                                        onSelect: ()=>{\n                                                                                            setDevtoolsPosition(\"top\");\n                                                                                        },\n                                                                                        as: \"button\",\n                                                                                        get [\"class\"] () {\n                                                                                            return clsx(styles().settingsSubButton, \"tsqd-settings-menu-position-btn\", \"tsqd-settings-menu-position-btn-top\");\n                                                                                        },\n                                                                                        get children () {\n                                                                                            return [\n                                                                                                _tmpl$113(),\n                                                                                                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ArrowUp, {})\n                                                                                            ];\n                                                                                        }\n                                                                                    }),\n                                                                                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(dropdown_menu_exports.Item, {\n                                                                                        onSelect: ()=>{\n                                                                                            setDevtoolsPosition(\"bottom\");\n                                                                                        },\n                                                                                        as: \"button\",\n                                                                                        get [\"class\"] () {\n                                                                                            return clsx(styles().settingsSubButton, \"tsqd-settings-menu-position-btn\", \"tsqd-settings-menu-position-btn-bottom\");\n                                                                                        },\n                                                                                        get children () {\n                                                                                            return [\n                                                                                                _tmpl$123(),\n                                                                                                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ArrowDown, {})\n                                                                                            ];\n                                                                                        }\n                                                                                    }),\n                                                                                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(dropdown_menu_exports.Item, {\n                                                                                        onSelect: ()=>{\n                                                                                            setDevtoolsPosition(\"left\");\n                                                                                        },\n                                                                                        as: \"button\",\n                                                                                        get [\"class\"] () {\n                                                                                            return clsx(styles().settingsSubButton, \"tsqd-settings-menu-position-btn\", \"tsqd-settings-menu-position-btn-left\");\n                                                                                        },\n                                                                                        get children () {\n                                                                                            return [\n                                                                                                _tmpl$132(),\n                                                                                                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ArrowLeft, {})\n                                                                                            ];\n                                                                                        }\n                                                                                    }),\n                                                                                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(dropdown_menu_exports.Item, {\n                                                                                        onSelect: ()=>{\n                                                                                            setDevtoolsPosition(\"right\");\n                                                                                        },\n                                                                                        as: \"button\",\n                                                                                        get [\"class\"] () {\n                                                                                            return clsx(styles().settingsSubButton, \"tsqd-settings-menu-position-btn\", \"tsqd-settings-menu-position-btn-right\");\n                                                                                        },\n                                                                                        get children () {\n                                                                                            return [\n                                                                                                _tmpl$142(),\n                                                                                                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ArrowRight, {})\n                                                                                            ];\n                                                                                        }\n                                                                                    })\n                                                                                ];\n                                                                            }\n                                                                        });\n                                                                    }\n                                                                })\n                                                            ];\n                                                        }\n                                                    });\n                                                }\n                                            }),\n                                            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(dropdown_menu_exports.Sub, {\n                                                overlap: true,\n                                                gutter: 8,\n                                                shift: -4,\n                                                get children () {\n                                                    return [\n                                                        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(dropdown_menu_exports.SubTrigger, {\n                                                            get [\"class\"] () {\n                                                                return clsx(styles().settingsSubTrigger, \"tsqd-settings-menu-sub-trigger\", \"tsqd-settings-menu-sub-trigger-position\");\n                                                            },\n                                                            get children () {\n                                                                return [\n                                                                    _tmpl$152(),\n                                                                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ChevronDown, {})\n                                                                ];\n                                                            }\n                                                        }),\n                                                        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(dropdown_menu_exports.Portal, {\n                                                            ref: (el)=>setComputedVariables(el),\n                                                            get mount () {\n                                                                return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>!!pip().pipWindow)() ? pip().pipWindow.document.body : document.body;\n                                                            },\n                                                            get children () {\n                                                                return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(dropdown_menu_exports.SubContent, {\n                                                                    get [\"class\"] () {\n                                                                        return clsx(styles().settingsMenu, \"tsqd-settings-submenu\");\n                                                                    },\n                                                                    get children () {\n                                                                        return [\n                                                                            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(dropdown_menu_exports.Item, {\n                                                                                onSelect: ()=>{\n                                                                                    props.setLocalStore(\"theme_preference\", \"light\");\n                                                                                },\n                                                                                as: \"button\",\n                                                                                get [\"class\"] () {\n                                                                                    return clsx(styles().settingsSubButton, props.localStore.theme_preference === \"light\" && styles().themeSelectedButton, \"tsqd-settings-menu-position-btn\", \"tsqd-settings-menu-position-btn-top\");\n                                                                                },\n                                                                                get children () {\n                                                                                    return [\n                                                                                        _tmpl$162(),\n                                                                                        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Sun, {})\n                                                                                    ];\n                                                                                }\n                                                                            }),\n                                                                            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(dropdown_menu_exports.Item, {\n                                                                                onSelect: ()=>{\n                                                                                    props.setLocalStore(\"theme_preference\", \"dark\");\n                                                                                },\n                                                                                as: \"button\",\n                                                                                get [\"class\"] () {\n                                                                                    return clsx(styles().settingsSubButton, props.localStore.theme_preference === \"dark\" && styles().themeSelectedButton, \"tsqd-settings-menu-position-btn\", \"tsqd-settings-menu-position-btn-bottom\");\n                                                                                },\n                                                                                get children () {\n                                                                                    return [\n                                                                                        _tmpl$172(),\n                                                                                        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Moon, {})\n                                                                                    ];\n                                                                                }\n                                                                            }),\n                                                                            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(dropdown_menu_exports.Item, {\n                                                                                onSelect: ()=>{\n                                                                                    props.setLocalStore(\"theme_preference\", \"system\");\n                                                                                },\n                                                                                as: \"button\",\n                                                                                get [\"class\"] () {\n                                                                                    return clsx(styles().settingsSubButton, props.localStore.theme_preference === \"system\" && styles().themeSelectedButton, \"tsqd-settings-menu-position-btn\", \"tsqd-settings-menu-position-btn-left\");\n                                                                                },\n                                                                                get children () {\n                                                                                    return [\n                                                                                        _tmpl$182(),\n                                                                                        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Monitor, {})\n                                                                                    ];\n                                                                                }\n                                                                            })\n                                                                        ];\n                                                                    }\n                                                                });\n                                                            }\n                                                        })\n                                                    ];\n                                                }\n                                            })\n                                        ];\n                                    }\n                                });\n                            }\n                        })\n                    ];\n                }\n            }), null);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$10, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return selectedView() === \"queries\";\n                },\n                get children () {\n                    var _el$41 = _tmpl$192(), _el$42 = _el$41.firstChild;\n                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$42, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Key, {\n                        by: (q)=>q.queryHash,\n                        get each () {\n                            return queries();\n                        },\n                        children: (query)=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(QueryRow, {\n                                get query () {\n                                    return query();\n                                }\n                            })\n                    }));\n                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$41, clsx(styles().overflowQueryContainer, \"tsqd-queries-overflow-container\")));\n                    return _el$41;\n                }\n            }), null);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$10, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return selectedView() === \"mutations\";\n                },\n                get children () {\n                    var _el$43 = _tmpl$202(), _el$44 = _el$43.firstChild;\n                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$44, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Key, {\n                        by: (m)=>m.mutationId,\n                        get each () {\n                            return mutations();\n                        },\n                        children: (mutation)=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MutationRow, {\n                                get mutation () {\n                                    return mutation();\n                                }\n                            })\n                    }));\n                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$43, clsx(styles().overflowQueryContainer, \"tsqd-mutations-overflow-container\")));\n                    return _el$43;\n                }\n            }), null);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n                var _v$6 = clsx(styles().queriesContainer, panelWidth() < secondBreakpoint && (selectedQueryHash() || selectedMutationId()) && css`\n              height: 50%;\n              max-height: 50%;\n            `, panelWidth() < secondBreakpoint && !(selectedQueryHash() || selectedMutationId()) && css`\n              height: 100%;\n              max-height: 100%;\n            `, \"tsqd-queries-container\"), _v$7 = clsx(styles().row, \"tsqd-header\"), _v$8 = styles().logoAndToggleContainer, _v$9 = clsx(styles().logo, \"tsqd-text-logo-container\"), _v$10 = clsx(styles().tanstackLogo, \"tsqd-text-logo-tanstack\"), _v$11 = clsx(styles().queryFlavorLogo, \"tsqd-text-logo-query-flavor\"), _v$12 = clsx(styles().row, \"tsqd-filters-actions-container\"), _v$13 = clsx(styles().filtersContainer, \"tsqd-filters-container\"), _v$14 = clsx(styles().filterInput, \"tsqd-query-filter-textfield-container\"), _v$15 = clsx(\"tsqd-query-filter-textfield\"), _v$16 = clsx(styles().filterSelect, \"tsqd-query-filter-sort-container\"), _v$17 = `Sort order ${(selectedView() === \"queries\" ? sortOrder() : mutationSortOrder()) === -1 ? \"descending\" : \"ascending\"}`, _v$18 = (selectedView() === \"queries\" ? sortOrder() : mutationSortOrder()) === -1, _v$19 = clsx(styles().actionsContainer, \"tsqd-actions-container\"), _v$20 = clsx(styles().actionsBtn, \"tsqd-actions-btn\", \"tsqd-action-clear-cache\"), _v$21 = `Clear ${selectedView()} cache`, _v$22 = clsx(styles().actionsBtn, offline() && styles().actionsBtnOffline, \"tsqd-actions-btn\", \"tsqd-action-mock-offline-behavior\"), _v$23 = `${offline() ? \"Unset offline mocking behavior\" : \"Mock offline behavior\"}`, _v$24 = offline(), _v$25 = `${offline() ? \"Unset offline mocking behavior\" : \"Mock offline behavior\"}`;\n                _v$6 !== _p$.e && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$10, _p$.e = _v$6);\n                _v$7 !== _p$.t && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$11, _p$.t = _v$7);\n                _v$8 !== _p$.a && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$12, _p$.a = _v$8);\n                _v$9 !== _p$.o && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$13, _p$.o = _v$9);\n                _v$10 !== _p$.i && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$14, _p$.i = _v$10);\n                _v$11 !== _p$.n && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$15, _p$.n = _v$11);\n                _v$12 !== _p$.s && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$17, _p$.s = _v$12);\n                _v$13 !== _p$.h && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$18, _p$.h = _v$13);\n                _v$14 !== _p$.r && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$19, _p$.r = _v$14);\n                _v$15 !== _p$.d && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$20, _p$.d = _v$15);\n                _v$16 !== _p$.l && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$21, _p$.l = _v$16);\n                _v$17 !== _p$.u && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$24, \"aria-label\", _p$.u = _v$17);\n                _v$18 !== _p$.c && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$24, \"aria-pressed\", _p$.c = _v$18);\n                _v$19 !== _p$.w && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$27, _p$.w = _v$19);\n                _v$20 !== _p$.m && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$28, _p$.m = _v$20);\n                _v$21 !== _p$.f && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$28, \"title\", _p$.f = _v$21);\n                _v$22 !== _p$.y && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$29, _p$.y = _v$22);\n                _v$23 !== _p$.g && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$29, \"aria-label\", _p$.g = _v$23);\n                _v$24 !== _p$.p && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$29, \"aria-pressed\", _p$.p = _v$24);\n                _v$25 !== _p$.b && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$29, \"title\", _p$.b = _v$25);\n                return _p$;\n            }, {\n                e: void 0,\n                t: void 0,\n                a: void 0,\n                o: void 0,\n                i: void 0,\n                n: void 0,\n                s: void 0,\n                h: void 0,\n                r: void 0,\n                d: void 0,\n                l: void 0,\n                u: void 0,\n                c: void 0,\n                w: void 0,\n                m: void 0,\n                f: void 0,\n                y: void 0,\n                g: void 0,\n                p: void 0,\n                b: void 0\n            });\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>_el$20.value = selectedView() === \"queries\" ? props.localStore.filter || \"\" : props.localStore.mutationFilter || \"\");\n            return _el$10;\n        })(),\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n            get when () {\n                return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>selectedView() === \"queries\")() && selectedQueryHash();\n            },\n            get children () {\n                return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(QueryDetails, {});\n            }\n        }),\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n            get when () {\n                return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>selectedView() === \"mutations\")() && selectedMutationId();\n            },\n            get children () {\n                return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MutationDetails, {});\n            }\n        })\n    ];\n};\nvar QueryRow = (props)=>{\n    const theme = useTheme();\n    const css = useQueryDevtoolsContext().shadowDOMTarget ? u.bind({\n        target: useQueryDevtoolsContext().shadowDOMTarget\n    }) : u;\n    const styles = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles2(css) : lightStyles2(css);\n    });\n    const { colors, alpha } = tokens;\n    const t2 = (light, dark)=>theme() === \"dark\" ? dark : light;\n    const queryState = createSubscribeToQueryCacheBatcher((queryCache)=>queryCache().find({\n            queryKey: props.query.queryKey\n        })?.state, true, (e2)=>e2.query.queryHash === props.query.queryHash);\n    const isDisabled = createSubscribeToQueryCacheBatcher((queryCache)=>queryCache().find({\n            queryKey: props.query.queryKey\n        })?.isDisabled() ?? false, true, (e2)=>e2.query.queryHash === props.query.queryHash);\n    const isStale = createSubscribeToQueryCacheBatcher((queryCache)=>queryCache().find({\n            queryKey: props.query.queryKey\n        })?.isStale() ?? false, true, (e2)=>e2.query.queryHash === props.query.queryHash);\n    const observers = createSubscribeToQueryCacheBatcher((queryCache)=>queryCache().find({\n            queryKey: props.query.queryKey\n        })?.getObserversCount() ?? 0, true, (e2)=>e2.query.queryHash === props.query.queryHash);\n    const color = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.getQueryStatusColor)({\n            queryState: queryState(),\n            observerCount: observers(),\n            isStale: isStale()\n        }));\n    const getObserverCountColorStyles = ()=>{\n        if (color() === \"gray\") {\n            return css`\n        background-color: ${t2(colors[color()][200], colors[color()][700])};\n        color: ${t2(colors[color()][700], colors[color()][300])};\n      `;\n        }\n        return css`\n      background-color: ${t2(colors[color()][200] + alpha[80], colors[color()][900])};\n      color: ${t2(colors[color()][800], colors[color()][300])};\n    `;\n    };\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n        get when () {\n            return queryState();\n        },\n        get children () {\n            var _el$49 = _tmpl$242(), _el$50 = _el$49.firstChild, _el$51 = _el$50.nextSibling;\n            _el$49.$$click = ()=>setSelectedQueryHash(props.query.queryHash === selectedQueryHash() ? null : props.query.queryHash);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$50, observers);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$51, ()=>props.query.queryHash);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$49, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return isDisabled();\n                },\n                get children () {\n                    return _tmpl$232();\n                }\n            }), null);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n                var _v$26 = clsx(styles().queryRow, selectedQueryHash() === props.query.queryHash && styles().selectedQueryRow, \"tsqd-query-row\"), _v$27 = `Query key ${props.query.queryHash}`, _v$28 = clsx(getObserverCountColorStyles(), \"tsqd-query-observer-count\");\n                _v$26 !== _p$.e && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$49, _p$.e = _v$26);\n                _v$27 !== _p$.t && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$49, \"aria-label\", _p$.t = _v$27);\n                _v$28 !== _p$.a && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$50, _p$.a = _v$28);\n                return _p$;\n            }, {\n                e: void 0,\n                t: void 0,\n                a: void 0\n            });\n            return _el$49;\n        }\n    });\n};\nvar MutationRow = (props)=>{\n    const theme = useTheme();\n    const css = useQueryDevtoolsContext().shadowDOMTarget ? u.bind({\n        target: useQueryDevtoolsContext().shadowDOMTarget\n    }) : u;\n    const styles = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles2(css) : lightStyles2(css);\n    });\n    const { colors, alpha } = tokens;\n    const t2 = (light, dark)=>theme() === \"dark\" ? dark : light;\n    const mutationState = createSubscribeToMutationCacheBatcher((mutationCache)=>{\n        const mutations = mutationCache().getAll();\n        const mutation = mutations.find((m)=>m.mutationId === props.mutation.mutationId);\n        return mutation?.state;\n    });\n    const isPaused = createSubscribeToMutationCacheBatcher((mutationCache)=>{\n        const mutations = mutationCache().getAll();\n        const mutation = mutations.find((m)=>m.mutationId === props.mutation.mutationId);\n        if (!mutation) return false;\n        return mutation.state.isPaused;\n    });\n    const status = createSubscribeToMutationCacheBatcher((mutationCache)=>{\n        const mutations = mutationCache().getAll();\n        const mutation = mutations.find((m)=>m.mutationId === props.mutation.mutationId);\n        if (!mutation) return \"idle\";\n        return mutation.state.status;\n    });\n    const color = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.getMutationStatusColor)({\n            isPaused: isPaused(),\n            status: status()\n        }));\n    const getObserverCountColorStyles = ()=>{\n        if (color() === \"gray\") {\n            return css`\n        background-color: ${t2(colors[color()][200], colors[color()][700])};\n        color: ${t2(colors[color()][700], colors[color()][300])};\n      `;\n        }\n        return css`\n      background-color: ${t2(colors[color()][200] + alpha[80], colors[color()][900])};\n      color: ${t2(colors[color()][800], colors[color()][300])};\n    `;\n    };\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n        get when () {\n            return mutationState();\n        },\n        get children () {\n            var _el$53 = _tmpl$242(), _el$54 = _el$53.firstChild, _el$55 = _el$54.nextSibling;\n            _el$53.$$click = ()=>{\n                setSelectedMutationId(props.mutation.mutationId === selectedMutationId() ? null : props.mutation.mutationId);\n            };\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$54, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return color() === \"purple\";\n                },\n                get children () {\n                    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(PauseCircle, {});\n                }\n            }), null);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$54, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return color() === \"green\";\n                },\n                get children () {\n                    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(CheckCircle, {});\n                }\n            }), null);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$54, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return color() === \"red\";\n                },\n                get children () {\n                    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(XCircle, {});\n                }\n            }), null);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$54, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return color() === \"yellow\";\n                },\n                get children () {\n                    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(LoadingCircle, {});\n                }\n            }), null);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$55, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return props.mutation.options.mutationKey;\n                },\n                get children () {\n                    return [\n                        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>JSON.stringify(props.mutation.options.mutationKey)),\n                        \" -\",\n                        \" \"\n                    ];\n                }\n            }), null);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$55, ()=>new Date(props.mutation.state.submittedAt).toLocaleString(), null);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n                var _v$29 = clsx(styles().queryRow, selectedMutationId() === props.mutation.mutationId && styles().selectedQueryRow, \"tsqd-query-row\"), _v$30 = `Mutation submitted at ${new Date(props.mutation.state.submittedAt).toLocaleString()}`, _v$31 = clsx(getObserverCountColorStyles(), \"tsqd-query-observer-count\");\n                _v$29 !== _p$.e && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$53, _p$.e = _v$29);\n                _v$30 !== _p$.t && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$53, \"aria-label\", _p$.t = _v$30);\n                _v$31 !== _p$.a && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$54, _p$.a = _v$31);\n                return _p$;\n            }, {\n                e: void 0,\n                t: void 0,\n                a: void 0\n            });\n            return _el$53;\n        }\n    });\n};\nvar QueryStatusCount = ()=>{\n    const stale = createSubscribeToQueryCacheBatcher((queryCache)=>queryCache().getAll().filter((q)=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.getQueryStatusLabel)(q) === \"stale\").length);\n    const fresh = createSubscribeToQueryCacheBatcher((queryCache)=>queryCache().getAll().filter((q)=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.getQueryStatusLabel)(q) === \"fresh\").length);\n    const fetching = createSubscribeToQueryCacheBatcher((queryCache)=>queryCache().getAll().filter((q)=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.getQueryStatusLabel)(q) === \"fetching\").length);\n    const paused = createSubscribeToQueryCacheBatcher((queryCache)=>queryCache().getAll().filter((q)=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.getQueryStatusLabel)(q) === \"paused\").length);\n    const inactive = createSubscribeToQueryCacheBatcher((queryCache)=>queryCache().getAll().filter((q)=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.getQueryStatusLabel)(q) === \"inactive\").length);\n    const theme = useTheme();\n    const css = useQueryDevtoolsContext().shadowDOMTarget ? u.bind({\n        target: useQueryDevtoolsContext().shadowDOMTarget\n    }) : u;\n    const styles = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles2(css) : lightStyles2(css);\n    });\n    return (()=>{\n        var _el$56 = _tmpl$27();\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$56, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(QueryStatus, {\n            label: \"Fresh\",\n            color: \"green\",\n            get count () {\n                return fresh();\n            }\n        }), null);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$56, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(QueryStatus, {\n            label: \"Fetching\",\n            color: \"blue\",\n            get count () {\n                return fetching();\n            }\n        }), null);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$56, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(QueryStatus, {\n            label: \"Paused\",\n            color: \"purple\",\n            get count () {\n                return paused();\n            }\n        }), null);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$56, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(QueryStatus, {\n            label: \"Stale\",\n            color: \"yellow\",\n            get count () {\n                return stale();\n            }\n        }), null);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$56, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(QueryStatus, {\n            label: \"Inactive\",\n            color: \"gray\",\n            get count () {\n                return inactive();\n            }\n        }), null);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$56, clsx(styles().queryStatusContainer, \"tsqd-query-status-container\")));\n        return _el$56;\n    })();\n};\nvar MutationStatusCount = ()=>{\n    const success = createSubscribeToMutationCacheBatcher((mutationCache)=>mutationCache().getAll().filter((m)=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.getMutationStatusColor)({\n                isPaused: m.state.isPaused,\n                status: m.state.status\n            }) === \"green\").length);\n    const pending = createSubscribeToMutationCacheBatcher((mutationCache)=>mutationCache().getAll().filter((m)=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.getMutationStatusColor)({\n                isPaused: m.state.isPaused,\n                status: m.state.status\n            }) === \"yellow\").length);\n    const paused = createSubscribeToMutationCacheBatcher((mutationCache)=>mutationCache().getAll().filter((m)=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.getMutationStatusColor)({\n                isPaused: m.state.isPaused,\n                status: m.state.status\n            }) === \"purple\").length);\n    const error = createSubscribeToMutationCacheBatcher((mutationCache)=>mutationCache().getAll().filter((m)=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.getMutationStatusColor)({\n                isPaused: m.state.isPaused,\n                status: m.state.status\n            }) === \"red\").length);\n    const theme = useTheme();\n    const css = useQueryDevtoolsContext().shadowDOMTarget ? u.bind({\n        target: useQueryDevtoolsContext().shadowDOMTarget\n    }) : u;\n    const styles = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles2(css) : lightStyles2(css);\n    });\n    return (()=>{\n        var _el$57 = _tmpl$27();\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$57, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(QueryStatus, {\n            label: \"Paused\",\n            color: \"purple\",\n            get count () {\n                return paused();\n            }\n        }), null);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$57, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(QueryStatus, {\n            label: \"Pending\",\n            color: \"yellow\",\n            get count () {\n                return pending();\n            }\n        }), null);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$57, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(QueryStatus, {\n            label: \"Success\",\n            color: \"green\",\n            get count () {\n                return success();\n            }\n        }), null);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$57, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(QueryStatus, {\n            label: \"Error\",\n            color: \"red\",\n            get count () {\n                return error();\n            }\n        }), null);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$57, clsx(styles().queryStatusContainer, \"tsqd-query-status-container\")));\n        return _el$57;\n    })();\n};\nvar QueryStatus = (props)=>{\n    const theme = useTheme();\n    const css = useQueryDevtoolsContext().shadowDOMTarget ? u.bind({\n        target: useQueryDevtoolsContext().shadowDOMTarget\n    }) : u;\n    const styles = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles2(css) : lightStyles2(css);\n    });\n    const { colors, alpha } = tokens;\n    const t2 = (light, dark)=>theme() === \"dark\" ? dark : light;\n    let tagRef;\n    const [mouseOver, setMouseOver] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(false);\n    const [focused, setFocused] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(false);\n    const showLabel = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        if (selectedQueryHash()) {\n            if (panelWidth() < firstBreakpoint && panelWidth() > secondBreakpoint) {\n                return false;\n            }\n        }\n        if (panelWidth() < secondBreakpoint) {\n            return false;\n        }\n        return true;\n    });\n    return (()=>{\n        var _el$58 = _tmpl$272(), _el$60 = _el$58.firstChild, _el$62 = _el$60.nextSibling;\n        var _ref$5 = tagRef;\n        typeof _ref$5 === \"function\" ? (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.use)(_ref$5, _el$58) : tagRef = _el$58;\n        _el$58.addEventListener(\"mouseleave\", ()=>{\n            setMouseOver(false);\n            setFocused(false);\n        });\n        _el$58.addEventListener(\"mouseenter\", ()=>setMouseOver(true));\n        _el$58.addEventListener(\"blur\", ()=>setFocused(false));\n        _el$58.addEventListener(\"focus\", ()=>setFocused(true));\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.spread)(_el$58, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n            get disabled () {\n                return showLabel();\n            },\n            get [\"class\"] () {\n                return clsx(styles().queryStatusTag, !showLabel() && css`\n            cursor: pointer;\n            &:hover {\n              background: ${t2(colors.gray[200], colors.darkGray[400])}${alpha[80]};\n            }\n          `, \"tsqd-query-status-tag\", `tsqd-query-status-tag-${props.label.toLowerCase()}`);\n            }\n        }, ()=>mouseOver() || focused() ? {\n                \"aria-describedby\": \"tsqd-status-tooltip\"\n            } : {}), false, true);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$58, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n            get when () {\n                return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>!!!showLabel())() && (mouseOver() || focused());\n            },\n            get children () {\n                var _el$59 = _tmpl$252();\n                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$59, ()=>props.label);\n                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$59, clsx(styles().statusTooltip, \"tsqd-query-status-tooltip\")));\n                return _el$59;\n            }\n        }), _el$60);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$58, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n            get when () {\n                return showLabel();\n            },\n            get children () {\n                var _el$61 = _tmpl$262();\n                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$61, ()=>props.label);\n                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$61, clsx(styles().queryStatusTagLabel, \"tsqd-query-status-tag-label\")));\n                return _el$61;\n            }\n        }), _el$62);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$62, ()=>props.count);\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n            var _v$32 = clsx(css`\n            width: ${tokens.size[1.5]};\n            height: ${tokens.size[1.5]};\n            border-radius: ${tokens.border.radius.full};\n            background-color: ${tokens.colors[props.color][500]};\n          `, \"tsqd-query-status-tag-dot\"), _v$33 = clsx(styles().queryStatusCount, props.count > 0 && props.color !== \"gray\" && css`\n              background-color: ${t2(colors[props.color][100], colors[props.color][900])};\n              color: ${t2(colors[props.color][700], colors[props.color][300])};\n            `, \"tsqd-query-status-tag-count\");\n            _v$32 !== _p$.e && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$60, _p$.e = _v$32);\n            _v$33 !== _p$.t && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$62, _p$.t = _v$33);\n            return _p$;\n        }, {\n            e: void 0,\n            t: void 0\n        });\n        return _el$58;\n    })();\n};\nvar QueryDetails = ()=>{\n    const theme = useTheme();\n    const css = useQueryDevtoolsContext().shadowDOMTarget ? u.bind({\n        target: useQueryDevtoolsContext().shadowDOMTarget\n    }) : u;\n    const styles = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles2(css) : lightStyles2(css);\n    });\n    const { colors } = tokens;\n    const t2 = (light, dark)=>theme() === \"dark\" ? dark : light;\n    const queryClient = useQueryDevtoolsContext().client;\n    const [restoringLoading, setRestoringLoading] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(false);\n    const [dataMode, setDataMode] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(\"view\");\n    const [dataEditError, setDataEditError] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(false);\n    const errorTypes = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return useQueryDevtoolsContext().errorTypes || [];\n    });\n    const activeQuery = createSubscribeToQueryCacheBatcher((queryCache)=>queryCache().getAll().find((query)=>query.queryHash === selectedQueryHash()), false);\n    const activeQueryFresh = createSubscribeToQueryCacheBatcher((queryCache)=>{\n        return queryCache().getAll().find((query)=>query.queryHash === selectedQueryHash());\n    }, false);\n    const activeQueryState = createSubscribeToQueryCacheBatcher((queryCache)=>queryCache().getAll().find((query)=>query.queryHash === selectedQueryHash())?.state, false);\n    const activeQueryStateData = createSubscribeToQueryCacheBatcher((queryCache)=>{\n        return queryCache().getAll().find((query)=>query.queryHash === selectedQueryHash())?.state.data;\n    }, false);\n    const statusLabel = createSubscribeToQueryCacheBatcher((queryCache)=>{\n        const query = queryCache().getAll().find((q)=>q.queryHash === selectedQueryHash());\n        if (!query) return \"inactive\";\n        return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.getQueryStatusLabel)(query);\n    });\n    const queryStatus = createSubscribeToQueryCacheBatcher((queryCache)=>{\n        const query = queryCache().getAll().find((q)=>q.queryHash === selectedQueryHash());\n        if (!query) return \"pending\";\n        return query.state.status;\n    });\n    const observerCount = createSubscribeToQueryCacheBatcher((queryCache)=>queryCache().getAll().find((query)=>query.queryHash === selectedQueryHash())?.getObserversCount() ?? 0);\n    const color = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.getQueryStatusColorByLabel)(statusLabel()));\n    const handleRefetch = ()=>{\n        const promise = activeQuery()?.fetch();\n        promise?.catch(()=>{});\n    };\n    const triggerError = (errorType)=>{\n        const error = errorType?.initializer(activeQuery()) ?? new Error(\"Unknown error from devtools\");\n        const __previousQueryOptions = activeQuery().options;\n        activeQuery().setState({\n            status: \"error\",\n            error,\n            fetchMeta: {\n                ...activeQuery().state.fetchMeta,\n                __previousQueryOptions\n            }\n        });\n    };\n    const restoreQueryAfterLoadingOrError = ()=>{\n        const activeQueryVal = activeQuery();\n        const previousState = activeQueryVal.state;\n        const previousOptions = activeQueryVal.state.fetchMeta ? activeQueryVal.state.fetchMeta.__previousQueryOptions : null;\n        activeQueryVal.cancel({\n            silent: true\n        });\n        activeQueryVal.setState({\n            ...previousState,\n            fetchStatus: \"idle\",\n            fetchMeta: null\n        });\n        if (previousOptions) {\n            activeQueryVal.fetch(previousOptions);\n        }\n    };\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (statusLabel() !== \"fetching\") {\n            setRestoringLoading(false);\n        }\n    });\n    const getQueryStatusColors = ()=>{\n        if (color() === \"gray\") {\n            return css`\n        background-color: ${t2(colors[color()][200], colors[color()][700])};\n        color: ${t2(colors[color()][700], colors[color()][300])};\n        border-color: ${t2(colors[color()][400], colors[color()][600])};\n      `;\n        }\n        return css`\n      background-color: ${t2(colors[color()][100], colors[color()][900])};\n      color: ${t2(colors[color()][700], colors[color()][300])};\n      border-color: ${t2(colors[color()][400], colors[color()][600])};\n    `;\n    };\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n        get when () {\n            return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>!!activeQuery())() && activeQueryState();\n        },\n        get children () {\n            var _el$63 = _tmpl$322(), _el$64 = _el$63.firstChild, _el$65 = _el$64.nextSibling, _el$66 = _el$65.firstChild, _el$67 = _el$66.firstChild, _el$68 = _el$67.firstChild, _el$69 = _el$67.nextSibling, _el$70 = _el$66.nextSibling, _el$71 = _el$70.firstChild, _el$72 = _el$71.nextSibling, _el$73 = _el$70.nextSibling, _el$74 = _el$73.firstChild, _el$75 = _el$74.nextSibling, _el$76 = _el$65.nextSibling, _el$77 = _el$76.nextSibling, _el$78 = _el$77.firstChild, _el$79 = _el$78.firstChild, _el$80 = _el$78.nextSibling, _el$81 = _el$80.firstChild, _el$82 = _el$80.nextSibling, _el$83 = _el$82.firstChild, _el$84 = _el$82.nextSibling, _el$85 = _el$84.firstChild, _el$86 = _el$84.nextSibling, _el$87 = _el$86.firstChild, _el$88 = _el$87.nextSibling, _el$97 = _el$77.nextSibling;\n            _el$97.firstChild;\n            var _el$107 = _el$97.nextSibling, _el$108 = _el$107.nextSibling;\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$68, ()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.displayValue)(activeQuery().queryKey, true));\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$69, statusLabel);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$72, observerCount);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$75, ()=>new Date(activeQueryState().dataUpdatedAt).toLocaleTimeString());\n            _el$78.$$click = handleRefetch;\n            _el$80.$$click = ()=>queryClient.invalidateQueries(activeQuery());\n            _el$82.$$click = ()=>queryClient.resetQueries(activeQuery());\n            _el$84.$$click = ()=>{\n                queryClient.removeQueries(activeQuery());\n                setSelectedQueryHash(null);\n            };\n            _el$86.$$click = ()=>{\n                if (activeQuery()?.state.data === void 0) {\n                    setRestoringLoading(true);\n                    restoreQueryAfterLoadingOrError();\n                } else {\n                    const activeQueryVal = activeQuery();\n                    if (!activeQueryVal) return;\n                    const __previousQueryOptions = activeQueryVal.options;\n                    activeQueryVal.fetch({\n                        ...__previousQueryOptions,\n                        queryFn: ()=>{\n                            return new Promise(()=>{});\n                        },\n                        gcTime: -1\n                    });\n                    activeQueryVal.setState({\n                        data: void 0,\n                        status: \"pending\",\n                        fetchMeta: {\n                            ...activeQueryVal.state.fetchMeta,\n                            __previousQueryOptions\n                        }\n                    });\n                }\n            };\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$86, ()=>queryStatus() === \"pending\" ? \"Restore\" : \"Trigger\", _el$88);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$77, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return errorTypes().length === 0 || queryStatus() === \"error\";\n                },\n                get children () {\n                    var _el$89 = _tmpl$28(), _el$90 = _el$89.firstChild, _el$91 = _el$90.nextSibling;\n                    _el$89.$$click = ()=>{\n                        if (!activeQuery().state.error) {\n                            triggerError();\n                        } else {\n                            queryClient.resetQueries(activeQuery());\n                        }\n                    };\n                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$89, ()=>queryStatus() === \"error\" ? \"Restore\" : \"Trigger\", _el$91);\n                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n                        var _v$34 = clsx(css`\n                  color: ${t2(colors.red[500], colors.red[400])};\n                `, \"tsqd-query-details-actions-btn\", \"tsqd-query-details-action-error\"), _v$35 = queryStatus() === \"pending\", _v$36 = css`\n                  background-color: ${t2(colors.red[500], colors.red[400])};\n                `;\n                        _v$34 !== _p$.e && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$89, _p$.e = _v$34);\n                        _v$35 !== _p$.t && (_el$89.disabled = _p$.t = _v$35);\n                        _v$36 !== _p$.a && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$90, _p$.a = _v$36);\n                        return _p$;\n                    }, {\n                        e: void 0,\n                        t: void 0,\n                        a: void 0\n                    });\n                    return _el$89;\n                }\n            }), null);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$77, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return !(errorTypes().length === 0 || queryStatus() === \"error\");\n                },\n                get children () {\n                    var _el$92 = _tmpl$29(), _el$93 = _el$92.firstChild, _el$94 = _el$93.nextSibling, _el$95 = _el$94.nextSibling;\n                    _el$95.firstChild;\n                    _el$95.addEventListener(\"change\", (e2)=>{\n                        const errorType = errorTypes().find((et)=>et.name === e2.currentTarget.value);\n                        triggerError(errorType);\n                    });\n                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$95, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.For, {\n                        get each () {\n                            return errorTypes();\n                        },\n                        children: (errorType)=>(()=>{\n                                var _el$109 = _tmpl$332();\n                                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$109, ()=>errorType.name);\n                                (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>_el$109.value = errorType.name);\n                                return _el$109;\n                            })()\n                    }), null);\n                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$92, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ChevronDown, {}), null);\n                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n                        var _v$37 = clsx(styles().actionsSelect, \"tsqd-query-details-actions-btn\", \"tsqd-query-details-action-error-multiple\"), _v$38 = css`\n                  background-color: ${tokens.colors.red[400]};\n                `, _v$39 = queryStatus() === \"pending\";\n                        _v$37 !== _p$.e && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$92, _p$.e = _v$37);\n                        _v$38 !== _p$.t && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$93, _p$.t = _v$38);\n                        _v$39 !== _p$.a && (_el$95.disabled = _p$.a = _v$39);\n                        return _p$;\n                    }, {\n                        e: void 0,\n                        t: void 0,\n                        a: void 0\n                    });\n                    return _el$92;\n                }\n            }), null);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$97, ()=>dataMode() === \"view\" ? \"Explorer\" : \"Editor\", null);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$63, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return dataMode() === \"view\";\n                },\n                get children () {\n                    var _el$99 = _tmpl$30();\n                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$99, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Explorer, {\n                        label: \"Data\",\n                        defaultExpanded: [\n                            \"Data\"\n                        ],\n                        get value () {\n                            return activeQueryStateData();\n                        },\n                        editable: true,\n                        onEdit: ()=>setDataMode(\"edit\"),\n                        get activeQuery () {\n                            return activeQuery();\n                        }\n                    }));\n                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_$p)=>(_$p = tokens.size[2]) != null ? _el$99.style.setProperty(\"padding\", _$p) : _el$99.style.removeProperty(\"padding\"));\n                    return _el$99;\n                }\n            }), _el$107);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$63, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return dataMode() === \"edit\";\n                },\n                get children () {\n                    var _el$100 = _tmpl$31(), _el$101 = _el$100.firstChild, _el$102 = _el$101.nextSibling, _el$103 = _el$102.firstChild, _el$104 = _el$103.nextSibling, _el$105 = _el$104.firstChild, _el$106 = _el$105.nextSibling;\n                    _el$100.addEventListener(\"submit\", (e2)=>{\n                        e2.preventDefault();\n                        const formData = new FormData(e2.currentTarget);\n                        const data = formData.get(\"data\");\n                        try {\n                            const parsedData = JSON.parse(data);\n                            activeQuery().setState({\n                                ...activeQuery().state,\n                                data: parsedData\n                            });\n                            setDataMode(\"view\");\n                        } catch (error) {\n                            setDataEditError(true);\n                        }\n                    });\n                    _el$101.addEventListener(\"focus\", ()=>setDataEditError(false));\n                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$103, ()=>dataEditError() ? \"Invalid Value\" : \"\");\n                    _el$105.$$click = ()=>setDataMode(\"view\");\n                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n                        var _v$40 = clsx(styles().devtoolsEditForm, \"tsqd-query-details-data-editor\"), _v$41 = styles().devtoolsEditTextarea, _v$42 = dataEditError(), _v$43 = styles().devtoolsEditFormActions, _v$44 = styles().devtoolsEditFormError, _v$45 = styles().devtoolsEditFormActionContainer, _v$46 = clsx(styles().devtoolsEditFormAction, css`\n                      color: ${t2(colors.gray[600], colors.gray[300])};\n                    `), _v$47 = clsx(styles().devtoolsEditFormAction, css`\n                      color: ${t2(colors.blue[600], colors.blue[400])};\n                    `);\n                        _v$40 !== _p$.e && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$100, _p$.e = _v$40);\n                        _v$41 !== _p$.t && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$101, _p$.t = _v$41);\n                        _v$42 !== _p$.a && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$101, \"data-error\", _p$.a = _v$42);\n                        _v$43 !== _p$.o && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$102, _p$.o = _v$43);\n                        _v$44 !== _p$.i && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$103, _p$.i = _v$44);\n                        _v$45 !== _p$.n && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$104, _p$.n = _v$45);\n                        _v$46 !== _p$.s && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$105, _p$.s = _v$46);\n                        _v$47 !== _p$.h && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$106, _p$.h = _v$47);\n                        return _p$;\n                    }, {\n                        e: void 0,\n                        t: void 0,\n                        a: void 0,\n                        o: void 0,\n                        i: void 0,\n                        n: void 0,\n                        s: void 0,\n                        h: void 0\n                    });\n                    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>_el$101.value = JSON.stringify(activeQueryStateData(), null, 2));\n                    return _el$100;\n                }\n            }), _el$107);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$108, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Explorer, {\n                label: \"Query\",\n                defaultExpanded: [\n                    \"Query\",\n                    \"queryKey\"\n                ],\n                get value () {\n                    return activeQueryFresh();\n                }\n            }));\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n                var _v$48 = clsx(styles().detailsContainer, \"tsqd-query-details-container\"), _v$49 = clsx(styles().detailsHeader, \"tsqd-query-details-header\"), _v$50 = clsx(styles().detailsBody, \"tsqd-query-details-summary-container\"), _v$51 = clsx(styles().queryDetailsStatus, getQueryStatusColors()), _v$52 = clsx(styles().detailsHeader, \"tsqd-query-details-header\"), _v$53 = clsx(styles().actionsBody, \"tsqd-query-details-actions-container\"), _v$54 = clsx(css`\n                color: ${t2(colors.blue[600], colors.blue[400])};\n              `, \"tsqd-query-details-actions-btn\", \"tsqd-query-details-action-refetch\"), _v$55 = statusLabel() === \"fetching\", _v$56 = css`\n                background-color: ${t2(colors.blue[600], colors.blue[400])};\n              `, _v$57 = clsx(css`\n                color: ${t2(colors.yellow[600], colors.yellow[400])};\n              `, \"tsqd-query-details-actions-btn\", \"tsqd-query-details-action-invalidate\"), _v$58 = queryStatus() === \"pending\", _v$59 = css`\n                background-color: ${t2(colors.yellow[600], colors.yellow[400])};\n              `, _v$60 = clsx(css`\n                color: ${t2(colors.gray[600], colors.gray[300])};\n              `, \"tsqd-query-details-actions-btn\", \"tsqd-query-details-action-reset\"), _v$61 = queryStatus() === \"pending\", _v$62 = css`\n                background-color: ${t2(colors.gray[600], colors.gray[400])};\n              `, _v$63 = clsx(css`\n                color: ${t2(colors.pink[500], colors.pink[400])};\n              `, \"tsqd-query-details-actions-btn\", \"tsqd-query-details-action-remove\"), _v$64 = statusLabel() === \"fetching\", _v$65 = css`\n                background-color: ${t2(colors.pink[500], colors.pink[400])};\n              `, _v$66 = clsx(css`\n                color: ${t2(colors.cyan[500], colors.cyan[400])};\n              `, \"tsqd-query-details-actions-btn\", \"tsqd-query-details-action-loading\"), _v$67 = restoringLoading(), _v$68 = css`\n                background-color: ${t2(colors.cyan[500], colors.cyan[400])};\n              `, _v$69 = clsx(styles().detailsHeader, \"tsqd-query-details-header\"), _v$70 = clsx(styles().detailsHeader, \"tsqd-query-details-header\"), _v$71 = tokens.size[2];\n                _v$48 !== _p$.e && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$63, _p$.e = _v$48);\n                _v$49 !== _p$.t && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$64, _p$.t = _v$49);\n                _v$50 !== _p$.a && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$65, _p$.a = _v$50);\n                _v$51 !== _p$.o && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$69, _p$.o = _v$51);\n                _v$52 !== _p$.i && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$76, _p$.i = _v$52);\n                _v$53 !== _p$.n && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$77, _p$.n = _v$53);\n                _v$54 !== _p$.s && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$78, _p$.s = _v$54);\n                _v$55 !== _p$.h && (_el$78.disabled = _p$.h = _v$55);\n                _v$56 !== _p$.r && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$79, _p$.r = _v$56);\n                _v$57 !== _p$.d && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$80, _p$.d = _v$57);\n                _v$58 !== _p$.l && (_el$80.disabled = _p$.l = _v$58);\n                _v$59 !== _p$.u && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$81, _p$.u = _v$59);\n                _v$60 !== _p$.c && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$82, _p$.c = _v$60);\n                _v$61 !== _p$.w && (_el$82.disabled = _p$.w = _v$61);\n                _v$62 !== _p$.m && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$83, _p$.m = _v$62);\n                _v$63 !== _p$.f && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$84, _p$.f = _v$63);\n                _v$64 !== _p$.y && (_el$84.disabled = _p$.y = _v$64);\n                _v$65 !== _p$.g && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$85, _p$.g = _v$65);\n                _v$66 !== _p$.p && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$86, _p$.p = _v$66);\n                _v$67 !== _p$.b && (_el$86.disabled = _p$.b = _v$67);\n                _v$68 !== _p$.T && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$87, _p$.T = _v$68);\n                _v$69 !== _p$.A && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$97, _p$.A = _v$69);\n                _v$70 !== _p$.O && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$107, _p$.O = _v$70);\n                _v$71 !== _p$.I && ((_p$.I = _v$71) != null ? _el$108.style.setProperty(\"padding\", _v$71) : _el$108.style.removeProperty(\"padding\"));\n                return _p$;\n            }, {\n                e: void 0,\n                t: void 0,\n                a: void 0,\n                o: void 0,\n                i: void 0,\n                n: void 0,\n                s: void 0,\n                h: void 0,\n                r: void 0,\n                d: void 0,\n                l: void 0,\n                u: void 0,\n                c: void 0,\n                w: void 0,\n                m: void 0,\n                f: void 0,\n                y: void 0,\n                g: void 0,\n                p: void 0,\n                b: void 0,\n                T: void 0,\n                A: void 0,\n                O: void 0,\n                I: void 0\n            });\n            return _el$63;\n        }\n    });\n};\nvar MutationDetails = ()=>{\n    const theme = useTheme();\n    const css = useQueryDevtoolsContext().shadowDOMTarget ? u.bind({\n        target: useQueryDevtoolsContext().shadowDOMTarget\n    }) : u;\n    const styles = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles2(css) : lightStyles2(css);\n    });\n    const { colors } = tokens;\n    const t2 = (light, dark)=>theme() === \"dark\" ? dark : light;\n    const isPaused = createSubscribeToMutationCacheBatcher((mutationCache)=>{\n        const mutations = mutationCache().getAll();\n        const mutation = mutations.find((m)=>m.mutationId === selectedMutationId());\n        if (!mutation) return false;\n        return mutation.state.isPaused;\n    });\n    const status = createSubscribeToMutationCacheBatcher((mutationCache)=>{\n        const mutations = mutationCache().getAll();\n        const mutation = mutations.find((m)=>m.mutationId === selectedMutationId());\n        if (!mutation) return \"idle\";\n        return mutation.state.status;\n    });\n    const color = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.getMutationStatusColor)({\n            isPaused: isPaused(),\n            status: status()\n        }));\n    const activeMutation = createSubscribeToMutationCacheBatcher((mutationCache)=>mutationCache().getAll().find((mutation)=>mutation.mutationId === selectedMutationId()), false);\n    const getQueryStatusColors = ()=>{\n        if (color() === \"gray\") {\n            return css`\n        background-color: ${t2(colors[color()][200], colors[color()][700])};\n        color: ${t2(colors[color()][700], colors[color()][300])};\n        border-color: ${t2(colors[color()][400], colors[color()][600])};\n      `;\n        }\n        return css`\n      background-color: ${t2(colors[color()][100], colors[color()][900])};\n      color: ${t2(colors[color()][700], colors[color()][300])};\n      border-color: ${t2(colors[color()][400], colors[color()][600])};\n    `;\n    };\n    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n        get when () {\n            return activeMutation();\n        },\n        get children () {\n            var _el$110 = _tmpl$34(), _el$111 = _el$110.firstChild, _el$112 = _el$111.nextSibling, _el$113 = _el$112.firstChild, _el$114 = _el$113.firstChild, _el$115 = _el$114.firstChild, _el$116 = _el$114.nextSibling, _el$117 = _el$113.nextSibling, _el$118 = _el$117.firstChild, _el$119 = _el$118.nextSibling, _el$120 = _el$112.nextSibling, _el$121 = _el$120.nextSibling, _el$122 = _el$121.nextSibling, _el$123 = _el$122.nextSibling, _el$124 = _el$123.nextSibling, _el$125 = _el$124.nextSibling, _el$126 = _el$125.nextSibling, _el$127 = _el$126.nextSibling;\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$115, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return activeMutation().options.mutationKey;\n                },\n                fallback: \"No mutationKey found\",\n                get children () {\n                    return (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.displayValue)(activeMutation().options.mutationKey, true);\n                }\n            }));\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$116, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return color() === \"purple\";\n                },\n                children: \"pending\"\n            }), null);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$116, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return color() !== \"purple\";\n                },\n                get children () {\n                    return status();\n                }\n            }), null);\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$119, ()=>new Date(activeMutation().state.submittedAt).toLocaleTimeString());\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$121, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Explorer, {\n                label: \"Variables\",\n                defaultExpanded: [\n                    \"Variables\"\n                ],\n                get value () {\n                    return activeMutation().state.variables;\n                }\n            }));\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$123, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Explorer, {\n                label: \"Context\",\n                defaultExpanded: [\n                    \"Context\"\n                ],\n                get value () {\n                    return activeMutation().state.context;\n                }\n            }));\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$125, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Explorer, {\n                label: \"Data\",\n                defaultExpanded: [\n                    \"Data\"\n                ],\n                get value () {\n                    return activeMutation().state.data;\n                }\n            }));\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$127, (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Explorer, {\n                label: \"Mutation\",\n                defaultExpanded: [\n                    \"Mutation\"\n                ],\n                get value () {\n                    return activeMutation();\n                }\n            }));\n            (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n                var _v$72 = clsx(styles().detailsContainer, \"tsqd-query-details-container\"), _v$73 = clsx(styles().detailsHeader, \"tsqd-query-details-header\"), _v$74 = clsx(styles().detailsBody, \"tsqd-query-details-summary-container\"), _v$75 = clsx(styles().queryDetailsStatus, getQueryStatusColors()), _v$76 = clsx(styles().detailsHeader, \"tsqd-query-details-header\"), _v$77 = tokens.size[2], _v$78 = clsx(styles().detailsHeader, \"tsqd-query-details-header\"), _v$79 = tokens.size[2], _v$80 = clsx(styles().detailsHeader, \"tsqd-query-details-header\"), _v$81 = tokens.size[2], _v$82 = clsx(styles().detailsHeader, \"tsqd-query-details-header\"), _v$83 = tokens.size[2];\n                _v$72 !== _p$.e && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$110, _p$.e = _v$72);\n                _v$73 !== _p$.t && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$111, _p$.t = _v$73);\n                _v$74 !== _p$.a && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$112, _p$.a = _v$74);\n                _v$75 !== _p$.o && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$116, _p$.o = _v$75);\n                _v$76 !== _p$.i && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$120, _p$.i = _v$76);\n                _v$77 !== _p$.n && ((_p$.n = _v$77) != null ? _el$121.style.setProperty(\"padding\", _v$77) : _el$121.style.removeProperty(\"padding\"));\n                _v$78 !== _p$.s && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$122, _p$.s = _v$78);\n                _v$79 !== _p$.h && ((_p$.h = _v$79) != null ? _el$123.style.setProperty(\"padding\", _v$79) : _el$123.style.removeProperty(\"padding\"));\n                _v$80 !== _p$.r && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$124, _p$.r = _v$80);\n                _v$81 !== _p$.d && ((_p$.d = _v$81) != null ? _el$125.style.setProperty(\"padding\", _v$81) : _el$125.style.removeProperty(\"padding\"));\n                _v$82 !== _p$.l && (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$126, _p$.l = _v$82);\n                _v$83 !== _p$.u && ((_p$.u = _v$83) != null ? _el$127.style.setProperty(\"padding\", _v$83) : _el$127.style.removeProperty(\"padding\"));\n                return _p$;\n            }, {\n                e: void 0,\n                t: void 0,\n                a: void 0,\n                o: void 0,\n                i: void 0,\n                n: void 0,\n                s: void 0,\n                h: void 0,\n                r: void 0,\n                d: void 0,\n                l: void 0,\n                u: void 0\n            });\n            return _el$110;\n        }\n    });\n};\nvar queryCacheMap = /* @__PURE__ */ new Map();\nvar setupQueryCacheSubscription = ()=>{\n    const queryCache = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        const client = useQueryDevtoolsContext().client;\n        return client.getQueryCache();\n    });\n    const unsubscribe = queryCache().subscribe((q)=>{\n        (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.batch)(()=>{\n            for (const [callback, value] of queryCacheMap.entries()){\n                if (!value.shouldUpdate(q)) continue;\n                value.setter(callback(queryCache));\n            }\n        });\n    });\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n        queryCacheMap.clear();\n        unsubscribe();\n    });\n    return unsubscribe;\n};\nvar createSubscribeToQueryCacheBatcher = (callback, equalityCheck = true, shouldUpdate = ()=>true)=>{\n    const queryCache = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        const client = useQueryDevtoolsContext().client;\n        return client.getQueryCache();\n    });\n    const [value, setValue] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(callback(queryCache), !equalityCheck ? {\n        equals: false\n    } : void 0);\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        setValue(callback(queryCache));\n    });\n    queryCacheMap.set(callback, {\n        setter: setValue,\n        shouldUpdate\n    });\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n        queryCacheMap.delete(callback);\n    });\n    return value;\n};\nvar mutationCacheMap = /* @__PURE__ */ new Map();\nvar setupMutationCacheSubscription = ()=>{\n    const mutationCache = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        const client = useQueryDevtoolsContext().client;\n        return client.getMutationCache();\n    });\n    const unsubscribe = mutationCache().subscribe(()=>{\n        for (const [callback, setter] of mutationCacheMap.entries()){\n            queueMicrotask(()=>{\n                setter(callback(mutationCache));\n            });\n        }\n    });\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n        mutationCacheMap.clear();\n        unsubscribe();\n    });\n    return unsubscribe;\n};\nvar createSubscribeToMutationCacheBatcher = (callback, equalityCheck = true)=>{\n    const mutationCache = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        const client = useQueryDevtoolsContext().client;\n        return client.getMutationCache();\n    });\n    const [value, setValue] = (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(callback(mutationCache), !equalityCheck ? {\n        equals: false\n    } : void 0);\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        setValue(callback(mutationCache));\n    });\n    mutationCacheMap.set(callback, setValue);\n    (0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n        mutationCacheMap.delete(callback);\n    });\n    return value;\n};\nvar stylesFactory2 = (theme, css)=>{\n    const { colors, font, size: size3, alpha, shadow, border } = tokens;\n    const t2 = (light, dark)=>theme === \"light\" ? light : dark;\n    return {\n        devtoolsBtn: css`\n      z-index: 100000;\n      position: fixed;\n      padding: 4px;\n      text-align: left;\n\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: 9999px;\n      box-shadow: ${shadow.md()};\n      overflow: hidden;\n\n      & div {\n        position: absolute;\n        top: -8px;\n        left: -8px;\n        right: -8px;\n        bottom: -8px;\n        border-radius: 9999px;\n\n        & svg {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n        }\n        filter: blur(6px) saturate(1.2) contrast(1.1);\n      }\n\n      &:focus-within {\n        outline-offset: 2px;\n        outline: 3px solid ${colors.green[600]};\n      }\n\n      & button {\n        position: relative;\n        z-index: 1;\n        padding: 0;\n        border-radius: 9999px;\n        background-color: transparent;\n        border: none;\n        height: 40px;\n        display: flex;\n        width: 40px;\n        overflow: hidden;\n        cursor: pointer;\n        outline: none;\n        & svg {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n        }\n      }\n    `,\n        panel: css`\n      position: fixed;\n      z-index: 9999;\n      display: flex;\n      gap: ${tokens.size[0.5]};\n      & * {\n        box-sizing: border-box;\n        text-transform: none;\n      }\n\n      & *::-webkit-scrollbar {\n        width: 7px;\n      }\n\n      & *::-webkit-scrollbar-track {\n        background: transparent;\n      }\n\n      & *::-webkit-scrollbar-thumb {\n        background: ${t2(colors.gray[300], colors.darkGray[200])};\n      }\n\n      & *::-webkit-scrollbar-thumb:hover {\n        background: ${t2(colors.gray[400], colors.darkGray[300])};\n      }\n    `,\n        parentPanel: css`\n      z-index: 9999;\n      display: flex;\n      height: 100%;\n      gap: ${tokens.size[0.5]};\n      & * {\n        box-sizing: border-box;\n        text-transform: none;\n      }\n\n      & *::-webkit-scrollbar {\n        width: 7px;\n      }\n\n      & *::-webkit-scrollbar-track {\n        background: transparent;\n      }\n\n      & *::-webkit-scrollbar-thumb {\n        background: ${t2(colors.gray[300], colors.darkGray[200])};\n      }\n\n      & *::-webkit-scrollbar-thumb:hover {\n        background: ${t2(colors.gray[400], colors.darkGray[300])};\n      }\n    `,\n        \"devtoolsBtn-position-bottom-right\": css`\n      bottom: 12px;\n      right: 12px;\n    `,\n        \"devtoolsBtn-position-bottom-left\": css`\n      bottom: 12px;\n      left: 12px;\n    `,\n        \"devtoolsBtn-position-top-left\": css`\n      top: 12px;\n      left: 12px;\n    `,\n        \"devtoolsBtn-position-top-right\": css`\n      top: 12px;\n      right: 12px;\n    `,\n        \"devtoolsBtn-position-relative\": css`\n      position: relative;\n    `,\n        \"panel-position-top\": css`\n      top: 0;\n      right: 0;\n      left: 0;\n      max-height: 90%;\n      min-height: ${size3[14]};\n      border-bottom: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n    `,\n        \"panel-position-bottom\": css`\n      bottom: 0;\n      right: 0;\n      left: 0;\n      max-height: 90%;\n      min-height: ${size3[14]};\n      border-top: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n    `,\n        \"panel-position-right\": css`\n      bottom: 0;\n      right: 0;\n      top: 0;\n      border-left: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      max-width: 90%;\n    `,\n        \"panel-position-left\": css`\n      bottom: 0;\n      left: 0;\n      top: 0;\n      border-right: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      max-width: 90%;\n    `,\n        closeBtn: css`\n      position: absolute;\n      cursor: pointer;\n      z-index: 5;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      outline: none;\n      background-color: ${t2(colors.gray[50], colors.darkGray[700])};\n      &:hover {\n        background-color: ${t2(colors.gray[200], colors.darkGray[500])};\n      }\n      &:focus-visible {\n        outline: 2px solid ${colors.blue[600]};\n      }\n      & svg {\n        color: ${t2(colors.gray[600], colors.gray[400])};\n        width: ${size3[2]};\n        height: ${size3[2]};\n      }\n    `,\n        \"closeBtn-position-top\": css`\n      bottom: 0;\n      right: ${size3[2]};\n      transform: translate(0, 100%);\n      border-right: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      border-left: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      border-top: none;\n      border-bottom: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      border-radius: 0px 0px ${border.radius.sm} ${border.radius.sm};\n      padding: ${size3[0.5]} ${size3[1.5]} ${size3[1]} ${size3[1.5]};\n\n      &::after {\n        content: ' ';\n        position: absolute;\n        bottom: 100%;\n        left: -${size3[2.5]};\n        height: ${size3[1.5]};\n        width: calc(100% + ${size3[5]});\n      }\n\n      & svg {\n        transform: rotate(180deg);\n      }\n    `,\n        \"closeBtn-position-bottom\": css`\n      top: 0;\n      right: ${size3[2]};\n      transform: translate(0, -100%);\n      border-right: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      border-left: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      border-top: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      border-bottom: none;\n      border-radius: ${border.radius.sm} ${border.radius.sm} 0px 0px;\n      padding: ${size3[1]} ${size3[1.5]} ${size3[0.5]} ${size3[1.5]};\n\n      &::after {\n        content: ' ';\n        position: absolute;\n        top: 100%;\n        left: -${size3[2.5]};\n        height: ${size3[1.5]};\n        width: calc(100% + ${size3[5]});\n      }\n    `,\n        \"closeBtn-position-right\": css`\n      bottom: ${size3[2]};\n      left: 0;\n      transform: translate(-100%, 0);\n      border-right: none;\n      border-left: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      border-top: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      border-bottom: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      border-radius: ${border.radius.sm} 0px 0px ${border.radius.sm};\n      padding: ${size3[1.5]} ${size3[0.5]} ${size3[1.5]} ${size3[1]};\n\n      &::after {\n        content: ' ';\n        position: absolute;\n        left: 100%;\n        height: calc(100% + ${size3[5]});\n        width: ${size3[1.5]};\n      }\n\n      & svg {\n        transform: rotate(-90deg);\n      }\n    `,\n        \"closeBtn-position-left\": css`\n      bottom: ${size3[2]};\n      right: 0;\n      transform: translate(100%, 0);\n      border-left: none;\n      border-right: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      border-top: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      border-bottom: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      border-radius: 0px ${border.radius.sm} ${border.radius.sm} 0px;\n      padding: ${size3[1.5]} ${size3[1]} ${size3[1.5]} ${size3[0.5]};\n\n      &::after {\n        content: ' ';\n        position: absolute;\n        right: 100%;\n        height: calc(100% + ${size3[5]});\n        width: ${size3[1.5]};\n      }\n\n      & svg {\n        transform: rotate(90deg);\n      }\n    `,\n        queriesContainer: css`\n      flex: 1 1 700px;\n      background-color: ${t2(colors.gray[50], colors.darkGray[700])};\n      display: flex;\n      flex-direction: column;\n      & * {\n        font-family: ui-sans-serif, Inter, system-ui, sans-serif, sans-serif;\n      }\n    `,\n        dragHandle: css`\n      position: absolute;\n      transition: background-color 0.125s ease;\n      &:hover {\n        background-color: ${colors.purple[400]}${t2(\"\", alpha[90])};\n      }\n      z-index: 4;\n    `,\n        \"dragHandle-position-top\": css`\n      bottom: 0;\n      width: 100%;\n      height: 3px;\n      cursor: ns-resize;\n    `,\n        \"dragHandle-position-bottom\": css`\n      top: 0;\n      width: 100%;\n      height: 3px;\n      cursor: ns-resize;\n    `,\n        \"dragHandle-position-right\": css`\n      left: 0;\n      width: 3px;\n      height: 100%;\n      cursor: ew-resize;\n    `,\n        \"dragHandle-position-left\": css`\n      right: 0;\n      width: 3px;\n      height: 100%;\n      cursor: ew-resize;\n    `,\n        row: css`\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: ${tokens.size[2]} ${tokens.size[2.5]};\n      gap: ${tokens.size[2.5]};\n      border-bottom: ${t2(colors.gray[300], colors.darkGray[500])} 1px solid;\n      align-items: center;\n      & > button {\n        padding: 0;\n        background: transparent;\n        border: none;\n        display: flex;\n        gap: ${size3[0.5]};\n        flex-direction: column;\n      }\n    `,\n        logoAndToggleContainer: css`\n      display: flex;\n      gap: ${tokens.size[3]};\n      align-items: center;\n    `,\n        logo: css`\n      cursor: pointer;\n      display: flex;\n      flex-direction: column;\n      background-color: transparent;\n      border: none;\n      gap: ${tokens.size[0.5]};\n      padding: 0px;\n      &:hover {\n        opacity: 0.7;\n      }\n      &:focus-visible {\n        outline-offset: 4px;\n        border-radius: ${border.radius.xs};\n        outline: 2px solid ${colors.blue[800]};\n      }\n    `,\n        tanstackLogo: css`\n      font-size: ${font.size.md};\n      font-weight: ${font.weight.bold};\n      line-height: ${font.lineHeight.xs};\n      white-space: nowrap;\n      color: ${t2(colors.gray[600], colors.gray[300])};\n    `,\n        queryFlavorLogo: css`\n      font-weight: ${font.weight.semibold};\n      font-size: ${font.size.xs};\n      background: linear-gradient(\n        to right,\n        ${t2(\"#ea4037, #ff9b11\", \"#dd524b, #e9a03b\")}\n      );\n      background-clip: text;\n      -webkit-background-clip: text;\n      line-height: 1;\n      -webkit-text-fill-color: transparent;\n      white-space: nowrap;\n    `,\n        queryStatusContainer: css`\n      display: flex;\n      gap: ${tokens.size[2]};\n      height: min-content;\n    `,\n        queryStatusTag: css`\n      display: flex;\n      gap: ${tokens.size[1.5]};\n      box-sizing: border-box;\n      height: ${tokens.size[6.5]};\n      background: ${t2(colors.gray[50], colors.darkGray[500])};\n      color: ${t2(colors.gray[700], colors.gray[300])};\n      border-radius: ${tokens.border.radius.sm};\n      font-size: ${font.size.sm};\n      padding: ${tokens.size[1]};\n      padding-left: ${tokens.size[1.5]};\n      align-items: center;\n      font-weight: ${font.weight.medium};\n      border: ${t2(\"1px solid \" + colors.gray[300], \"1px solid transparent\")};\n      user-select: none;\n      position: relative;\n      &:focus-visible {\n        outline-offset: 2px;\n        outline: 2px solid ${colors.blue[800]};\n      }\n    `,\n        queryStatusTagLabel: css`\n      font-size: ${font.size.xs};\n    `,\n        queryStatusCount: css`\n      font-size: ${font.size.xs};\n      padding: 0 5px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      color: ${t2(colors.gray[500], colors.gray[400])};\n      background-color: ${t2(colors.gray[200], colors.darkGray[300])};\n      border-radius: 2px;\n      font-variant-numeric: tabular-nums;\n      height: ${tokens.size[4.5]};\n    `,\n        statusTooltip: css`\n      position: absolute;\n      z-index: 1;\n      background-color: ${t2(colors.gray[50], colors.darkGray[500])};\n      top: 100%;\n      left: 50%;\n      transform: translate(-50%, calc(${tokens.size[2]}));\n      padding: ${tokens.size[0.5]} ${tokens.size[2]};\n      border-radius: ${tokens.border.radius.sm};\n      font-size: ${font.size.xs};\n      border: 1px solid ${t2(colors.gray[400], colors.gray[600])};\n      color: ${t2(colors[\"gray\"][600], colors[\"gray\"][300])};\n\n      &::before {\n        top: 0px;\n        content: ' ';\n        display: block;\n        left: 50%;\n        transform: translate(-50%, -100%);\n        position: absolute;\n        border-color: transparent transparent\n          ${t2(colors.gray[400], colors.gray[600])} transparent;\n        border-style: solid;\n        border-width: 7px;\n        /* transform: rotate(180deg); */\n      }\n\n      &::after {\n        top: 0px;\n        content: ' ';\n        display: block;\n        left: 50%;\n        transform: translate(-50%, calc(-100% + 2px));\n        position: absolute;\n        border-color: transparent transparent\n          ${t2(colors.gray[100], colors.darkGray[500])} transparent;\n        border-style: solid;\n        border-width: 7px;\n      }\n    `,\n        filtersContainer: css`\n      display: flex;\n      gap: ${tokens.size[2]};\n      & > button {\n        cursor: pointer;\n        padding: ${tokens.size[0.5]} ${tokens.size[1.5]} ${tokens.size[0.5]}\n          ${tokens.size[2]};\n        border-radius: ${tokens.border.radius.sm};\n        background-color: ${t2(colors.gray[100], colors.darkGray[400])};\n        border: 1px solid ${t2(colors.gray[300], colors.darkGray[200])};\n        color: ${t2(colors.gray[700], colors.gray[300])};\n        font-size: ${font.size.xs};\n        display: flex;\n        align-items: center;\n        line-height: ${font.lineHeight.sm};\n        gap: ${tokens.size[1.5]};\n        max-width: 160px;\n        &:focus-visible {\n          outline-offset: 2px;\n          border-radius: ${border.radius.xs};\n          outline: 2px solid ${colors.blue[800]};\n        }\n        & svg {\n          width: ${tokens.size[3]};\n          height: ${tokens.size[3]};\n          color: ${t2(colors.gray[500], colors.gray[400])};\n        }\n      }\n    `,\n        filterInput: css`\n      padding: ${size3[0.5]} ${size3[2]};\n      border-radius: ${tokens.border.radius.sm};\n      background-color: ${t2(colors.gray[100], colors.darkGray[400])};\n      display: flex;\n      box-sizing: content-box;\n      align-items: center;\n      gap: ${tokens.size[1.5]};\n      max-width: 160px;\n      min-width: 100px;\n      border: 1px solid ${t2(colors.gray[300], colors.darkGray[200])};\n      height: min-content;\n      color: ${t2(colors.gray[600], colors.gray[400])};\n      & > svg {\n        width: ${size3[3]};\n        height: ${size3[3]};\n      }\n      & input {\n        font-size: ${font.size.xs};\n        width: 100%;\n        background-color: ${t2(colors.gray[100], colors.darkGray[400])};\n        border: none;\n        padding: 0;\n        line-height: ${font.lineHeight.sm};\n        color: ${t2(colors.gray[700], colors.gray[300])};\n        &::placeholder {\n          color: ${t2(colors.gray[700], colors.gray[300])};\n        }\n        &:focus {\n          outline: none;\n        }\n      }\n\n      &:focus-within {\n        outline-offset: 2px;\n        border-radius: ${border.radius.xs};\n        outline: 2px solid ${colors.blue[800]};\n      }\n    `,\n        filterSelect: css`\n      padding: ${tokens.size[0.5]} ${tokens.size[2]};\n      border-radius: ${tokens.border.radius.sm};\n      background-color: ${t2(colors.gray[100], colors.darkGray[400])};\n      display: flex;\n      align-items: center;\n      gap: ${tokens.size[1.5]};\n      box-sizing: content-box;\n      max-width: 160px;\n      border: 1px solid ${t2(colors.gray[300], colors.darkGray[200])};\n      height: min-content;\n      & > svg {\n        color: ${t2(colors.gray[600], colors.gray[400])};\n        width: ${tokens.size[2]};\n        height: ${tokens.size[2]};\n      }\n      & > select {\n        appearance: none;\n        color: ${t2(colors.gray[700], colors.gray[300])};\n        min-width: 100px;\n        line-height: ${font.lineHeight.sm};\n        font-size: ${font.size.xs};\n        background-color: ${t2(colors.gray[100], colors.darkGray[400])};\n        border: none;\n        &:focus {\n          outline: none;\n        }\n      }\n      &:focus-within {\n        outline-offset: 2px;\n        border-radius: ${border.radius.xs};\n        outline: 2px solid ${colors.blue[800]};\n      }\n    `,\n        actionsContainer: css`\n      display: flex;\n      gap: ${tokens.size[2]};\n    `,\n        actionsBtn: css`\n      border-radius: ${tokens.border.radius.sm};\n      background-color: ${t2(colors.gray[100], colors.darkGray[400])};\n      border: 1px solid ${t2(colors.gray[300], colors.darkGray[200])};\n      width: ${tokens.size[6.5]};\n      height: ${tokens.size[6.5]};\n      justify-content: center;\n      display: flex;\n      align-items: center;\n      gap: ${tokens.size[1.5]};\n      max-width: 160px;\n      cursor: pointer;\n      padding: 0;\n      &:hover {\n        background-color: ${t2(colors.gray[200], colors.darkGray[500])};\n      }\n      & svg {\n        color: ${t2(colors.gray[700], colors.gray[300])};\n        width: ${tokens.size[3]};\n        height: ${tokens.size[3]};\n      }\n      &:focus-visible {\n        outline-offset: 2px;\n        border-radius: ${border.radius.xs};\n        outline: 2px solid ${colors.blue[800]};\n      }\n    `,\n        actionsBtnOffline: css`\n      & svg {\n        stroke: ${t2(colors.yellow[700], colors.yellow[500])};\n        fill: ${t2(colors.yellow[700], colors.yellow[500])};\n      }\n    `,\n        overflowQueryContainer: css`\n      flex: 1;\n      overflow-y: auto;\n      & > div {\n        display: flex;\n        flex-direction: column;\n      }\n    `,\n        queryRow: css`\n      display: flex;\n      align-items: center;\n      padding: 0;\n      border: none;\n      cursor: pointer;\n      color: ${t2(colors.gray[700], colors.gray[300])};\n      background-color: ${t2(colors.gray[50], colors.darkGray[700])};\n      line-height: 1;\n      &:focus {\n        outline: none;\n      }\n      &:focus-visible {\n        outline-offset: -2px;\n        border-radius: ${border.radius.xs};\n        outline: 2px solid ${colors.blue[800]};\n      }\n      &:hover .tsqd-query-hash {\n        background-color: ${t2(colors.gray[200], colors.darkGray[600])};\n      }\n\n      & .tsqd-query-observer-count {\n        padding: 0 ${tokens.size[1]};\n        user-select: none;\n        min-width: ${tokens.size[6.5]};\n        align-self: stretch;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        font-size: ${font.size.xs};\n        font-weight: ${font.weight.medium};\n        border-bottom-width: 1px;\n        border-bottom-style: solid;\n        border-bottom: 1px solid ${t2(colors.gray[300], colors.darkGray[700])};\n      }\n      & .tsqd-query-hash {\n        user-select: text;\n        font-size: ${font.size.xs};\n        display: flex;\n        align-items: center;\n        min-height: ${tokens.size[6]};\n        flex: 1;\n        padding: ${tokens.size[1]} ${tokens.size[2]};\n        font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,\n          'Liberation Mono', 'Courier New', monospace;\n        border-bottom: 1px solid ${t2(colors.gray[300], colors.darkGray[400])};\n        text-align: left;\n        text-overflow: clip;\n        word-break: break-word;\n      }\n\n      & .tsqd-query-disabled-indicator {\n        align-self: stretch;\n        display: flex;\n        align-items: center;\n        padding: 0 ${tokens.size[2]};\n        color: ${t2(colors.gray[800], colors.gray[300])};\n        background-color: ${t2(colors.gray[300], colors.darkGray[600])};\n        border-bottom: 1px solid ${t2(colors.gray[300], colors.darkGray[400])};\n        font-size: ${font.size.xs};\n      }\n    `,\n        selectedQueryRow: css`\n      background-color: ${t2(colors.gray[200], colors.darkGray[500])};\n    `,\n        detailsContainer: css`\n      flex: 1 1 700px;\n      background-color: ${t2(colors.gray[50], colors.darkGray[700])};\n      color: ${t2(colors.gray[700], colors.gray[300])};\n      font-family: ui-sans-serif, Inter, system-ui, sans-serif, sans-serif;\n      display: flex;\n      flex-direction: column;\n      overflow-y: auto;\n      display: flex;\n      text-align: left;\n    `,\n        detailsHeader: css`\n      font-family: ui-sans-serif, Inter, system-ui, sans-serif, sans-serif;\n      position: sticky;\n      top: 0;\n      z-index: 2;\n      background-color: ${t2(colors.gray[200], colors.darkGray[600])};\n      padding: ${tokens.size[1.5]} ${tokens.size[2]};\n      font-weight: ${font.weight.medium};\n      font-size: ${font.size.xs};\n      line-height: ${font.lineHeight.xs};\n      text-align: left;\n    `,\n        detailsBody: css`\n      margin: ${tokens.size[1.5]} 0px ${tokens.size[2]} 0px;\n      & > div {\n        display: flex;\n        align-items: stretch;\n        padding: 0 ${tokens.size[2]};\n        line-height: ${font.lineHeight.sm};\n        justify-content: space-between;\n        & > span {\n          font-size: ${font.size.xs};\n        }\n        & > span:nth-child(2) {\n          font-variant-numeric: tabular-nums;\n        }\n      }\n\n      & > div:first-child {\n        margin-bottom: ${tokens.size[1.5]};\n      }\n\n      & code {\n        font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,\n          'Liberation Mono', 'Courier New', monospace;\n        margin: 0;\n        font-size: ${font.size.xs};\n        line-height: ${font.lineHeight.xs};\n      }\n\n      & pre {\n        margin: 0;\n        display: flex;\n        align-items: center;\n      }\n    `,\n        queryDetailsStatus: css`\n      border: 1px solid ${colors.darkGray[200]};\n      border-radius: ${tokens.border.radius.sm};\n      font-weight: ${font.weight.medium};\n      padding: ${tokens.size[1]} ${tokens.size[2.5]};\n    `,\n        actionsBody: css`\n      flex-wrap: wrap;\n      margin: ${tokens.size[2]} 0px ${tokens.size[2]} 0px;\n      display: flex;\n      gap: ${tokens.size[2]};\n      padding: 0px ${tokens.size[2]};\n      & > button {\n        font-family: ui-sans-serif, Inter, system-ui, sans-serif, sans-serif;\n        font-size: ${font.size.xs};\n        padding: ${tokens.size[1]} ${tokens.size[2]};\n        display: flex;\n        border-radius: ${tokens.border.radius.sm};\n        background-color: ${t2(colors.gray[100], colors.darkGray[600])};\n        border: 1px solid ${t2(colors.gray[300], colors.darkGray[400])};\n        align-items: center;\n        gap: ${tokens.size[2]};\n        font-weight: ${font.weight.medium};\n        line-height: ${font.lineHeight.xs};\n        cursor: pointer;\n        &:focus-visible {\n          outline-offset: 2px;\n          border-radius: ${border.radius.xs};\n          outline: 2px solid ${colors.blue[800]};\n        }\n        &:hover {\n          background-color: ${t2(colors.gray[200], colors.darkGray[500])};\n        }\n\n        &:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n\n        & > span {\n          width: ${size3[1.5]};\n          height: ${size3[1.5]};\n          border-radius: ${tokens.border.radius.full};\n        }\n      }\n    `,\n        actionsSelect: css`\n      font-size: ${font.size.xs};\n      padding: ${tokens.size[0.5]} ${tokens.size[2]};\n      display: flex;\n      border-radius: ${tokens.border.radius.sm};\n      overflow: hidden;\n      background-color: ${t2(colors.gray[100], colors.darkGray[600])};\n      border: 1px solid ${t2(colors.gray[300], colors.darkGray[400])};\n      align-items: center;\n      gap: ${tokens.size[2]};\n      font-weight: ${font.weight.medium};\n      line-height: ${font.lineHeight.sm};\n      color: ${t2(colors.red[500], colors.red[400])};\n      cursor: pointer;\n      position: relative;\n      &:hover {\n        background-color: ${t2(colors.gray[200], colors.darkGray[500])};\n      }\n      & > span {\n        width: ${size3[1.5]};\n        height: ${size3[1.5]};\n        border-radius: ${tokens.border.radius.full};\n      }\n      &:focus-within {\n        outline-offset: 2px;\n        border-radius: ${border.radius.xs};\n        outline: 2px solid ${colors.blue[800]};\n      }\n      & select {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        appearance: none;\n        background-color: transparent;\n        border: none;\n        color: transparent;\n        outline: none;\n      }\n\n      & svg path {\n        stroke: ${tokens.colors.red[400]};\n      }\n      & svg {\n        width: ${tokens.size[2]};\n        height: ${tokens.size[2]};\n      }\n    `,\n        settingsMenu: css`\n      display: flex;\n      & * {\n        font-family: ui-sans-serif, Inter, system-ui, sans-serif, sans-serif;\n      }\n      flex-direction: column;\n      gap: ${size3[0.5]};\n      border-radius: ${tokens.border.radius.sm};\n      border: 1px solid ${t2(colors.gray[300], colors.gray[700])};\n      background-color: ${t2(colors.gray[50], colors.darkGray[600])};\n      font-size: ${font.size.xs};\n      color: ${t2(colors.gray[700], colors.gray[300])};\n      z-index: 99999;\n      min-width: 120px;\n      padding: ${size3[0.5]};\n    `,\n        settingsSubTrigger: css`\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      border-radius: ${tokens.border.radius.xs};\n      padding: ${tokens.size[1]} ${tokens.size[1]};\n      cursor: pointer;\n      background-color: transparent;\n      border: none;\n      color: ${t2(colors.gray[700], colors.gray[300])};\n      & svg {\n        color: ${t2(colors.gray[600], colors.gray[400])};\n        transform: rotate(-90deg);\n        width: ${tokens.size[2]};\n        height: ${tokens.size[2]};\n      }\n      &:hover {\n        background-color: ${t2(colors.gray[200], colors.darkGray[500])};\n      }\n      &:focus-visible {\n        outline-offset: 2px;\n        outline: 2px solid ${colors.blue[800]};\n      }\n      &.data-disabled {\n        opacity: 0.6;\n        cursor: not-allowed;\n      }\n    `,\n        settingsMenuHeader: css`\n      padding: ${tokens.size[1]} ${tokens.size[1]};\n      font-weight: ${font.weight.medium};\n      border-bottom: 1px solid ${t2(colors.gray[300], colors.darkGray[400])};\n      color: ${t2(colors.gray[500], colors.gray[400])};\n      font-size: ${font.size[\"xs\"]};\n    `,\n        settingsSubButton: css`\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      color: ${t2(colors.gray[700], colors.gray[300])};\n      font-size: ${font.size[\"xs\"]};\n      border-radius: ${tokens.border.radius.xs};\n      padding: ${tokens.size[1]} ${tokens.size[1]};\n      cursor: pointer;\n      background-color: transparent;\n      border: none;\n      & svg {\n        color: ${t2(colors.gray[600], colors.gray[400])};\n      }\n      &:hover {\n        background-color: ${t2(colors.gray[200], colors.darkGray[500])};\n      }\n      &:focus-visible {\n        outline-offset: 2px;\n        outline: 2px solid ${colors.blue[800]};\n      }\n    `,\n        themeSelectedButton: css`\n      background-color: ${t2(colors.purple[100], colors.purple[900])};\n      color: ${t2(colors.purple[700], colors.purple[300])};\n      & svg {\n        color: ${t2(colors.purple[700], colors.purple[300])};\n      }\n      &:hover {\n        background-color: ${t2(colors.purple[100], colors.purple[900])};\n      }\n    `,\n        viewToggle: css`\n      border-radius: ${tokens.border.radius.sm};\n      background-color: ${t2(colors.gray[200], colors.darkGray[600])};\n      border: 1px solid ${t2(colors.gray[300], colors.darkGray[200])};\n      display: flex;\n      padding: 0;\n      font-size: ${font.size.xs};\n      color: ${t2(colors.gray[700], colors.gray[300])};\n      overflow: hidden;\n\n      &:has(:focus-visible) {\n        outline: 2px solid ${colors.blue[800]};\n      }\n\n      & .tsqd-radio-toggle {\n        opacity: 0.5;\n        display: flex;\n        & label {\n          display: flex;\n          align-items: center;\n          cursor: pointer;\n          line-height: ${font.lineHeight.md};\n        }\n\n        & label:hover {\n          background-color: ${t2(colors.gray[100], colors.darkGray[500])};\n        }\n      }\n\n      & > [data-checked] {\n        opacity: 1;\n        background-color: ${t2(colors.gray[100], colors.darkGray[400])};\n        & label:hover {\n          background-color: ${t2(colors.gray[100], colors.darkGray[400])};\n        }\n      }\n\n      & .tsqd-radio-toggle:first-child {\n        & label {\n          padding: 0 ${tokens.size[1.5]} 0 ${tokens.size[2]};\n        }\n        border-right: 1px solid ${t2(colors.gray[300], colors.darkGray[200])};\n      }\n\n      & .tsqd-radio-toggle:nth-child(2) {\n        & label {\n          padding: 0 ${tokens.size[2]} 0 ${tokens.size[1.5]};\n        }\n      }\n    `,\n        devtoolsEditForm: css`\n      padding: ${size3[2]};\n      & > [data-error='true'] {\n        outline: 2px solid ${t2(colors.red[200], colors.red[800])};\n        outline-offset: 2px;\n        border-radius: ${border.radius.xs};\n      }\n    `,\n        devtoolsEditTextarea: css`\n      width: 100%;\n      max-height: 500px;\n      font-family: 'Fira Code', monospace;\n      font-size: ${font.size.xs};\n      border-radius: ${border.radius.sm};\n      field-sizing: content;\n      padding: ${size3[2]};\n      background-color: ${t2(colors.gray[100], colors.darkGray[800])};\n      color: ${t2(colors.gray[900], colors.gray[100])};\n      border: 1px solid ${t2(colors.gray[200], colors.gray[700])};\n      resize: none;\n      &:focus {\n        outline-offset: 2px;\n        border-radius: ${border.radius.xs};\n        outline: 2px solid ${t2(colors.blue[200], colors.blue[800])};\n      }\n    `,\n        devtoolsEditFormActions: css`\n      display: flex;\n      justify-content: space-between;\n      gap: ${size3[2]};\n      align-items: center;\n      padding-top: ${size3[1]};\n      font-size: ${font.size.xs};\n    `,\n        devtoolsEditFormError: css`\n      color: ${t2(colors.red[700], colors.red[500])};\n    `,\n        devtoolsEditFormActionContainer: css`\n      display: flex;\n      gap: ${size3[2]};\n    `,\n        devtoolsEditFormAction: css`\n      font-family: ui-sans-serif, Inter, system-ui, sans-serif, sans-serif;\n      font-size: ${font.size.xs};\n      padding: ${size3[1]} ${tokens.size[2]};\n      display: flex;\n      border-radius: ${border.radius.sm};\n      background-color: ${t2(colors.gray[100], colors.darkGray[600])};\n      border: 1px solid ${t2(colors.gray[300], colors.darkGray[400])};\n      align-items: center;\n      gap: ${size3[2]};\n      font-weight: ${font.weight.medium};\n      line-height: ${font.lineHeight.xs};\n      cursor: pointer;\n      &:focus-visible {\n        outline-offset: 2px;\n        border-radius: ${border.radius.xs};\n        outline: 2px solid ${colors.blue[800]};\n      }\n      &:hover {\n        background-color: ${t2(colors.gray[200], colors.darkGray[500])};\n      }\n\n      &:disabled {\n        opacity: 0.6;\n        cursor: not-allowed;\n      }\n    `\n    };\n};\nvar lightStyles2 = (css)=>stylesFactory2(\"light\", css);\nvar darkStyles2 = (css)=>stylesFactory2(\"dark\", css);\n(0,_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.delegateEvents)([\n    \"click\",\n    \"mousedown\",\n    \"input\"\n]);\n/*! Bundled license information:\n\n@tanstack/match-sorter-utils/build/lib/index.mjs:\n  (**\n     * match-sorter-utils\n     *\n     * Copyright (c) TanStack\n     *\n     * This source code is licensed under the MIT license found in the\n     * LICENSE.md file in the root directory of this source tree.\n     *\n     * @license MIT\n     *)\n  (**\n   * @name match-sorter\n   * @license MIT license.\n   * @copyright (c) 2099 Kent C. Dodds\n   * @author Kent C. Dodds <me@kentcdodds.com> (https://kentcdodds.com)\n   *)\n\n@kobalte/utils/dist/index.js:\n  (*!\n   * Portions of this file are based on code from ariakit.\n   * MIT Licensed, Copyright (c) Diego Haz.\n   *\n   * Credits to the Ariakit team:\n   * https://github.com/ariakit/ariakit/blob/da142672eddefa99365773ced72171facc06fdcb/packages/ariakit-utils/src/array.ts\n   *)\n  (*!\n   * Original code by Chakra UI\n   * MIT Licensed, Copyright (c) 2019 Segun Adebayo.\n   *\n   * Credits to the Chakra UI team:\n   * https://github.com/chakra-ui/chakra-ui/blob/main/packages/utils/src/assertion.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/solidjs-community/solid-aria/blob/2c5f54feb5cfea514b1ee0a52d0416878f882351/packages/utils/src/createGlobalListeners.ts\n   *)\n  (*!\n   * Portions of this file are based on code from ariakit.\n   * MIT Licensed, Copyright (c) Diego Haz.\n   *\n   * Credits to the Ariakit team:\n   * https://github.com/ariakit/ariakit/blob/232bc79018ec20967fec1e097a9474aba3bb5be7/packages/ariakit-utils/src/dom.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/cf9ab24f3255be1530d0f584061a01aa1e8180e6/packages/@react-aria/utils/src/platform.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/a9dea8a3672179e6c38aafd1429daf44c7ea2ff6/packages/@react-aria/utils/src/focusWithoutScrolling.ts\n   *)\n  (*!\n   * Portions of this file are based on code from ariakit.\n   * MIT Licensed, Copyright (c) Diego Haz.\n   *\n   * Credits to the Ariakit team:\n   * https://github.com/ariakit/ariakit/blob/main/packages/ariakit-utils/src/focus.ts\n   *\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/main/packages/%40react-aria/focus/src/isElementVisible.ts\n   * https://github.com/adobe/react-spectrum/blob/8f2f2acb3d5850382ebe631f055f88c704aa7d17/packages/@react-aria/focus/src/FocusScope.tsx\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/f6e686fe9d3b983d48650980c1ecfdde320bc62f/packages/@react-aria/focus/src/FocusScope.tsx\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/a9dea8a3672179e6c38aafd1429daf44c7ea2ff6/packages/@react-aria/utils/src/getScrollParent.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/a9dea8a3672179e6c38aafd1429daf44c7ea2ff6/packages/@react-aria/utils/src/isVirtualEvent.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/ff3e690fffc6c54367b8057e28a0e5b9211f37b5/packages/@react-stately/utils/src/number.ts\n   *)\n  (*!\n   * Portions of this file are based on code from ariakit.\n   * MIT Licensed, Copyright (c) Diego Haz.\n   *\n   * Credits to the Ariakit team:\n   * https://github.com/ariakit/ariakit/blob/84e97943ad637a582c01c9b56d880cd95f595737/packages/ariakit/src/hovercard/__utils/polygon.ts\n   * https://github.com/ariakit/ariakit/blob/f2a96973de523d67e41eec983263936c489ef3e2/packages/ariakit/src/hovercard/__utils/debug-polygon.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/a9dea8a3672179e6c38aafd1429daf44c7ea2ff6/packages/@react-aria/utils/src/runAfterTransition.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/8f2f2acb3d5850382ebe631f055f88c704aa7d17/packages/@react-aria/utils/src/scrollIntoView.ts\n   *)\n*/ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-devtools/build/chunk/DZBXNQB4.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-devtools/build/chunk/V5T5VJKG.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tanstack/query-devtools/build/chunk/V5T5VJKG.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $TRACK: () => (/* binding */ $TRACK),\n/* harmony export */   DEV: () => (/* binding */ DEV),\n/* harmony export */   Dynamic: () => (/* binding */ Dynamic),\n/* harmony export */   For: () => (/* binding */ For),\n/* harmony export */   Index: () => (/* binding */ Index),\n/* harmony export */   Match: () => (/* binding */ Match),\n/* harmony export */   Portal: () => (/* binding */ Portal),\n/* harmony export */   Show: () => (/* binding */ Show),\n/* harmony export */   Switch: () => (/* binding */ Switch),\n/* harmony export */   addEventListener: () => (/* binding */ addEventListener),\n/* harmony export */   batch: () => (/* binding */ batch),\n/* harmony export */   className: () => (/* binding */ className),\n/* harmony export */   clearDelegatedEvents: () => (/* binding */ clearDelegatedEvents),\n/* harmony export */   convertRemToPixels: () => (/* binding */ convertRemToPixels),\n/* harmony export */   createComponent: () => (/* binding */ createComponent),\n/* harmony export */   createComputed: () => (/* binding */ createComputed),\n/* harmony export */   createContext: () => (/* binding */ createContext),\n/* harmony export */   createEffect: () => (/* binding */ createEffect),\n/* harmony export */   createMemo: () => (/* binding */ createMemo),\n/* harmony export */   createRenderEffect: () => (/* binding */ createRenderEffect),\n/* harmony export */   createRoot: () => (/* binding */ createRoot),\n/* harmony export */   createSignal: () => (/* binding */ createSignal),\n/* harmony export */   createUniqueId: () => (/* binding */ createUniqueId),\n/* harmony export */   delegateEvents: () => (/* binding */ delegateEvents),\n/* harmony export */   deleteNestedDataByPath: () => (/* binding */ deleteNestedDataByPath),\n/* harmony export */   displayValue: () => (/* binding */ displayValue),\n/* harmony export */   getMutationStatusColor: () => (/* binding */ getMutationStatusColor),\n/* harmony export */   getOwner: () => (/* binding */ getOwner),\n/* harmony export */   getPreferredColorScheme: () => (/* binding */ getPreferredColorScheme),\n/* harmony export */   getQueryStatusColor: () => (/* binding */ getQueryStatusColor),\n/* harmony export */   getQueryStatusColorByLabel: () => (/* binding */ getQueryStatusColorByLabel),\n/* harmony export */   getQueryStatusLabel: () => (/* binding */ getQueryStatusLabel),\n/* harmony export */   getSidedProp: () => (/* binding */ getSidedProp),\n/* harmony export */   insert: () => (/* binding */ insert),\n/* harmony export */   isServer: () => (/* binding */ isServer),\n/* harmony export */   lazy: () => (/* binding */ lazy),\n/* harmony export */   mergeProps: () => (/* binding */ mergeProps),\n/* harmony export */   mutationSortFns: () => (/* binding */ mutationSortFns),\n/* harmony export */   on: () => (/* binding */ on),\n/* harmony export */   onCleanup: () => (/* binding */ onCleanup),\n/* harmony export */   onMount: () => (/* binding */ onMount),\n/* harmony export */   render: () => (/* binding */ render),\n/* harmony export */   serialize: () => (/* binding */ serialize),\n/* harmony export */   setAttribute: () => (/* binding */ setAttribute),\n/* harmony export */   setupStyleSheet: () => (/* binding */ setupStyleSheet),\n/* harmony export */   sortFns: () => (/* binding */ sortFns),\n/* harmony export */   splitProps: () => (/* binding */ splitProps),\n/* harmony export */   spread: () => (/* binding */ spread),\n/* harmony export */   stringify: () => (/* binding */ stringify),\n/* harmony export */   template: () => (/* binding */ template),\n/* harmony export */   untrack: () => (/* binding */ untrack),\n/* harmony export */   updateNestedDataByPath: () => (/* binding */ updateNestedDataByPath),\n/* harmony export */   use: () => (/* binding */ use),\n/* harmony export */   useContext: () => (/* binding */ useContext),\n/* harmony export */   useTransition: () => (/* binding */ useTransition)\n/* harmony export */ });\n// ../../node_modules/.pnpm/solid-js@1.9.5/node_modules/solid-js/dist/solid.js\nvar sharedConfig = {\n    context: void 0,\n    registry: void 0,\n    effects: void 0,\n    done: false,\n    getContextId () {\n        return getContextId(this.context.count);\n    },\n    getNextContextId () {\n        return getContextId(this.context.count++);\n    }\n};\nfunction getContextId(count) {\n    const num = String(count), len = num.length - 1;\n    return sharedConfig.context.id + (len ? String.fromCharCode(96 + len) : \"\") + num;\n}\nfunction setHydrateContext(context) {\n    sharedConfig.context = context;\n}\nfunction nextHydrateContext() {\n    return {\n        ...sharedConfig.context,\n        id: sharedConfig.getNextContextId(),\n        count: 0\n    };\n}\nvar IS_DEV = false;\nvar equalFn = (a, b)=>a === b;\nvar $PROXY = Symbol(\"solid-proxy\");\nvar SUPPORTS_PROXY = typeof Proxy === \"function\";\nvar $TRACK = Symbol(\"solid-track\");\nvar signalOptions = {\n    equals: equalFn\n};\nvar ERROR = null;\nvar runEffects = runQueue;\nvar STALE = 1;\nvar PENDING = 2;\nvar UNOWNED = {\n    owned: null,\n    cleanups: null,\n    context: null,\n    owner: null\n};\nvar NO_INIT = {};\nvar Owner = null;\nvar Transition = null;\nvar Scheduler = null;\nvar ExternalSourceConfig = null;\nvar Listener = null;\nvar Updates = null;\nvar Effects = null;\nvar ExecCount = 0;\nfunction createRoot(fn, detachedOwner) {\n    const listener = Listener, owner = Owner, unowned = fn.length === 0, current = detachedOwner === void 0 ? owner : detachedOwner, root = unowned ? UNOWNED : {\n        owned: null,\n        cleanups: null,\n        context: current ? current.context : null,\n        owner: current\n    }, updateFn = unowned ? fn : ()=>fn(()=>untrack(()=>cleanNode(root)));\n    Owner = root;\n    Listener = null;\n    try {\n        return runUpdates(updateFn, true);\n    } finally{\n        Listener = listener;\n        Owner = owner;\n    }\n}\nfunction createSignal(value, options) {\n    options = options ? Object.assign({}, signalOptions, options) : signalOptions;\n    const s = {\n        value,\n        observers: null,\n        observerSlots: null,\n        comparator: options.equals || void 0\n    };\n    const setter = (value2)=>{\n        if (typeof value2 === \"function\") {\n            if (Transition && Transition.running && Transition.sources.has(s)) value2 = value2(s.tValue);\n            else value2 = value2(s.value);\n        }\n        return writeSignal(s, value2);\n    };\n    return [\n        readSignal.bind(s),\n        setter\n    ];\n}\nfunction createComputed(fn, value, options) {\n    const c = createComputation(fn, value, true, STALE);\n    if (Scheduler && Transition && Transition.running) Updates.push(c);\n    else updateComputation(c);\n}\nfunction createRenderEffect(fn, value, options) {\n    const c = createComputation(fn, value, false, STALE);\n    if (Scheduler && Transition && Transition.running) Updates.push(c);\n    else updateComputation(c);\n}\nfunction createEffect(fn, value, options) {\n    runEffects = runUserEffects;\n    const c = createComputation(fn, value, false, STALE), s = SuspenseContext && useContext(SuspenseContext);\n    if (s) c.suspense = s;\n    if (!options || !options.render) c.user = true;\n    Effects ? Effects.push(c) : updateComputation(c);\n}\nfunction createMemo(fn, value, options) {\n    options = options ? Object.assign({}, signalOptions, options) : signalOptions;\n    const c = createComputation(fn, value, true, 0);\n    c.observers = null;\n    c.observerSlots = null;\n    c.comparator = options.equals || void 0;\n    if (Scheduler && Transition && Transition.running) {\n        c.tState = STALE;\n        Updates.push(c);\n    } else updateComputation(c);\n    return readSignal.bind(c);\n}\nfunction isPromise(v) {\n    return v && typeof v === \"object\" && \"then\" in v;\n}\nfunction createResource(pSource, pFetcher, pOptions) {\n    let source;\n    let fetcher;\n    let options;\n    {\n        source = true;\n        fetcher = pSource;\n        options = {};\n    }\n    let pr = null, initP = NO_INIT, id = null, loadedUnderTransition = false, scheduled = false, resolved = \"initialValue\" in options, dynamic = typeof source === \"function\" && createMemo(source);\n    const contexts = /* @__PURE__ */ new Set(), [value, setValue] = (options.storage || createSignal)(options.initialValue), [error, setError] = createSignal(void 0), [track, trigger] = createSignal(void 0, {\n        equals: false\n    }), [state, setState] = createSignal(resolved ? \"ready\" : \"unresolved\");\n    if (sharedConfig.context) {\n        id = sharedConfig.getNextContextId();\n        if (options.ssrLoadFrom === \"initial\") initP = options.initialValue;\n        else if (sharedConfig.load && sharedConfig.has(id)) initP = sharedConfig.load(id);\n    }\n    function loadEnd(p, v, error2, key) {\n        if (pr === p) {\n            pr = null;\n            key !== void 0 && (resolved = true);\n            if ((p === initP || v === initP) && options.onHydrated) queueMicrotask(()=>options.onHydrated(key, {\n                    value: v\n                }));\n            initP = NO_INIT;\n            if (Transition && p && loadedUnderTransition) {\n                Transition.promises.delete(p);\n                loadedUnderTransition = false;\n                runUpdates(()=>{\n                    Transition.running = true;\n                    completeLoad(v, error2);\n                }, false);\n            } else completeLoad(v, error2);\n        }\n        return v;\n    }\n    function completeLoad(v, err) {\n        runUpdates(()=>{\n            if (err === void 0) setValue(()=>v);\n            setState(err !== void 0 ? \"errored\" : resolved ? \"ready\" : \"unresolved\");\n            setError(err);\n            for (const c of contexts.keys())c.decrement();\n            contexts.clear();\n        }, false);\n    }\n    function read() {\n        const c = SuspenseContext && useContext(SuspenseContext), v = value(), err = error();\n        if (err !== void 0 && !pr) throw err;\n        if (Listener && !Listener.user && c) {\n            createComputed(()=>{\n                track();\n                if (pr) {\n                    if (c.resolved && Transition && loadedUnderTransition) Transition.promises.add(pr);\n                    else if (!contexts.has(c)) {\n                        c.increment();\n                        contexts.add(c);\n                    }\n                }\n            });\n        }\n        return v;\n    }\n    function load(refetching = true) {\n        if (refetching !== false && scheduled) return;\n        scheduled = false;\n        const lookup = dynamic ? dynamic() : source;\n        loadedUnderTransition = Transition && Transition.running;\n        if (lookup == null || lookup === false) {\n            loadEnd(pr, untrack(value));\n            return;\n        }\n        if (Transition && pr) Transition.promises.delete(pr);\n        const p = initP !== NO_INIT ? initP : untrack(()=>fetcher(lookup, {\n                value: value(),\n                refetching\n            }));\n        if (!isPromise(p)) {\n            loadEnd(pr, p, void 0, lookup);\n            return p;\n        }\n        pr = p;\n        if (\"value\" in p) {\n            if (p.status === \"success\") loadEnd(pr, p.value, void 0, lookup);\n            else loadEnd(pr, void 0, castError(p.value), lookup);\n            return p;\n        }\n        scheduled = true;\n        queueMicrotask(()=>scheduled = false);\n        runUpdates(()=>{\n            setState(resolved ? \"refreshing\" : \"pending\");\n            trigger();\n        }, false);\n        return p.then((v)=>loadEnd(p, v, void 0, lookup), (e)=>loadEnd(p, void 0, castError(e), lookup));\n    }\n    Object.defineProperties(read, {\n        state: {\n            get: ()=>state()\n        },\n        error: {\n            get: ()=>error()\n        },\n        loading: {\n            get () {\n                const s = state();\n                return s === \"pending\" || s === \"refreshing\";\n            }\n        },\n        latest: {\n            get () {\n                if (!resolved) return read();\n                const err = error();\n                if (err && !pr) throw err;\n                return value();\n            }\n        }\n    });\n    if (dynamic) createComputed(()=>load(false));\n    else load(false);\n    return [\n        read,\n        {\n            refetch: load,\n            mutate: setValue\n        }\n    ];\n}\nfunction batch(fn) {\n    return runUpdates(fn, false);\n}\nfunction untrack(fn) {\n    if (!ExternalSourceConfig && Listener === null) return fn();\n    const listener = Listener;\n    Listener = null;\n    try {\n        if (ExternalSourceConfig) return ExternalSourceConfig.untrack(fn);\n        return fn();\n    } finally{\n        Listener = listener;\n    }\n}\nfunction on(deps, fn, options) {\n    const isArray3 = Array.isArray(deps);\n    let prevInput;\n    let defer = options && options.defer;\n    return (prevValue)=>{\n        let input;\n        if (isArray3) {\n            input = Array(deps.length);\n            for(let i = 0; i < deps.length; i++)input[i] = deps[i]();\n        } else input = deps();\n        if (defer) {\n            defer = false;\n            return prevValue;\n        }\n        const result = untrack(()=>fn(input, prevInput, prevValue));\n        prevInput = input;\n        return result;\n    };\n}\nfunction onMount(fn) {\n    createEffect(()=>untrack(fn));\n}\nfunction onCleanup(fn) {\n    if (Owner === null) ;\n    else if (Owner.cleanups === null) Owner.cleanups = [\n        fn\n    ];\n    else Owner.cleanups.push(fn);\n    return fn;\n}\nfunction getOwner() {\n    return Owner;\n}\nfunction runWithOwner(o, fn) {\n    const prev = Owner;\n    const prevListener = Listener;\n    Owner = o;\n    Listener = null;\n    try {\n        return runUpdates(fn, true);\n    } catch (err) {\n        handleError(err);\n    } finally{\n        Owner = prev;\n        Listener = prevListener;\n    }\n}\nfunction startTransition(fn) {\n    if (Transition && Transition.running) {\n        fn();\n        return Transition.done;\n    }\n    const l = Listener;\n    const o = Owner;\n    return Promise.resolve().then(()=>{\n        Listener = l;\n        Owner = o;\n        let t;\n        if (Scheduler || SuspenseContext) {\n            t = Transition || (Transition = {\n                sources: /* @__PURE__ */ new Set(),\n                effects: [],\n                promises: /* @__PURE__ */ new Set(),\n                disposed: /* @__PURE__ */ new Set(),\n                queue: /* @__PURE__ */ new Set(),\n                running: true\n            });\n            t.done || (t.done = new Promise((res)=>t.resolve = res));\n            t.running = true;\n        }\n        runUpdates(fn, false);\n        Listener = Owner = null;\n        return t ? t.done : void 0;\n    });\n}\nvar [transPending, setTransPending] = /* @__PURE__ */ createSignal(false);\nfunction useTransition() {\n    return [\n        transPending,\n        startTransition\n    ];\n}\nfunction createContext(defaultValue, options) {\n    const id = Symbol(\"context\");\n    return {\n        id,\n        Provider: createProvider(id),\n        defaultValue\n    };\n}\nfunction useContext(context) {\n    let value;\n    return Owner && Owner.context && (value = Owner.context[context.id]) !== void 0 ? value : context.defaultValue;\n}\nfunction children(fn) {\n    const children2 = createMemo(fn);\n    const memo = createMemo(()=>resolveChildren(children2()));\n    memo.toArray = ()=>{\n        const c = memo();\n        return Array.isArray(c) ? c : c != null ? [\n            c\n        ] : [];\n    };\n    return memo;\n}\nvar SuspenseContext;\nfunction readSignal() {\n    const runningTransition = Transition && Transition.running;\n    if (this.sources && (runningTransition ? this.tState : this.state)) {\n        if ((runningTransition ? this.tState : this.state) === STALE) updateComputation(this);\n        else {\n            const updates = Updates;\n            Updates = null;\n            runUpdates(()=>lookUpstream(this), false);\n            Updates = updates;\n        }\n    }\n    if (Listener) {\n        const sSlot = this.observers ? this.observers.length : 0;\n        if (!Listener.sources) {\n            Listener.sources = [\n                this\n            ];\n            Listener.sourceSlots = [\n                sSlot\n            ];\n        } else {\n            Listener.sources.push(this);\n            Listener.sourceSlots.push(sSlot);\n        }\n        if (!this.observers) {\n            this.observers = [\n                Listener\n            ];\n            this.observerSlots = [\n                Listener.sources.length - 1\n            ];\n        } else {\n            this.observers.push(Listener);\n            this.observerSlots.push(Listener.sources.length - 1);\n        }\n    }\n    if (runningTransition && Transition.sources.has(this)) return this.tValue;\n    return this.value;\n}\nfunction writeSignal(node, value, isComp) {\n    let current = Transition && Transition.running && Transition.sources.has(node) ? node.tValue : node.value;\n    if (!node.comparator || !node.comparator(current, value)) {\n        if (Transition) {\n            const TransitionRunning = Transition.running;\n            if (TransitionRunning || !isComp && Transition.sources.has(node)) {\n                Transition.sources.add(node);\n                node.tValue = value;\n            }\n            if (!TransitionRunning) node.value = value;\n        } else node.value = value;\n        if (node.observers && node.observers.length) {\n            runUpdates(()=>{\n                for(let i = 0; i < node.observers.length; i += 1){\n                    const o = node.observers[i];\n                    const TransitionRunning = Transition && Transition.running;\n                    if (TransitionRunning && Transition.disposed.has(o)) continue;\n                    if (TransitionRunning ? !o.tState : !o.state) {\n                        if (o.pure) Updates.push(o);\n                        else Effects.push(o);\n                        if (o.observers) markDownstream(o);\n                    }\n                    if (!TransitionRunning) o.state = STALE;\n                    else o.tState = STALE;\n                }\n                if (Updates.length > 1e6) {\n                    Updates = [];\n                    if (IS_DEV) ;\n                    throw new Error();\n                }\n            }, false);\n        }\n    }\n    return value;\n}\nfunction updateComputation(node) {\n    if (!node.fn) return;\n    cleanNode(node);\n    const time = ExecCount;\n    runComputation(node, Transition && Transition.running && Transition.sources.has(node) ? node.tValue : node.value, time);\n    if (Transition && !Transition.running && Transition.sources.has(node)) {\n        queueMicrotask(()=>{\n            runUpdates(()=>{\n                Transition && (Transition.running = true);\n                Listener = Owner = node;\n                runComputation(node, node.tValue, time);\n                Listener = Owner = null;\n            }, false);\n        });\n    }\n}\nfunction runComputation(node, value, time) {\n    let nextValue;\n    const owner = Owner, listener = Listener;\n    Listener = Owner = node;\n    try {\n        nextValue = node.fn(value);\n    } catch (err) {\n        if (node.pure) {\n            if (Transition && Transition.running) {\n                node.tState = STALE;\n                node.tOwned && node.tOwned.forEach(cleanNode);\n                node.tOwned = void 0;\n            } else {\n                node.state = STALE;\n                node.owned && node.owned.forEach(cleanNode);\n                node.owned = null;\n            }\n        }\n        node.updatedAt = time + 1;\n        return handleError(err);\n    } finally{\n        Listener = listener;\n        Owner = owner;\n    }\n    if (!node.updatedAt || node.updatedAt <= time) {\n        if (node.updatedAt != null && \"observers\" in node) {\n            writeSignal(node, nextValue, true);\n        } else if (Transition && Transition.running && node.pure) {\n            Transition.sources.add(node);\n            node.tValue = nextValue;\n        } else node.value = nextValue;\n        node.updatedAt = time;\n    }\n}\nfunction createComputation(fn, init, pure, state = STALE, options) {\n    const c = {\n        fn,\n        state,\n        updatedAt: null,\n        owned: null,\n        sources: null,\n        sourceSlots: null,\n        cleanups: null,\n        value: init,\n        owner: Owner,\n        context: Owner ? Owner.context : null,\n        pure\n    };\n    if (Transition && Transition.running) {\n        c.state = 0;\n        c.tState = state;\n    }\n    if (Owner === null) ;\n    else if (Owner !== UNOWNED) {\n        if (Transition && Transition.running && Owner.pure) {\n            if (!Owner.tOwned) Owner.tOwned = [\n                c\n            ];\n            else Owner.tOwned.push(c);\n        } else {\n            if (!Owner.owned) Owner.owned = [\n                c\n            ];\n            else Owner.owned.push(c);\n        }\n    }\n    if (ExternalSourceConfig && c.fn) {\n        const [track, trigger] = createSignal(void 0, {\n            equals: false\n        });\n        const ordinary = ExternalSourceConfig.factory(c.fn, trigger);\n        onCleanup(()=>ordinary.dispose());\n        const triggerInTransition = ()=>startTransition(trigger).then(()=>inTransition.dispose());\n        const inTransition = ExternalSourceConfig.factory(c.fn, triggerInTransition);\n        c.fn = (x)=>{\n            track();\n            return Transition && Transition.running ? inTransition.track(x) : ordinary.track(x);\n        };\n    }\n    return c;\n}\nfunction runTop(node) {\n    const runningTransition = Transition && Transition.running;\n    if ((runningTransition ? node.tState : node.state) === 0) return;\n    if ((runningTransition ? node.tState : node.state) === PENDING) return lookUpstream(node);\n    if (node.suspense && untrack(node.suspense.inFallback)) return node.suspense.effects.push(node);\n    const ancestors = [\n        node\n    ];\n    while((node = node.owner) && (!node.updatedAt || node.updatedAt < ExecCount)){\n        if (runningTransition && Transition.disposed.has(node)) return;\n        if (runningTransition ? node.tState : node.state) ancestors.push(node);\n    }\n    for(let i = ancestors.length - 1; i >= 0; i--){\n        node = ancestors[i];\n        if (runningTransition) {\n            let top = node, prev = ancestors[i + 1];\n            while((top = top.owner) && top !== prev){\n                if (Transition.disposed.has(top)) return;\n            }\n        }\n        if ((runningTransition ? node.tState : node.state) === STALE) {\n            updateComputation(node);\n        } else if ((runningTransition ? node.tState : node.state) === PENDING) {\n            const updates = Updates;\n            Updates = null;\n            runUpdates(()=>lookUpstream(node, ancestors[0]), false);\n            Updates = updates;\n        }\n    }\n}\nfunction runUpdates(fn, init) {\n    if (Updates) return fn();\n    let wait = false;\n    if (!init) Updates = [];\n    if (Effects) wait = true;\n    else Effects = [];\n    ExecCount++;\n    try {\n        const res = fn();\n        completeUpdates(wait);\n        return res;\n    } catch (err) {\n        if (!wait) Effects = null;\n        Updates = null;\n        handleError(err);\n    }\n}\nfunction completeUpdates(wait) {\n    if (Updates) {\n        if (Scheduler && Transition && Transition.running) scheduleQueue(Updates);\n        else runQueue(Updates);\n        Updates = null;\n    }\n    if (wait) return;\n    let res;\n    if (Transition) {\n        if (!Transition.promises.size && !Transition.queue.size) {\n            const sources = Transition.sources;\n            const disposed = Transition.disposed;\n            Effects.push.apply(Effects, Transition.effects);\n            res = Transition.resolve;\n            for (const e2 of Effects){\n                \"tState\" in e2 && (e2.state = e2.tState);\n                delete e2.tState;\n            }\n            Transition = null;\n            runUpdates(()=>{\n                for (const d of disposed)cleanNode(d);\n                for (const v of sources){\n                    v.value = v.tValue;\n                    if (v.owned) {\n                        for(let i = 0, len = v.owned.length; i < len; i++)cleanNode(v.owned[i]);\n                    }\n                    if (v.tOwned) v.owned = v.tOwned;\n                    delete v.tValue;\n                    delete v.tOwned;\n                    v.tState = 0;\n                }\n                setTransPending(false);\n            }, false);\n        } else if (Transition.running) {\n            Transition.running = false;\n            Transition.effects.push.apply(Transition.effects, Effects);\n            Effects = null;\n            setTransPending(true);\n            return;\n        }\n    }\n    const e = Effects;\n    Effects = null;\n    if (e.length) runUpdates(()=>runEffects(e), false);\n    if (res) res();\n}\nfunction runQueue(queue) {\n    for(let i = 0; i < queue.length; i++)runTop(queue[i]);\n}\nfunction scheduleQueue(queue) {\n    for(let i = 0; i < queue.length; i++){\n        const item = queue[i];\n        const tasks = Transition.queue;\n        if (!tasks.has(item)) {\n            tasks.add(item);\n            Scheduler(()=>{\n                tasks.delete(item);\n                runUpdates(()=>{\n                    Transition.running = true;\n                    runTop(item);\n                }, false);\n                Transition && (Transition.running = false);\n            });\n        }\n    }\n}\nfunction runUserEffects(queue) {\n    let i, userLength = 0;\n    for(i = 0; i < queue.length; i++){\n        const e = queue[i];\n        if (!e.user) runTop(e);\n        else queue[userLength++] = e;\n    }\n    if (sharedConfig.context) {\n        if (sharedConfig.count) {\n            sharedConfig.effects || (sharedConfig.effects = []);\n            sharedConfig.effects.push(...queue.slice(0, userLength));\n            return;\n        }\n        setHydrateContext();\n    }\n    if (sharedConfig.effects && (sharedConfig.done || !sharedConfig.count)) {\n        queue = [\n            ...sharedConfig.effects,\n            ...queue\n        ];\n        userLength += sharedConfig.effects.length;\n        delete sharedConfig.effects;\n    }\n    for(i = 0; i < userLength; i++)runTop(queue[i]);\n}\nfunction lookUpstream(node, ignore) {\n    const runningTransition = Transition && Transition.running;\n    if (runningTransition) node.tState = 0;\n    else node.state = 0;\n    for(let i = 0; i < node.sources.length; i += 1){\n        const source = node.sources[i];\n        if (source.sources) {\n            const state = runningTransition ? source.tState : source.state;\n            if (state === STALE) {\n                if (source !== ignore && (!source.updatedAt || source.updatedAt < ExecCount)) runTop(source);\n            } else if (state === PENDING) lookUpstream(source, ignore);\n        }\n    }\n}\nfunction markDownstream(node) {\n    const runningTransition = Transition && Transition.running;\n    for(let i = 0; i < node.observers.length; i += 1){\n        const o = node.observers[i];\n        if (runningTransition ? !o.tState : !o.state) {\n            if (runningTransition) o.tState = PENDING;\n            else o.state = PENDING;\n            if (o.pure) Updates.push(o);\n            else Effects.push(o);\n            o.observers && markDownstream(o);\n        }\n    }\n}\nfunction cleanNode(node) {\n    let i;\n    if (node.sources) {\n        while(node.sources.length){\n            const source = node.sources.pop(), index = node.sourceSlots.pop(), obs = source.observers;\n            if (obs && obs.length) {\n                const n = obs.pop(), s = source.observerSlots.pop();\n                if (index < obs.length) {\n                    n.sourceSlots[s] = index;\n                    obs[index] = n;\n                    source.observerSlots[index] = s;\n                }\n            }\n        }\n    }\n    if (node.tOwned) {\n        for(i = node.tOwned.length - 1; i >= 0; i--)cleanNode(node.tOwned[i]);\n        delete node.tOwned;\n    }\n    if (Transition && Transition.running && node.pure) {\n        reset(node, true);\n    } else if (node.owned) {\n        for(i = node.owned.length - 1; i >= 0; i--)cleanNode(node.owned[i]);\n        node.owned = null;\n    }\n    if (node.cleanups) {\n        for(i = node.cleanups.length - 1; i >= 0; i--)node.cleanups[i]();\n        node.cleanups = null;\n    }\n    if (Transition && Transition.running) node.tState = 0;\n    else node.state = 0;\n}\nfunction reset(node, top) {\n    if (!top) {\n        node.tState = 0;\n        Transition.disposed.add(node);\n    }\n    if (node.owned) {\n        for(let i = 0; i < node.owned.length; i++)reset(node.owned[i]);\n    }\n}\nfunction castError(err) {\n    if (err instanceof Error) return err;\n    return new Error(typeof err === \"string\" ? err : \"Unknown error\", {\n        cause: err\n    });\n}\nfunction runErrors(err, fns, owner) {\n    try {\n        for (const f of fns)f(err);\n    } catch (e) {\n        handleError(e, owner && owner.owner || null);\n    }\n}\nfunction handleError(err, owner = Owner) {\n    const fns = ERROR && owner && owner.context && owner.context[ERROR];\n    const error = castError(err);\n    if (!fns) throw error;\n    if (Effects) Effects.push({\n        fn () {\n            runErrors(error, fns, owner);\n        },\n        state: STALE\n    });\n    else runErrors(error, fns, owner);\n}\nfunction resolveChildren(children2) {\n    if (typeof children2 === \"function\" && !children2.length) return resolveChildren(children2());\n    if (Array.isArray(children2)) {\n        const results = [];\n        for(let i = 0; i < children2.length; i++){\n            const result = resolveChildren(children2[i]);\n            Array.isArray(result) ? results.push.apply(results, result) : results.push(result);\n        }\n        return results;\n    }\n    return children2;\n}\nfunction createProvider(id, options) {\n    return function provider(props) {\n        let res;\n        createRenderEffect(()=>res = untrack(()=>{\n                Owner.context = {\n                    ...Owner.context,\n                    [id]: props.value\n                };\n                return children(()=>props.children);\n            }), void 0);\n        return res;\n    };\n}\nvar FALLBACK = Symbol(\"fallback\");\nfunction dispose(d) {\n    for(let i = 0; i < d.length; i++)d[i]();\n}\nfunction mapArray(list, mapFn, options = {}) {\n    let items = [], mapped = [], disposers = [], len = 0, indexes = mapFn.length > 1 ? [] : null;\n    onCleanup(()=>dispose(disposers));\n    return ()=>{\n        let newItems = list() || [], newLen = newItems.length, i, j;\n        newItems[$TRACK];\n        return untrack(()=>{\n            let newIndices, newIndicesNext, temp, tempdisposers, tempIndexes, start, end, newEnd, item;\n            if (newLen === 0) {\n                if (len !== 0) {\n                    dispose(disposers);\n                    disposers = [];\n                    items = [];\n                    mapped = [];\n                    len = 0;\n                    indexes && (indexes = []);\n                }\n                if (options.fallback) {\n                    items = [\n                        FALLBACK\n                    ];\n                    mapped[0] = createRoot((disposer)=>{\n                        disposers[0] = disposer;\n                        return options.fallback();\n                    });\n                    len = 1;\n                }\n            } else if (len === 0) {\n                mapped = new Array(newLen);\n                for(j = 0; j < newLen; j++){\n                    items[j] = newItems[j];\n                    mapped[j] = createRoot(mapper);\n                }\n                len = newLen;\n            } else {\n                temp = new Array(newLen);\n                tempdisposers = new Array(newLen);\n                indexes && (tempIndexes = new Array(newLen));\n                for(start = 0, end = Math.min(len, newLen); start < end && items[start] === newItems[start]; start++);\n                for(end = len - 1, newEnd = newLen - 1; end >= start && newEnd >= start && items[end] === newItems[newEnd]; end--, newEnd--){\n                    temp[newEnd] = mapped[end];\n                    tempdisposers[newEnd] = disposers[end];\n                    indexes && (tempIndexes[newEnd] = indexes[end]);\n                }\n                newIndices = /* @__PURE__ */ new Map();\n                newIndicesNext = new Array(newEnd + 1);\n                for(j = newEnd; j >= start; j--){\n                    item = newItems[j];\n                    i = newIndices.get(item);\n                    newIndicesNext[j] = i === void 0 ? -1 : i;\n                    newIndices.set(item, j);\n                }\n                for(i = start; i <= end; i++){\n                    item = items[i];\n                    j = newIndices.get(item);\n                    if (j !== void 0 && j !== -1) {\n                        temp[j] = mapped[i];\n                        tempdisposers[j] = disposers[i];\n                        indexes && (tempIndexes[j] = indexes[i]);\n                        j = newIndicesNext[j];\n                        newIndices.set(item, j);\n                    } else disposers[i]();\n                }\n                for(j = start; j < newLen; j++){\n                    if (j in temp) {\n                        mapped[j] = temp[j];\n                        disposers[j] = tempdisposers[j];\n                        if (indexes) {\n                            indexes[j] = tempIndexes[j];\n                            indexes[j](j);\n                        }\n                    } else mapped[j] = createRoot(mapper);\n                }\n                mapped = mapped.slice(0, len = newLen);\n                items = newItems.slice(0);\n            }\n            return mapped;\n        });\n        function mapper(disposer) {\n            disposers[j] = disposer;\n            if (indexes) {\n                const [s, set] = createSignal(j);\n                indexes[j] = set;\n                return mapFn(newItems[j], s);\n            }\n            return mapFn(newItems[j]);\n        }\n    };\n}\nfunction indexArray(list, mapFn, options = {}) {\n    let items = [], mapped = [], disposers = [], signals = [], len = 0, i;\n    onCleanup(()=>dispose(disposers));\n    return ()=>{\n        const newItems = list() || [], newLen = newItems.length;\n        newItems[$TRACK];\n        return untrack(()=>{\n            if (newLen === 0) {\n                if (len !== 0) {\n                    dispose(disposers);\n                    disposers = [];\n                    items = [];\n                    mapped = [];\n                    len = 0;\n                    signals = [];\n                }\n                if (options.fallback) {\n                    items = [\n                        FALLBACK\n                    ];\n                    mapped[0] = createRoot((disposer)=>{\n                        disposers[0] = disposer;\n                        return options.fallback();\n                    });\n                    len = 1;\n                }\n                return mapped;\n            }\n            if (items[0] === FALLBACK) {\n                disposers[0]();\n                disposers = [];\n                items = [];\n                mapped = [];\n                len = 0;\n            }\n            for(i = 0; i < newLen; i++){\n                if (i < items.length && items[i] !== newItems[i]) {\n                    signals[i](()=>newItems[i]);\n                } else if (i >= items.length) {\n                    mapped[i] = createRoot(mapper);\n                }\n            }\n            for(; i < items.length; i++){\n                disposers[i]();\n            }\n            len = signals.length = disposers.length = newLen;\n            items = newItems.slice(0);\n            return mapped = mapped.slice(0, len);\n        });\n        function mapper(disposer) {\n            disposers[i] = disposer;\n            const [s, set] = createSignal(newItems[i]);\n            signals[i] = set;\n            return mapFn(s, i);\n        }\n    };\n}\nvar hydrationEnabled = false;\nfunction createComponent(Comp, props) {\n    if (hydrationEnabled) {\n        if (sharedConfig.context) {\n            const c = sharedConfig.context;\n            setHydrateContext(nextHydrateContext());\n            const r = untrack(()=>Comp(props || {}));\n            setHydrateContext(c);\n            return r;\n        }\n    }\n    return untrack(()=>Comp(props || {}));\n}\nfunction trueFn() {\n    return true;\n}\nvar propTraps = {\n    get (_, property, receiver) {\n        if (property === $PROXY) return receiver;\n        return _.get(property);\n    },\n    has (_, property) {\n        if (property === $PROXY) return true;\n        return _.has(property);\n    },\n    set: trueFn,\n    deleteProperty: trueFn,\n    getOwnPropertyDescriptor (_, property) {\n        return {\n            configurable: true,\n            enumerable: true,\n            get () {\n                return _.get(property);\n            },\n            set: trueFn,\n            deleteProperty: trueFn\n        };\n    },\n    ownKeys (_) {\n        return _.keys();\n    }\n};\nfunction resolveSource(s) {\n    return !(s = typeof s === \"function\" ? s() : s) ? {} : s;\n}\nfunction resolveSources() {\n    for(let i = 0, length = this.length; i < length; ++i){\n        const v = this[i]();\n        if (v !== void 0) return v;\n    }\n}\nfunction mergeProps(...sources) {\n    let proxy = false;\n    for(let i = 0; i < sources.length; i++){\n        const s = sources[i];\n        proxy = proxy || !!s && $PROXY in s;\n        sources[i] = typeof s === \"function\" ? (proxy = true, createMemo(s)) : s;\n    }\n    if (SUPPORTS_PROXY && proxy) {\n        return new Proxy({\n            get (property) {\n                for(let i = sources.length - 1; i >= 0; i--){\n                    const v = resolveSource(sources[i])[property];\n                    if (v !== void 0) return v;\n                }\n            },\n            has (property) {\n                for(let i = sources.length - 1; i >= 0; i--){\n                    if (property in resolveSource(sources[i])) return true;\n                }\n                return false;\n            },\n            keys () {\n                const keys = [];\n                for(let i = 0; i < sources.length; i++)keys.push(...Object.keys(resolveSource(sources[i])));\n                return [\n                    ...new Set(keys)\n                ];\n            }\n        }, propTraps);\n    }\n    const sourcesMap = {};\n    const defined = /* @__PURE__ */ Object.create(null);\n    for(let i = sources.length - 1; i >= 0; i--){\n        const source = sources[i];\n        if (!source) continue;\n        const sourceKeys = Object.getOwnPropertyNames(source);\n        for(let i2 = sourceKeys.length - 1; i2 >= 0; i2--){\n            const key = sourceKeys[i2];\n            if (key === \"__proto__\" || key === \"constructor\") continue;\n            const desc = Object.getOwnPropertyDescriptor(source, key);\n            if (!defined[key]) {\n                defined[key] = desc.get ? {\n                    enumerable: true,\n                    configurable: true,\n                    get: resolveSources.bind(sourcesMap[key] = [\n                        desc.get.bind(source)\n                    ])\n                } : desc.value !== void 0 ? desc : void 0;\n            } else {\n                const sources2 = sourcesMap[key];\n                if (sources2) {\n                    if (desc.get) sources2.push(desc.get.bind(source));\n                    else if (desc.value !== void 0) sources2.push(()=>desc.value);\n                }\n            }\n        }\n    }\n    const target = {};\n    const definedKeys = Object.keys(defined);\n    for(let i = definedKeys.length - 1; i >= 0; i--){\n        const key = definedKeys[i], desc = defined[key];\n        if (desc && desc.get) Object.defineProperty(target, key, desc);\n        else target[key] = desc ? desc.value : void 0;\n    }\n    return target;\n}\nfunction splitProps(props, ...keys) {\n    if (SUPPORTS_PROXY && $PROXY in props) {\n        const blocked = new Set(keys.length > 1 ? keys.flat() : keys[0]);\n        const res = keys.map((k)=>{\n            return new Proxy({\n                get (property) {\n                    return k.includes(property) ? props[property] : void 0;\n                },\n                has (property) {\n                    return k.includes(property) && property in props;\n                },\n                keys () {\n                    return k.filter((property)=>property in props);\n                }\n            }, propTraps);\n        });\n        res.push(new Proxy({\n            get (property) {\n                return blocked.has(property) ? void 0 : props[property];\n            },\n            has (property) {\n                return blocked.has(property) ? false : property in props;\n            },\n            keys () {\n                return Object.keys(props).filter((k)=>!blocked.has(k));\n            }\n        }, propTraps));\n        return res;\n    }\n    const otherObject = {};\n    const objects = keys.map(()=>({}));\n    for (const propName of Object.getOwnPropertyNames(props)){\n        const desc = Object.getOwnPropertyDescriptor(props, propName);\n        const isDefaultDesc = !desc.get && !desc.set && desc.enumerable && desc.writable && desc.configurable;\n        let blocked = false;\n        let objectIndex = 0;\n        for (const k of keys){\n            if (k.includes(propName)) {\n                blocked = true;\n                isDefaultDesc ? objects[objectIndex][propName] = desc.value : Object.defineProperty(objects[objectIndex], propName, desc);\n            }\n            ++objectIndex;\n        }\n        if (!blocked) {\n            isDefaultDesc ? otherObject[propName] = desc.value : Object.defineProperty(otherObject, propName, desc);\n        }\n    }\n    return [\n        ...objects,\n        otherObject\n    ];\n}\nfunction lazy(fn) {\n    let comp;\n    let p;\n    const wrap = (props)=>{\n        const ctx = sharedConfig.context;\n        if (ctx) {\n            const [s, set] = createSignal();\n            sharedConfig.count || (sharedConfig.count = 0);\n            sharedConfig.count++;\n            (p || (p = fn())).then((mod)=>{\n                !sharedConfig.done && setHydrateContext(ctx);\n                sharedConfig.count--;\n                set(()=>mod.default);\n                setHydrateContext();\n            });\n            comp = s;\n        } else if (!comp) {\n            const [s] = createResource(()=>(p || (p = fn())).then((mod)=>mod.default));\n            comp = s;\n        }\n        let Comp;\n        return createMemo(()=>(Comp = comp()) ? untrack(()=>{\n                if (IS_DEV) ;\n                if (!ctx || sharedConfig.done) return Comp(props);\n                const c = sharedConfig.context;\n                setHydrateContext(ctx);\n                const r = Comp(props);\n                setHydrateContext(c);\n                return r;\n            }) : \"\");\n    };\n    wrap.preload = ()=>p || ((p = fn()).then((mod)=>comp = ()=>mod.default), p);\n    return wrap;\n}\nvar counter = 0;\nfunction createUniqueId() {\n    const ctx = sharedConfig.context;\n    return ctx ? sharedConfig.getNextContextId() : `cl-${counter++}`;\n}\nvar narrowedError = (name)=>`Stale read from <${name}>.`;\nfunction For(props) {\n    const fallback = \"fallback\" in props && {\n        fallback: ()=>props.fallback\n    };\n    return createMemo(mapArray(()=>props.each, props.children, fallback || void 0));\n}\nfunction Index(props) {\n    const fallback = \"fallback\" in props && {\n        fallback: ()=>props.fallback\n    };\n    return createMemo(indexArray(()=>props.each, props.children, fallback || void 0));\n}\nfunction Show(props) {\n    const keyed = props.keyed;\n    const conditionValue = createMemo(()=>props.when, void 0, void 0);\n    const condition = keyed ? conditionValue : createMemo(conditionValue, void 0, {\n        equals: (a, b)=>!a === !b\n    });\n    return createMemo(()=>{\n        const c = condition();\n        if (c) {\n            const child = props.children;\n            const fn = typeof child === \"function\" && child.length > 0;\n            return fn ? untrack(()=>child(keyed ? c : ()=>{\n                    if (!untrack(condition)) throw narrowedError(\"Show\");\n                    return conditionValue();\n                })) : child;\n        }\n        return props.fallback;\n    }, void 0, void 0);\n}\nfunction Switch(props) {\n    const chs = children(()=>props.children);\n    const switchFunc = createMemo(()=>{\n        const ch = chs();\n        const mps = Array.isArray(ch) ? ch : [\n            ch\n        ];\n        let func = ()=>void 0;\n        for(let i = 0; i < mps.length; i++){\n            const index = i;\n            const mp = mps[i];\n            const prevFunc = func;\n            const conditionValue = createMemo(()=>prevFunc() ? void 0 : mp.when, void 0, void 0);\n            const condition = mp.keyed ? conditionValue : createMemo(conditionValue, void 0, {\n                equals: (a, b)=>!a === !b\n            });\n            func = ()=>prevFunc() || (condition() ? [\n                    index,\n                    conditionValue,\n                    mp\n                ] : void 0);\n        }\n        return func;\n    });\n    return createMemo(()=>{\n        const sel = switchFunc()();\n        if (!sel) return props.fallback;\n        const [index, conditionValue, mp] = sel;\n        const child = mp.children;\n        const fn = typeof child === \"function\" && child.length > 0;\n        return fn ? untrack(()=>child(mp.keyed ? conditionValue() : ()=>{\n                if (untrack(switchFunc)()?.[0] !== index) throw narrowedError(\"Match\");\n                return conditionValue();\n            })) : child;\n    }, void 0, void 0);\n}\nfunction Match(props) {\n    return props;\n}\nvar DEV = void 0;\n// ../../node_modules/.pnpm/solid-js@1.9.5/node_modules/solid-js/web/dist/web.js\nvar booleans = [\n    \"allowfullscreen\",\n    \"async\",\n    \"autofocus\",\n    \"autoplay\",\n    \"checked\",\n    \"controls\",\n    \"default\",\n    \"disabled\",\n    \"formnovalidate\",\n    \"hidden\",\n    \"indeterminate\",\n    \"inert\",\n    \"ismap\",\n    \"loop\",\n    \"multiple\",\n    \"muted\",\n    \"nomodule\",\n    \"novalidate\",\n    \"open\",\n    \"playsinline\",\n    \"readonly\",\n    \"required\",\n    \"reversed\",\n    \"seamless\",\n    \"selected\"\n];\nvar Properties = /* @__PURE__ */ new Set([\n    \"className\",\n    \"value\",\n    \"readOnly\",\n    \"formNoValidate\",\n    \"isMap\",\n    \"noModule\",\n    \"playsInline\",\n    ...booleans\n]);\nvar ChildProperties = /* @__PURE__ */ new Set([\n    \"innerHTML\",\n    \"textContent\",\n    \"innerText\",\n    \"children\"\n]);\nvar Aliases = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(null), {\n    className: \"class\",\n    htmlFor: \"for\"\n});\nvar PropAliases = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(null), {\n    class: \"className\",\n    formnovalidate: {\n        $: \"formNoValidate\",\n        BUTTON: 1,\n        INPUT: 1\n    },\n    ismap: {\n        $: \"isMap\",\n        IMG: 1\n    },\n    nomodule: {\n        $: \"noModule\",\n        SCRIPT: 1\n    },\n    playsinline: {\n        $: \"playsInline\",\n        VIDEO: 1\n    },\n    readonly: {\n        $: \"readOnly\",\n        INPUT: 1,\n        TEXTAREA: 1\n    }\n});\nfunction getPropAlias(prop, tagName) {\n    const a = PropAliases[prop];\n    return typeof a === \"object\" ? a[tagName] ? a[\"$\"] : void 0 : a;\n}\nvar DelegatedEvents = /* @__PURE__ */ new Set([\n    \"beforeinput\",\n    \"click\",\n    \"dblclick\",\n    \"contextmenu\",\n    \"focusin\",\n    \"focusout\",\n    \"input\",\n    \"keydown\",\n    \"keyup\",\n    \"mousedown\",\n    \"mousemove\",\n    \"mouseout\",\n    \"mouseover\",\n    \"mouseup\",\n    \"pointerdown\",\n    \"pointermove\",\n    \"pointerout\",\n    \"pointerover\",\n    \"pointerup\",\n    \"touchend\",\n    \"touchmove\",\n    \"touchstart\"\n]);\nvar SVGElements = /* @__PURE__ */ new Set([\n    \"altGlyph\",\n    \"altGlyphDef\",\n    \"altGlyphItem\",\n    \"animate\",\n    \"animateColor\",\n    \"animateMotion\",\n    \"animateTransform\",\n    \"circle\",\n    \"clipPath\",\n    \"color-profile\",\n    \"cursor\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"feBlend\",\n    \"feColorMatrix\",\n    \"feComponentTransfer\",\n    \"feComposite\",\n    \"feConvolveMatrix\",\n    \"feDiffuseLighting\",\n    \"feDisplacementMap\",\n    \"feDistantLight\",\n    \"feDropShadow\",\n    \"feFlood\",\n    \"feFuncA\",\n    \"feFuncB\",\n    \"feFuncG\",\n    \"feFuncR\",\n    \"feGaussianBlur\",\n    \"feImage\",\n    \"feMerge\",\n    \"feMergeNode\",\n    \"feMorphology\",\n    \"feOffset\",\n    \"fePointLight\",\n    \"feSpecularLighting\",\n    \"feSpotLight\",\n    \"feTile\",\n    \"feTurbulence\",\n    \"filter\",\n    \"font\",\n    \"font-face\",\n    \"font-face-format\",\n    \"font-face-name\",\n    \"font-face-src\",\n    \"font-face-uri\",\n    \"foreignObject\",\n    \"g\",\n    \"glyph\",\n    \"glyphRef\",\n    \"hkern\",\n    \"image\",\n    \"line\",\n    \"linearGradient\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"missing-glyph\",\n    \"mpath\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"radialGradient\",\n    \"rect\",\n    \"set\",\n    \"stop\",\n    \"svg\",\n    \"switch\",\n    \"symbol\",\n    \"text\",\n    \"textPath\",\n    \"tref\",\n    \"tspan\",\n    \"use\",\n    \"view\",\n    \"vkern\"\n]);\nvar SVGNamespace = {\n    xlink: \"http://www.w3.org/1999/xlink\",\n    xml: \"http://www.w3.org/XML/1998/namespace\"\n};\nfunction reconcileArrays(parentNode, a, b) {\n    let bLength = b.length, aEnd = a.length, bEnd = bLength, aStart = 0, bStart = 0, after = a[aEnd - 1].nextSibling, map = null;\n    while(aStart < aEnd || bStart < bEnd){\n        if (a[aStart] === b[bStart]) {\n            aStart++;\n            bStart++;\n            continue;\n        }\n        while(a[aEnd - 1] === b[bEnd - 1]){\n            aEnd--;\n            bEnd--;\n        }\n        if (aEnd === aStart) {\n            const node = bEnd < bLength ? bStart ? b[bStart - 1].nextSibling : b[bEnd - bStart] : after;\n            while(bStart < bEnd)parentNode.insertBefore(b[bStart++], node);\n        } else if (bEnd === bStart) {\n            while(aStart < aEnd){\n                if (!map || !map.has(a[aStart])) a[aStart].remove();\n                aStart++;\n            }\n        } else if (a[aStart] === b[bEnd - 1] && b[bStart] === a[aEnd - 1]) {\n            const node = a[--aEnd].nextSibling;\n            parentNode.insertBefore(b[bStart++], a[aStart++].nextSibling);\n            parentNode.insertBefore(b[--bEnd], node);\n            a[aEnd] = b[bEnd];\n        } else {\n            if (!map) {\n                map = /* @__PURE__ */ new Map();\n                let i = bStart;\n                while(i < bEnd)map.set(b[i], i++);\n            }\n            const index = map.get(a[aStart]);\n            if (index != null) {\n                if (bStart < index && index < bEnd) {\n                    let i = aStart, sequence = 1, t;\n                    while(++i < aEnd && i < bEnd){\n                        if ((t = map.get(a[i])) == null || t !== index + sequence) break;\n                        sequence++;\n                    }\n                    if (sequence > index - bStart) {\n                        const node = a[aStart];\n                        while(bStart < index)parentNode.insertBefore(b[bStart++], node);\n                    } else parentNode.replaceChild(b[bStart++], a[aStart++]);\n                } else aStart++;\n            } else a[aStart++].remove();\n        }\n    }\n}\nvar $$EVENTS = \"_$DX_DELEGATE\";\nfunction render(code, element, init, options = {}) {\n    let disposer;\n    createRoot((dispose2)=>{\n        disposer = dispose2;\n        element === document ? code() : insert(element, code(), element.firstChild ? null : void 0, init);\n    }, options.owner);\n    return ()=>{\n        disposer();\n        element.textContent = \"\";\n    };\n}\nfunction template(html, isImportNode, isSVG, isMathML) {\n    let node;\n    const create = ()=>{\n        const t = isMathML ? document.createElementNS(\"http://www.w3.org/1998/Math/MathML\", \"template\") : document.createElement(\"template\");\n        t.innerHTML = html;\n        return isSVG ? t.content.firstChild.firstChild : isMathML ? t.firstChild : t.content.firstChild;\n    };\n    const fn = isImportNode ? ()=>untrack(()=>document.importNode(node || (node = create()), true)) : ()=>(node || (node = create())).cloneNode(true);\n    fn.cloneNode = fn;\n    return fn;\n}\nfunction delegateEvents(eventNames, document2 = window.document) {\n    const e = document2[$$EVENTS] || (document2[$$EVENTS] = /* @__PURE__ */ new Set());\n    for(let i = 0, l = eventNames.length; i < l; i++){\n        const name = eventNames[i];\n        if (!e.has(name)) {\n            e.add(name);\n            document2.addEventListener(name, eventHandler);\n        }\n    }\n}\nfunction clearDelegatedEvents(document2 = window.document) {\n    if (document2[$$EVENTS]) {\n        for (let name of document2[$$EVENTS].keys())document2.removeEventListener(name, eventHandler);\n        delete document2[$$EVENTS];\n    }\n}\nfunction setAttribute(node, name, value) {\n    if (isHydrating(node)) return;\n    if (value == null) node.removeAttribute(name);\n    else node.setAttribute(name, value);\n}\nfunction setAttributeNS(node, namespace, name, value) {\n    if (isHydrating(node)) return;\n    if (value == null) node.removeAttributeNS(namespace, name);\n    else node.setAttributeNS(namespace, name, value);\n}\nfunction setBoolAttribute(node, name, value) {\n    if (isHydrating(node)) return;\n    value ? node.setAttribute(name, \"\") : node.removeAttribute(name);\n}\nfunction className(node, value) {\n    if (isHydrating(node)) return;\n    if (value == null) node.removeAttribute(\"class\");\n    else node.className = value;\n}\nfunction addEventListener(node, name, handler, delegate) {\n    if (delegate) {\n        if (Array.isArray(handler)) {\n            node[`$$${name}`] = handler[0];\n            node[`$$${name}Data`] = handler[1];\n        } else node[`$$${name}`] = handler;\n    } else if (Array.isArray(handler)) {\n        const handlerFn = handler[0];\n        node.addEventListener(name, handler[0] = (e)=>handlerFn.call(node, handler[1], e));\n    } else node.addEventListener(name, handler, typeof handler !== \"function\" && handler);\n}\nfunction classList(node, value, prev = {}) {\n    const classKeys = Object.keys(value || {}), prevKeys = Object.keys(prev);\n    let i, len;\n    for(i = 0, len = prevKeys.length; i < len; i++){\n        const key = prevKeys[i];\n        if (!key || key === \"undefined\" || value[key]) continue;\n        toggleClassKey(node, key, false);\n        delete prev[key];\n    }\n    for(i = 0, len = classKeys.length; i < len; i++){\n        const key = classKeys[i], classValue = !!value[key];\n        if (!key || key === \"undefined\" || prev[key] === classValue || !classValue) continue;\n        toggleClassKey(node, key, true);\n        prev[key] = classValue;\n    }\n    return prev;\n}\nfunction style(node, value, prev) {\n    if (!value) return prev ? setAttribute(node, \"style\") : value;\n    const nodeStyle = node.style;\n    if (typeof value === \"string\") return nodeStyle.cssText = value;\n    typeof prev === \"string\" && (nodeStyle.cssText = prev = void 0);\n    prev || (prev = {});\n    value || (value = {});\n    let v, s;\n    for(s in prev){\n        value[s] == null && nodeStyle.removeProperty(s);\n        delete prev[s];\n    }\n    for(s in value){\n        v = value[s];\n        if (v !== prev[s]) {\n            nodeStyle.setProperty(s, v);\n            prev[s] = v;\n        }\n    }\n    return prev;\n}\nfunction spread(node, props = {}, isSVG, skipChildren) {\n    const prevProps = {};\n    if (!skipChildren) {\n        createRenderEffect(()=>prevProps.children = insertExpression(node, props.children, prevProps.children));\n    }\n    createRenderEffect(()=>typeof props.ref === \"function\" && use(props.ref, node));\n    createRenderEffect(()=>assign(node, props, isSVG, true, prevProps, true));\n    return prevProps;\n}\nfunction use(fn, element, arg) {\n    return untrack(()=>fn(element, arg));\n}\nfunction insert(parent, accessor, marker, initial) {\n    if (marker !== void 0 && !initial) initial = [];\n    if (typeof accessor !== \"function\") return insertExpression(parent, accessor, initial, marker);\n    createRenderEffect((current)=>insertExpression(parent, accessor(), current, marker), initial);\n}\nfunction assign(node, props, isSVG, skipChildren, prevProps = {}, skipRef = false) {\n    props || (props = {});\n    for(const prop in prevProps){\n        if (!(prop in props)) {\n            if (prop === \"children\") continue;\n            prevProps[prop] = assignProp(node, prop, null, prevProps[prop], isSVG, skipRef, props);\n        }\n    }\n    for(const prop in props){\n        if (prop === \"children\") {\n            continue;\n        }\n        const value = props[prop];\n        prevProps[prop] = assignProp(node, prop, value, prevProps[prop], isSVG, skipRef, props);\n    }\n}\nfunction getNextElement(template2) {\n    let node, key, hydrating = isHydrating();\n    if (!hydrating || !(node = sharedConfig.registry.get(key = getHydrationKey()))) {\n        return template2();\n    }\n    if (sharedConfig.completed) sharedConfig.completed.add(node);\n    sharedConfig.registry.delete(key);\n    return node;\n}\nfunction isHydrating(node) {\n    return !!sharedConfig.context && !sharedConfig.done && (!node || node.isConnected);\n}\nfunction toPropertyName(name) {\n    return name.toLowerCase().replace(/-([a-z])/g, (_, w)=>w.toUpperCase());\n}\nfunction toggleClassKey(node, key, value) {\n    const classNames = key.trim().split(/\\s+/);\n    for(let i = 0, nameLen = classNames.length; i < nameLen; i++)node.classList.toggle(classNames[i], value);\n}\nfunction assignProp(node, prop, value, prev, isSVG, skipRef, props) {\n    let isCE, isProp, isChildProp, propAlias, forceProp;\n    if (prop === \"style\") return style(node, value, prev);\n    if (prop === \"classList\") return classList(node, value, prev);\n    if (value === prev) return prev;\n    if (prop === \"ref\") {\n        if (!skipRef) value(node);\n    } else if (prop.slice(0, 3) === \"on:\") {\n        const e = prop.slice(3);\n        prev && node.removeEventListener(e, prev, typeof prev !== \"function\" && prev);\n        value && node.addEventListener(e, value, typeof value !== \"function\" && value);\n    } else if (prop.slice(0, 10) === \"oncapture:\") {\n        const e = prop.slice(10);\n        prev && node.removeEventListener(e, prev, true);\n        value && node.addEventListener(e, value, true);\n    } else if (prop.slice(0, 2) === \"on\") {\n        const name = prop.slice(2).toLowerCase();\n        const delegate = DelegatedEvents.has(name);\n        if (!delegate && prev) {\n            const h = Array.isArray(prev) ? prev[0] : prev;\n            node.removeEventListener(name, h);\n        }\n        if (delegate || value) {\n            addEventListener(node, name, value, delegate);\n            delegate && delegateEvents([\n                name\n            ]);\n        }\n    } else if (prop.slice(0, 5) === \"attr:\") {\n        setAttribute(node, prop.slice(5), value);\n    } else if (prop.slice(0, 5) === \"bool:\") {\n        setBoolAttribute(node, prop.slice(5), value);\n    } else if ((forceProp = prop.slice(0, 5) === \"prop:\") || (isChildProp = ChildProperties.has(prop)) || !isSVG && ((propAlias = getPropAlias(prop, node.tagName)) || (isProp = Properties.has(prop))) || (isCE = node.nodeName.includes(\"-\") || \"is\" in props)) {\n        if (forceProp) {\n            prop = prop.slice(5);\n            isProp = true;\n        } else if (isHydrating(node)) return value;\n        if (prop === \"class\" || prop === \"className\") className(node, value);\n        else if (isCE && !isProp && !isChildProp) node[toPropertyName(prop)] = value;\n        else node[propAlias || prop] = value;\n    } else {\n        const ns = isSVG && prop.indexOf(\":\") > -1 && SVGNamespace[prop.split(\":\")[0]];\n        if (ns) setAttributeNS(node, ns, prop, value);\n        else setAttribute(node, Aliases[prop] || prop, value);\n    }\n    return value;\n}\nfunction eventHandler(e) {\n    if (sharedConfig.registry && sharedConfig.events) {\n        if (sharedConfig.events.find(([el, ev])=>ev === e)) return;\n    }\n    let node = e.target;\n    const key = `$$${e.type}`;\n    const oriTarget = e.target;\n    const oriCurrentTarget = e.currentTarget;\n    const retarget = (value)=>Object.defineProperty(e, \"target\", {\n            configurable: true,\n            value\n        });\n    const handleNode = ()=>{\n        const handler = node[key];\n        if (handler && !node.disabled) {\n            const data = node[`${key}Data`];\n            data !== void 0 ? handler.call(node, data, e) : handler.call(node, e);\n            if (e.cancelBubble) return;\n        }\n        node.host && typeof node.host !== \"string\" && !node.host._$host && node.contains(e.target) && retarget(node.host);\n        return true;\n    };\n    const walkUpTree = ()=>{\n        while(handleNode() && (node = node._$host || node.parentNode || node.host));\n    };\n    Object.defineProperty(e, \"currentTarget\", {\n        configurable: true,\n        get () {\n            return node || document;\n        }\n    });\n    if (sharedConfig.registry && !sharedConfig.done) sharedConfig.done = _$HY.done = true;\n    if (e.composedPath) {\n        const path = e.composedPath();\n        retarget(path[0]);\n        for(let i = 0; i < path.length - 2; i++){\n            node = path[i];\n            if (!handleNode()) break;\n            if (node._$host) {\n                node = node._$host;\n                walkUpTree();\n                break;\n            }\n            if (node.parentNode === oriCurrentTarget) {\n                break;\n            }\n        }\n    } else walkUpTree();\n    retarget(oriTarget);\n}\nfunction insertExpression(parent, value, current, marker, unwrapArray) {\n    const hydrating = isHydrating(parent);\n    if (hydrating) {\n        !current && (current = [\n            ...parent.childNodes\n        ]);\n        let cleaned = [];\n        for(let i = 0; i < current.length; i++){\n            const node = current[i];\n            if (node.nodeType === 8 && node.data.slice(0, 2) === \"!$\") node.remove();\n            else cleaned.push(node);\n        }\n        current = cleaned;\n    }\n    while(typeof current === \"function\")current = current();\n    if (value === current) return current;\n    const t = typeof value, multi = marker !== void 0;\n    parent = multi && current[0] && current[0].parentNode || parent;\n    if (t === \"string\" || t === \"number\") {\n        if (hydrating) return current;\n        if (t === \"number\") {\n            value = value.toString();\n            if (value === current) return current;\n        }\n        if (multi) {\n            let node = current[0];\n            if (node && node.nodeType === 3) {\n                node.data !== value && (node.data = value);\n            } else node = document.createTextNode(value);\n            current = cleanChildren(parent, current, marker, node);\n        } else {\n            if (current !== \"\" && typeof current === \"string\") {\n                current = parent.firstChild.data = value;\n            } else current = parent.textContent = value;\n        }\n    } else if (value == null || t === \"boolean\") {\n        if (hydrating) return current;\n        current = cleanChildren(parent, current, marker);\n    } else if (t === \"function\") {\n        createRenderEffect(()=>{\n            let v = value();\n            while(typeof v === \"function\")v = v();\n            current = insertExpression(parent, v, current, marker);\n        });\n        return ()=>current;\n    } else if (Array.isArray(value)) {\n        const array = [];\n        const currentArray = current && Array.isArray(current);\n        if (normalizeIncomingArray(array, value, current, unwrapArray)) {\n            createRenderEffect(()=>current = insertExpression(parent, array, current, marker, true));\n            return ()=>current;\n        }\n        if (hydrating) {\n            if (!array.length) return current;\n            if (marker === void 0) return current = [\n                ...parent.childNodes\n            ];\n            let node = array[0];\n            if (node.parentNode !== parent) return current;\n            const nodes = [\n                node\n            ];\n            while((node = node.nextSibling) !== marker)nodes.push(node);\n            return current = nodes;\n        }\n        if (array.length === 0) {\n            current = cleanChildren(parent, current, marker);\n            if (multi) return current;\n        } else if (currentArray) {\n            if (current.length === 0) {\n                appendNodes(parent, array, marker);\n            } else reconcileArrays(parent, current, array);\n        } else {\n            current && cleanChildren(parent);\n            appendNodes(parent, array);\n        }\n        current = array;\n    } else if (value.nodeType) {\n        if (hydrating && value.parentNode) return current = multi ? [\n            value\n        ] : value;\n        if (Array.isArray(current)) {\n            if (multi) return current = cleanChildren(parent, current, marker, value);\n            cleanChildren(parent, current, null, value);\n        } else if (current == null || current === \"\" || !parent.firstChild) {\n            parent.appendChild(value);\n        } else parent.replaceChild(value, parent.firstChild);\n        current = value;\n    } else ;\n    return current;\n}\nfunction normalizeIncomingArray(normalized, array, current, unwrap) {\n    let dynamic = false;\n    for(let i = 0, len = array.length; i < len; i++){\n        let item = array[i], prev = current && current[normalized.length], t;\n        if (item == null || item === true || item === false) ;\n        else if ((t = typeof item) === \"object\" && item.nodeType) {\n            normalized.push(item);\n        } else if (Array.isArray(item)) {\n            dynamic = normalizeIncomingArray(normalized, item, prev) || dynamic;\n        } else if (t === \"function\") {\n            if (unwrap) {\n                while(typeof item === \"function\")item = item();\n                dynamic = normalizeIncomingArray(normalized, Array.isArray(item) ? item : [\n                    item\n                ], Array.isArray(prev) ? prev : [\n                    prev\n                ]) || dynamic;\n            } else {\n                normalized.push(item);\n                dynamic = true;\n            }\n        } else {\n            const value = String(item);\n            if (prev && prev.nodeType === 3 && prev.data === value) normalized.push(prev);\n            else normalized.push(document.createTextNode(value));\n        }\n    }\n    return dynamic;\n}\nfunction appendNodes(parent, array, marker = null) {\n    for(let i = 0, len = array.length; i < len; i++)parent.insertBefore(array[i], marker);\n}\nfunction cleanChildren(parent, current, marker, replacement) {\n    if (marker === void 0) return parent.textContent = \"\";\n    const node = replacement || document.createTextNode(\"\");\n    if (current.length) {\n        let inserted = false;\n        for(let i = current.length - 1; i >= 0; i--){\n            const el = current[i];\n            if (node !== el) {\n                const isParent = el.parentNode === parent;\n                if (!inserted && !i) isParent ? parent.replaceChild(node, el) : parent.insertBefore(node, marker);\n                else isParent && el.remove();\n            } else inserted = true;\n        }\n    } else parent.insertBefore(node, marker);\n    return [\n        node\n    ];\n}\nfunction getHydrationKey() {\n    return sharedConfig.getNextContextId();\n}\nvar isServer = false;\nvar SVG_NAMESPACE = \"http://www.w3.org/2000/svg\";\nfunction createElement(tagName, isSVG = false) {\n    return isSVG ? document.createElementNS(SVG_NAMESPACE, tagName) : document.createElement(tagName);\n}\nfunction Portal(props) {\n    const { useShadow } = props, marker = document.createTextNode(\"\"), mount = ()=>props.mount || document.body, owner = getOwner();\n    let content;\n    let hydrating = !!sharedConfig.context;\n    createEffect(()=>{\n        if (hydrating) getOwner().user = hydrating = false;\n        content || (content = runWithOwner(owner, ()=>createMemo(()=>props.children)));\n        const el = mount();\n        if (el instanceof HTMLHeadElement) {\n            const [clean, setClean] = createSignal(false);\n            const cleanup = ()=>setClean(true);\n            createRoot((dispose2)=>insert(el, ()=>!clean() ? content() : dispose2(), null));\n            onCleanup(cleanup);\n        } else {\n            const container = createElement(props.isSVG ? \"g\" : \"div\", props.isSVG), renderRoot = useShadow && container.attachShadow ? container.attachShadow({\n                mode: \"open\"\n            }) : container;\n            Object.defineProperty(container, \"_$host\", {\n                get () {\n                    return marker.parentNode;\n                },\n                configurable: true\n            });\n            insert(renderRoot, content);\n            el.appendChild(container);\n            props.ref && props.ref(container);\n            onCleanup(()=>el.removeChild(container));\n        }\n    }, void 0, {\n        render: !hydrating\n    });\n    return marker;\n}\nfunction createDynamic(component, props) {\n    const cached = createMemo(component);\n    return createMemo(()=>{\n        const component2 = cached();\n        switch(typeof component2){\n            case \"function\":\n                return untrack(()=>component2(props));\n            case \"string\":\n                const isSvg = SVGElements.has(component2);\n                const el = sharedConfig.context ? getNextElement() : createElement(component2, isSvg);\n                spread(el, props, isSvg);\n                return el;\n        }\n    });\n}\nfunction Dynamic(props) {\n    const [, others] = splitProps(props, [\n        \"component\"\n    ]);\n    return createDynamic(()=>props.component, others);\n}\n// ../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/double-indexed-kv.js\nvar DoubleIndexedKV = class {\n    constructor(){\n        this.keyToValue = /* @__PURE__ */ new Map();\n        this.valueToKey = /* @__PURE__ */ new Map();\n    }\n    set(key, value) {\n        this.keyToValue.set(key, value);\n        this.valueToKey.set(value, key);\n    }\n    getByKey(key) {\n        return this.keyToValue.get(key);\n    }\n    getByValue(value) {\n        return this.valueToKey.get(value);\n    }\n    clear() {\n        this.keyToValue.clear();\n        this.valueToKey.clear();\n    }\n};\n// ../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/registry.js\nvar Registry = class {\n    constructor(generateIdentifier){\n        this.generateIdentifier = generateIdentifier;\n        this.kv = new DoubleIndexedKV();\n    }\n    register(value, identifier) {\n        if (this.kv.getByValue(value)) {\n            return;\n        }\n        if (!identifier) {\n            identifier = this.generateIdentifier(value);\n        }\n        this.kv.set(identifier, value);\n    }\n    clear() {\n        this.kv.clear();\n    }\n    getIdentifier(value) {\n        return this.kv.getByValue(value);\n    }\n    getValue(identifier) {\n        return this.kv.getByKey(identifier);\n    }\n};\n// ../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/class-registry.js\nvar ClassRegistry = class extends Registry {\n    constructor(){\n        super((c)=>c.name);\n        this.classToAllowedProps = /* @__PURE__ */ new Map();\n    }\n    register(value, options) {\n        if (typeof options === \"object\") {\n            if (options.allowProps) {\n                this.classToAllowedProps.set(value, options.allowProps);\n            }\n            super.register(value, options.identifier);\n        } else {\n            super.register(value, options);\n        }\n    }\n    getAllowedProps(value) {\n        return this.classToAllowedProps.get(value);\n    }\n};\n// ../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/util.js\nfunction valuesOfObj(record) {\n    if (\"values\" in Object) {\n        return Object.values(record);\n    }\n    const values = [];\n    for(const key in record){\n        if (record.hasOwnProperty(key)) {\n            values.push(record[key]);\n        }\n    }\n    return values;\n}\nfunction find(record, predicate) {\n    const values = valuesOfObj(record);\n    if (\"find\" in values) {\n        return values.find(predicate);\n    }\n    const valuesNotNever = values;\n    for(let i = 0; i < valuesNotNever.length; i++){\n        const value = valuesNotNever[i];\n        if (predicate(value)) {\n            return value;\n        }\n    }\n    return void 0;\n}\nfunction forEach(record, run) {\n    Object.entries(record).forEach(([key, value])=>run(value, key));\n}\nfunction includes(arr, value) {\n    return arr.indexOf(value) !== -1;\n}\nfunction findArr(record, predicate) {\n    for(let i = 0; i < record.length; i++){\n        const value = record[i];\n        if (predicate(value)) {\n            return value;\n        }\n    }\n    return void 0;\n}\n// ../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/custom-transformer-registry.js\nvar CustomTransformerRegistry = class {\n    constructor(){\n        this.transfomers = {};\n    }\n    register(transformer) {\n        this.transfomers[transformer.name] = transformer;\n    }\n    findApplicable(v) {\n        return find(this.transfomers, (transformer)=>transformer.isApplicable(v));\n    }\n    findByName(name) {\n        return this.transfomers[name];\n    }\n};\n// ../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/is.js\nvar getType = (payload)=>Object.prototype.toString.call(payload).slice(8, -1);\nvar isUndefined = (payload)=>typeof payload === \"undefined\";\nvar isNull = (payload)=>payload === null;\nvar isPlainObject = (payload)=>{\n    if (typeof payload !== \"object\" || payload === null) return false;\n    if (payload === Object.prototype) return false;\n    if (Object.getPrototypeOf(payload) === null) return true;\n    return Object.getPrototypeOf(payload) === Object.prototype;\n};\nvar isEmptyObject = (payload)=>isPlainObject(payload) && Object.keys(payload).length === 0;\nvar isArray = (payload)=>Array.isArray(payload);\nvar isString = (payload)=>typeof payload === \"string\";\nvar isNumber = (payload)=>typeof payload === \"number\" && !isNaN(payload);\nvar isBoolean = (payload)=>typeof payload === \"boolean\";\nvar isRegExp = (payload)=>payload instanceof RegExp;\nvar isMap = (payload)=>payload instanceof Map;\nvar isSet = (payload)=>payload instanceof Set;\nvar isSymbol = (payload)=>getType(payload) === \"Symbol\";\nvar isDate = (payload)=>payload instanceof Date && !isNaN(payload.valueOf());\nvar isError = (payload)=>payload instanceof Error;\nvar isNaNValue = (payload)=>typeof payload === \"number\" && isNaN(payload);\nvar isPrimitive = (payload)=>isBoolean(payload) || isNull(payload) || isUndefined(payload) || isNumber(payload) || isString(payload) || isSymbol(payload);\nvar isBigint = (payload)=>typeof payload === \"bigint\";\nvar isInfinite = (payload)=>payload === Infinity || payload === -Infinity;\nvar isTypedArray = (payload)=>ArrayBuffer.isView(payload) && !(payload instanceof DataView);\nvar isURL = (payload)=>payload instanceof URL;\n// ../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/pathstringifier.js\nvar escapeKey = (key)=>key.replace(/\\./g, \"\\\\.\");\nvar stringifyPath = (path)=>path.map(String).map(escapeKey).join(\".\");\nvar parsePath = (string)=>{\n    const result = [];\n    let segment = \"\";\n    for(let i = 0; i < string.length; i++){\n        let char = string.charAt(i);\n        const isEscapedDot = char === \"\\\\\" && string.charAt(i + 1) === \".\";\n        if (isEscapedDot) {\n            segment += \".\";\n            i++;\n            continue;\n        }\n        const isEndOfSegment = char === \".\";\n        if (isEndOfSegment) {\n            result.push(segment);\n            segment = \"\";\n            continue;\n        }\n        segment += char;\n    }\n    const lastSegment = segment;\n    result.push(lastSegment);\n    return result;\n};\n// ../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/transformer.js\nfunction simpleTransformation(isApplicable, annotation, transform, untransform) {\n    return {\n        isApplicable,\n        annotation,\n        transform,\n        untransform\n    };\n}\nvar simpleRules = [\n    simpleTransformation(isUndefined, \"undefined\", ()=>null, ()=>void 0),\n    simpleTransformation(isBigint, \"bigint\", (v)=>v.toString(), (v)=>{\n        if (typeof BigInt !== \"undefined\") {\n            return BigInt(v);\n        }\n        console.error(\"Please add a BigInt polyfill.\");\n        return v;\n    }),\n    simpleTransformation(isDate, \"Date\", (v)=>v.toISOString(), (v)=>new Date(v)),\n    simpleTransformation(isError, \"Error\", (v, superJson)=>{\n        const baseError = {\n            name: v.name,\n            message: v.message\n        };\n        superJson.allowedErrorProps.forEach((prop)=>{\n            baseError[prop] = v[prop];\n        });\n        return baseError;\n    }, (v, superJson)=>{\n        const e = new Error(v.message);\n        e.name = v.name;\n        e.stack = v.stack;\n        superJson.allowedErrorProps.forEach((prop)=>{\n            e[prop] = v[prop];\n        });\n        return e;\n    }),\n    simpleTransformation(isRegExp, \"regexp\", (v)=>\"\" + v, (regex)=>{\n        const body = regex.slice(1, regex.lastIndexOf(\"/\"));\n        const flags = regex.slice(regex.lastIndexOf(\"/\") + 1);\n        return new RegExp(body, flags);\n    }),\n    simpleTransformation(isSet, \"set\", // (sets only exist in es6+)\n    // eslint-disable-next-line es5/no-es6-methods\n    (v)=>[\n            ...v.values()\n        ], (v)=>new Set(v)),\n    simpleTransformation(isMap, \"map\", (v)=>[\n            ...v.entries()\n        ], (v)=>new Map(v)),\n    simpleTransformation((v)=>isNaNValue(v) || isInfinite(v), \"number\", (v)=>{\n        if (isNaNValue(v)) {\n            return \"NaN\";\n        }\n        if (v > 0) {\n            return \"Infinity\";\n        } else {\n            return \"-Infinity\";\n        }\n    }, Number),\n    simpleTransformation((v)=>v === 0 && 1 / v === -Infinity, \"number\", ()=>{\n        return \"-0\";\n    }, Number),\n    simpleTransformation(isURL, \"URL\", (v)=>v.toString(), (v)=>new URL(v))\n];\nfunction compositeTransformation(isApplicable, annotation, transform, untransform) {\n    return {\n        isApplicable,\n        annotation,\n        transform,\n        untransform\n    };\n}\nvar symbolRule = compositeTransformation((s, superJson)=>{\n    if (isSymbol(s)) {\n        const isRegistered = !!superJson.symbolRegistry.getIdentifier(s);\n        return isRegistered;\n    }\n    return false;\n}, (s, superJson)=>{\n    const identifier = superJson.symbolRegistry.getIdentifier(s);\n    return [\n        \"symbol\",\n        identifier\n    ];\n}, (v)=>v.description, (_, a, superJson)=>{\n    const value = superJson.symbolRegistry.getValue(a[1]);\n    if (!value) {\n        throw new Error(\"Trying to deserialize unknown symbol\");\n    }\n    return value;\n});\nvar constructorToName = [\n    Int8Array,\n    Uint8Array,\n    Int16Array,\n    Uint16Array,\n    Int32Array,\n    Uint32Array,\n    Float32Array,\n    Float64Array,\n    Uint8ClampedArray\n].reduce((obj, ctor)=>{\n    obj[ctor.name] = ctor;\n    return obj;\n}, {});\nvar typedArrayRule = compositeTransformation(isTypedArray, (v)=>[\n        \"typed-array\",\n        v.constructor.name\n    ], (v)=>[\n        ...v\n    ], (v, a)=>{\n    const ctor = constructorToName[a[1]];\n    if (!ctor) {\n        throw new Error(\"Trying to deserialize unknown typed array\");\n    }\n    return new ctor(v);\n});\nfunction isInstanceOfRegisteredClass(potentialClass, superJson) {\n    if (potentialClass?.constructor) {\n        const isRegistered = !!superJson.classRegistry.getIdentifier(potentialClass.constructor);\n        return isRegistered;\n    }\n    return false;\n}\nvar classRule = compositeTransformation(isInstanceOfRegisteredClass, (clazz, superJson)=>{\n    const identifier = superJson.classRegistry.getIdentifier(clazz.constructor);\n    return [\n        \"class\",\n        identifier\n    ];\n}, (clazz, superJson)=>{\n    const allowedProps = superJson.classRegistry.getAllowedProps(clazz.constructor);\n    if (!allowedProps) {\n        return {\n            ...clazz\n        };\n    }\n    const result = {};\n    allowedProps.forEach((prop)=>{\n        result[prop] = clazz[prop];\n    });\n    return result;\n}, (v, a, superJson)=>{\n    const clazz = superJson.classRegistry.getValue(a[1]);\n    if (!clazz) {\n        throw new Error(\"Trying to deserialize unknown class - check https://github.com/blitz-js/superjson/issues/116#issuecomment-773996564\");\n    }\n    return Object.assign(Object.create(clazz.prototype), v);\n});\nvar customRule = compositeTransformation((value, superJson)=>{\n    return !!superJson.customTransformerRegistry.findApplicable(value);\n}, (value, superJson)=>{\n    const transformer = superJson.customTransformerRegistry.findApplicable(value);\n    return [\n        \"custom\",\n        transformer.name\n    ];\n}, (value, superJson)=>{\n    const transformer = superJson.customTransformerRegistry.findApplicable(value);\n    return transformer.serialize(value);\n}, (v, a, superJson)=>{\n    const transformer = superJson.customTransformerRegistry.findByName(a[1]);\n    if (!transformer) {\n        throw new Error(\"Trying to deserialize unknown custom value\");\n    }\n    return transformer.deserialize(v);\n});\nvar compositeRules = [\n    classRule,\n    symbolRule,\n    customRule,\n    typedArrayRule\n];\nvar transformValue = (value, superJson)=>{\n    const applicableCompositeRule = findArr(compositeRules, (rule)=>rule.isApplicable(value, superJson));\n    if (applicableCompositeRule) {\n        return {\n            value: applicableCompositeRule.transform(value, superJson),\n            type: applicableCompositeRule.annotation(value, superJson)\n        };\n    }\n    const applicableSimpleRule = findArr(simpleRules, (rule)=>rule.isApplicable(value, superJson));\n    if (applicableSimpleRule) {\n        return {\n            value: applicableSimpleRule.transform(value, superJson),\n            type: applicableSimpleRule.annotation\n        };\n    }\n    return void 0;\n};\nvar simpleRulesByAnnotation = {};\nsimpleRules.forEach((rule)=>{\n    simpleRulesByAnnotation[rule.annotation] = rule;\n});\nvar untransformValue = (json, type, superJson)=>{\n    if (isArray(type)) {\n        switch(type[0]){\n            case \"symbol\":\n                return symbolRule.untransform(json, type, superJson);\n            case \"class\":\n                return classRule.untransform(json, type, superJson);\n            case \"custom\":\n                return customRule.untransform(json, type, superJson);\n            case \"typed-array\":\n                return typedArrayRule.untransform(json, type, superJson);\n            default:\n                throw new Error(\"Unknown transformation: \" + type);\n        }\n    } else {\n        const transformation = simpleRulesByAnnotation[type];\n        if (!transformation) {\n            throw new Error(\"Unknown transformation: \" + type);\n        }\n        return transformation.untransform(json, superJson);\n    }\n};\n// ../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/accessDeep.js\nvar getNthKey = (value, n)=>{\n    const keys = value.keys();\n    while(n > 0){\n        keys.next();\n        n--;\n    }\n    return keys.next().value;\n};\nfunction validatePath(path) {\n    if (includes(path, \"__proto__\")) {\n        throw new Error(\"__proto__ is not allowed as a property\");\n    }\n    if (includes(path, \"prototype\")) {\n        throw new Error(\"prototype is not allowed as a property\");\n    }\n    if (includes(path, \"constructor\")) {\n        throw new Error(\"constructor is not allowed as a property\");\n    }\n}\nvar getDeep = (object, path)=>{\n    validatePath(path);\n    for(let i = 0; i < path.length; i++){\n        const key = path[i];\n        if (isSet(object)) {\n            object = getNthKey(object, +key);\n        } else if (isMap(object)) {\n            const row = +key;\n            const type = +path[++i] === 0 ? \"key\" : \"value\";\n            const keyOfRow = getNthKey(object, row);\n            switch(type){\n                case \"key\":\n                    object = keyOfRow;\n                    break;\n                case \"value\":\n                    object = object.get(keyOfRow);\n                    break;\n            }\n        } else {\n            object = object[key];\n        }\n    }\n    return object;\n};\nvar setDeep = (object, path, mapper)=>{\n    validatePath(path);\n    if (path.length === 0) {\n        return mapper(object);\n    }\n    let parent = object;\n    for(let i = 0; i < path.length - 1; i++){\n        const key = path[i];\n        if (isArray(parent)) {\n            const index = +key;\n            parent = parent[index];\n        } else if (isPlainObject(parent)) {\n            parent = parent[key];\n        } else if (isSet(parent)) {\n            const row = +key;\n            parent = getNthKey(parent, row);\n        } else if (isMap(parent)) {\n            const isEnd = i === path.length - 2;\n            if (isEnd) {\n                break;\n            }\n            const row = +key;\n            const type = +path[++i] === 0 ? \"key\" : \"value\";\n            const keyOfRow = getNthKey(parent, row);\n            switch(type){\n                case \"key\":\n                    parent = keyOfRow;\n                    break;\n                case \"value\":\n                    parent = parent.get(keyOfRow);\n                    break;\n            }\n        }\n    }\n    const lastKey = path[path.length - 1];\n    if (isArray(parent)) {\n        parent[+lastKey] = mapper(parent[+lastKey]);\n    } else if (isPlainObject(parent)) {\n        parent[lastKey] = mapper(parent[lastKey]);\n    }\n    if (isSet(parent)) {\n        const oldValue = getNthKey(parent, +lastKey);\n        const newValue = mapper(oldValue);\n        if (oldValue !== newValue) {\n            parent.delete(oldValue);\n            parent.add(newValue);\n        }\n    }\n    if (isMap(parent)) {\n        const row = +path[path.length - 2];\n        const keyToRow = getNthKey(parent, row);\n        const type = +lastKey === 0 ? \"key\" : \"value\";\n        switch(type){\n            case \"key\":\n                {\n                    const newKey = mapper(keyToRow);\n                    parent.set(newKey, parent.get(keyToRow));\n                    if (newKey !== keyToRow) {\n                        parent.delete(keyToRow);\n                    }\n                    break;\n                }\n            case \"value\":\n                {\n                    parent.set(keyToRow, mapper(parent.get(keyToRow)));\n                    break;\n                }\n        }\n    }\n    return object;\n};\n// ../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/plainer.js\nfunction traverse(tree, walker2, origin = []) {\n    if (!tree) {\n        return;\n    }\n    if (!isArray(tree)) {\n        forEach(tree, (subtree, key)=>traverse(subtree, walker2, [\n                ...origin,\n                ...parsePath(key)\n            ]));\n        return;\n    }\n    const [nodeValue, children2] = tree;\n    if (children2) {\n        forEach(children2, (child, key)=>{\n            traverse(child, walker2, [\n                ...origin,\n                ...parsePath(key)\n            ]);\n        });\n    }\n    walker2(nodeValue, origin);\n}\nfunction applyValueAnnotations(plain, annotations, superJson) {\n    traverse(annotations, (type, path)=>{\n        plain = setDeep(plain, path, (v)=>untransformValue(v, type, superJson));\n    });\n    return plain;\n}\nfunction applyReferentialEqualityAnnotations(plain, annotations) {\n    function apply(identicalPaths, path) {\n        const object = getDeep(plain, parsePath(path));\n        identicalPaths.map(parsePath).forEach((identicalObjectPath)=>{\n            plain = setDeep(plain, identicalObjectPath, ()=>object);\n        });\n    }\n    if (isArray(annotations)) {\n        const [root, other] = annotations;\n        root.forEach((identicalPath)=>{\n            plain = setDeep(plain, parsePath(identicalPath), ()=>plain);\n        });\n        if (other) {\n            forEach(other, apply);\n        }\n    } else {\n        forEach(annotations, apply);\n    }\n    return plain;\n}\nvar isDeep = (object, superJson)=>isPlainObject(object) || isArray(object) || isMap(object) || isSet(object) || isInstanceOfRegisteredClass(object, superJson);\nfunction addIdentity(object, path, identities) {\n    const existingSet = identities.get(object);\n    if (existingSet) {\n        existingSet.push(path);\n    } else {\n        identities.set(object, [\n            path\n        ]);\n    }\n}\nfunction generateReferentialEqualityAnnotations(identitites, dedupe) {\n    const result = {};\n    let rootEqualityPaths = void 0;\n    identitites.forEach((paths)=>{\n        if (paths.length <= 1) {\n            return;\n        }\n        if (!dedupe) {\n            paths = paths.map((path)=>path.map(String)).sort((a, b)=>a.length - b.length);\n        }\n        const [representativePath, ...identicalPaths] = paths;\n        if (representativePath.length === 0) {\n            rootEqualityPaths = identicalPaths.map(stringifyPath);\n        } else {\n            result[stringifyPath(representativePath)] = identicalPaths.map(stringifyPath);\n        }\n    });\n    if (rootEqualityPaths) {\n        if (isEmptyObject(result)) {\n            return [\n                rootEqualityPaths\n            ];\n        } else {\n            return [\n                rootEqualityPaths,\n                result\n            ];\n        }\n    } else {\n        return isEmptyObject(result) ? void 0 : result;\n    }\n}\nvar walker = (object, identities, superJson, dedupe, path = [], objectsInThisPath = [], seenObjects = /* @__PURE__ */ new Map())=>{\n    const primitive = isPrimitive(object);\n    if (!primitive) {\n        addIdentity(object, path, identities);\n        const seen = seenObjects.get(object);\n        if (seen) {\n            return dedupe ? {\n                transformedValue: null\n            } : seen;\n        }\n    }\n    if (!isDeep(object, superJson)) {\n        const transformed2 = transformValue(object, superJson);\n        const result2 = transformed2 ? {\n            transformedValue: transformed2.value,\n            annotations: [\n                transformed2.type\n            ]\n        } : {\n            transformedValue: object\n        };\n        if (!primitive) {\n            seenObjects.set(object, result2);\n        }\n        return result2;\n    }\n    if (includes(objectsInThisPath, object)) {\n        return {\n            transformedValue: null\n        };\n    }\n    const transformationResult = transformValue(object, superJson);\n    const transformed = transformationResult?.value ?? object;\n    const transformedValue = isArray(transformed) ? [] : {};\n    const innerAnnotations = {};\n    forEach(transformed, (value, index)=>{\n        if (index === \"__proto__\" || index === \"constructor\" || index === \"prototype\") {\n            throw new Error(`Detected property ${index}. This is a prototype pollution risk, please remove it from your object.`);\n        }\n        const recursiveResult = walker(value, identities, superJson, dedupe, [\n            ...path,\n            index\n        ], [\n            ...objectsInThisPath,\n            object\n        ], seenObjects);\n        transformedValue[index] = recursiveResult.transformedValue;\n        if (isArray(recursiveResult.annotations)) {\n            innerAnnotations[index] = recursiveResult.annotations;\n        } else if (isPlainObject(recursiveResult.annotations)) {\n            forEach(recursiveResult.annotations, (tree, key)=>{\n                innerAnnotations[escapeKey(index) + \".\" + key] = tree;\n            });\n        }\n    });\n    const result = isEmptyObject(innerAnnotations) ? {\n        transformedValue,\n        annotations: !!transformationResult ? [\n            transformationResult.type\n        ] : void 0\n    } : {\n        transformedValue,\n        annotations: !!transformationResult ? [\n            transformationResult.type,\n            innerAnnotations\n        ] : innerAnnotations\n    };\n    if (!primitive) {\n        seenObjects.set(object, result);\n    }\n    return result;\n};\n// ../../node_modules/.pnpm/is-what@4.1.16/node_modules/is-what/dist/index.js\nfunction getType2(payload) {\n    return Object.prototype.toString.call(payload).slice(8, -1);\n}\nfunction isArray2(payload) {\n    return getType2(payload) === \"Array\";\n}\nfunction isPlainObject2(payload) {\n    if (getType2(payload) !== \"Object\") return false;\n    const prototype = Object.getPrototypeOf(payload);\n    return !!prototype && prototype.constructor === Object && prototype === Object.prototype;\n}\n// ../../node_modules/.pnpm/copy-anything@3.0.5/node_modules/copy-anything/dist/index.js\nfunction assignProp2(carry, key, newVal, originalObject, includeNonenumerable) {\n    const propType = ({}).propertyIsEnumerable.call(originalObject, key) ? \"enumerable\" : \"nonenumerable\";\n    if (propType === \"enumerable\") carry[key] = newVal;\n    if (includeNonenumerable && propType === \"nonenumerable\") {\n        Object.defineProperty(carry, key, {\n            value: newVal,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        });\n    }\n}\nfunction copy(target, options = {}) {\n    if (isArray2(target)) {\n        return target.map((item)=>copy(item, options));\n    }\n    if (!isPlainObject2(target)) {\n        return target;\n    }\n    const props = Object.getOwnPropertyNames(target);\n    const symbols = Object.getOwnPropertySymbols(target);\n    return [\n        ...props,\n        ...symbols\n    ].reduce((carry, key)=>{\n        if (isArray2(options.props) && !options.props.includes(key)) {\n            return carry;\n        }\n        const val = target[key];\n        const newVal = copy(val, options);\n        assignProp2(carry, key, newVal, target, options.nonenumerable);\n        return carry;\n    }, {});\n}\n// ../../node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/index.js\nvar SuperJSON = class {\n    /**\n   * @param dedupeReferentialEqualities  If true, SuperJSON will make sure only one instance of referentially equal objects are serialized and the rest are replaced with `null`.\n   */ constructor({ dedupe = false } = {}){\n        this.classRegistry = new ClassRegistry();\n        this.symbolRegistry = new Registry((s)=>s.description ?? \"\");\n        this.customTransformerRegistry = new CustomTransformerRegistry();\n        this.allowedErrorProps = [];\n        this.dedupe = dedupe;\n    }\n    serialize(object) {\n        const identities = /* @__PURE__ */ new Map();\n        const output = walker(object, identities, this, this.dedupe);\n        const res = {\n            json: output.transformedValue\n        };\n        if (output.annotations) {\n            res.meta = {\n                ...res.meta,\n                values: output.annotations\n            };\n        }\n        const equalityAnnotations = generateReferentialEqualityAnnotations(identities, this.dedupe);\n        if (equalityAnnotations) {\n            res.meta = {\n                ...res.meta,\n                referentialEqualities: equalityAnnotations\n            };\n        }\n        return res;\n    }\n    deserialize(payload) {\n        const { json, meta } = payload;\n        let result = copy(json);\n        if (meta?.values) {\n            result = applyValueAnnotations(result, meta.values, this);\n        }\n        if (meta?.referentialEqualities) {\n            result = applyReferentialEqualityAnnotations(result, meta.referentialEqualities);\n        }\n        return result;\n    }\n    stringify(object) {\n        return JSON.stringify(this.serialize(object));\n    }\n    parse(string) {\n        return this.deserialize(JSON.parse(string));\n    }\n    registerClass(v, options) {\n        this.classRegistry.register(v, options);\n    }\n    registerSymbol(v, identifier) {\n        this.symbolRegistry.register(v, identifier);\n    }\n    registerCustom(transformer, name) {\n        this.customTransformerRegistry.register({\n            name,\n            ...transformer\n        });\n    }\n    allowErrorProps(...props) {\n        this.allowedErrorProps.push(...props);\n    }\n};\nSuperJSON.defaultInstance = new SuperJSON();\nSuperJSON.serialize = SuperJSON.defaultInstance.serialize.bind(SuperJSON.defaultInstance);\nSuperJSON.deserialize = SuperJSON.defaultInstance.deserialize.bind(SuperJSON.defaultInstance);\nSuperJSON.stringify = SuperJSON.defaultInstance.stringify.bind(SuperJSON.defaultInstance);\nSuperJSON.parse = SuperJSON.defaultInstance.parse.bind(SuperJSON.defaultInstance);\nSuperJSON.registerClass = SuperJSON.defaultInstance.registerClass.bind(SuperJSON.defaultInstance);\nSuperJSON.registerSymbol = SuperJSON.defaultInstance.registerSymbol.bind(SuperJSON.defaultInstance);\nSuperJSON.registerCustom = SuperJSON.defaultInstance.registerCustom.bind(SuperJSON.defaultInstance);\nSuperJSON.allowErrorProps = SuperJSON.defaultInstance.allowErrorProps.bind(SuperJSON.defaultInstance);\nvar serialize = SuperJSON.serialize;\nSuperJSON.deserialize;\nvar stringify = SuperJSON.stringify;\nSuperJSON.parse;\nSuperJSON.registerClass;\nSuperJSON.registerCustom;\nSuperJSON.registerSymbol;\nSuperJSON.allowErrorProps;\n// src/utils.tsx\nfunction getQueryStatusLabel(query) {\n    return query.state.fetchStatus === \"fetching\" ? \"fetching\" : !query.getObserversCount() ? \"inactive\" : query.state.fetchStatus === \"paused\" ? \"paused\" : query.isStale() ? \"stale\" : \"fresh\";\n}\nfunction getSidedProp(prop, side) {\n    return `${prop}${side.charAt(0).toUpperCase() + side.slice(1)}`;\n}\nfunction getQueryStatusColor({ queryState, observerCount, isStale }) {\n    return queryState.fetchStatus === \"fetching\" ? \"blue\" : !observerCount ? \"gray\" : queryState.fetchStatus === \"paused\" ? \"purple\" : isStale ? \"yellow\" : \"green\";\n}\nfunction getMutationStatusColor({ status, isPaused }) {\n    return isPaused ? \"purple\" : status === \"error\" ? \"red\" : status === \"pending\" ? \"yellow\" : status === \"success\" ? \"green\" : \"gray\";\n}\nfunction getQueryStatusColorByLabel(label) {\n    return label === \"fresh\" ? \"green\" : label === \"stale\" ? \"yellow\" : label === \"paused\" ? \"purple\" : label === \"inactive\" ? \"gray\" : \"blue\";\n}\nvar displayValue = (value, beautify = false)=>{\n    const { json } = serialize(value);\n    return JSON.stringify(json, null, beautify ? 2 : void 0);\n};\nvar getStatusRank = (q)=>q.state.fetchStatus !== \"idle\" ? 0 : !q.getObserversCount() ? 3 : q.isStale() ? 2 : 1;\nvar queryHashSort = (a, b)=>a.queryHash.localeCompare(b.queryHash);\nvar dateSort = (a, b)=>a.state.dataUpdatedAt < b.state.dataUpdatedAt ? 1 : -1;\nvar statusAndDateSort = (a, b)=>{\n    if (getStatusRank(a) === getStatusRank(b)) {\n        return dateSort(a, b);\n    }\n    return getStatusRank(a) > getStatusRank(b) ? 1 : -1;\n};\nvar sortFns = {\n    status: statusAndDateSort,\n    \"query hash\": queryHashSort,\n    \"last updated\": dateSort\n};\nvar getMutationStatusRank = (m)=>m.state.isPaused ? 0 : m.state.status === \"error\" ? 2 : m.state.status === \"pending\" ? 1 : 3;\nvar mutationDateSort = (a, b)=>a.state.submittedAt < b.state.submittedAt ? 1 : -1;\nvar mutationStatusSort = (a, b)=>{\n    if (getMutationStatusRank(a) === getMutationStatusRank(b)) {\n        return mutationDateSort(a, b);\n    }\n    return getMutationStatusRank(a) > getMutationStatusRank(b) ? 1 : -1;\n};\nvar mutationSortFns = {\n    status: mutationStatusSort,\n    \"last updated\": mutationDateSort\n};\nvar convertRemToPixels = (rem)=>{\n    return rem * parseFloat(getComputedStyle(document.documentElement).fontSize);\n};\nvar getPreferredColorScheme = ()=>{\n    const [colorScheme, setColorScheme] = createSignal(\"dark\");\n    onMount(()=>{\n        const query = window.matchMedia(\"(prefers-color-scheme: dark)\");\n        setColorScheme(query.matches ? \"dark\" : \"light\");\n        const listener = (e)=>{\n            setColorScheme(e.matches ? \"dark\" : \"light\");\n        };\n        query.addEventListener(\"change\", listener);\n        onCleanup(()=>query.removeEventListener(\"change\", listener));\n    });\n    return colorScheme;\n};\nvar updateNestedDataByPath = (oldData, updatePath, value)=>{\n    if (updatePath.length === 0) {\n        return value;\n    }\n    if (oldData instanceof Map) {\n        const newData = new Map(oldData);\n        if (updatePath.length === 1) {\n            newData.set(updatePath[0], value);\n            return newData;\n        }\n        const [head, ...tail] = updatePath;\n        newData.set(head, updateNestedDataByPath(newData.get(head), tail, value));\n        return newData;\n    }\n    if (oldData instanceof Set) {\n        const setAsArray = updateNestedDataByPath(Array.from(oldData), updatePath, value);\n        return new Set(setAsArray);\n    }\n    if (Array.isArray(oldData)) {\n        const newData = [\n            ...oldData\n        ];\n        if (updatePath.length === 1) {\n            newData[updatePath[0]] = value;\n            return newData;\n        }\n        const [head, ...tail] = updatePath;\n        newData[head] = updateNestedDataByPath(newData[head], tail, value);\n        return newData;\n    }\n    if (oldData instanceof Object) {\n        const newData = {\n            ...oldData\n        };\n        if (updatePath.length === 1) {\n            newData[updatePath[0]] = value;\n            return newData;\n        }\n        const [head, ...tail] = updatePath;\n        newData[head] = updateNestedDataByPath(newData[head], tail, value);\n        return newData;\n    }\n    return oldData;\n};\nvar deleteNestedDataByPath = (oldData, deletePath)=>{\n    if (oldData instanceof Map) {\n        const newData = new Map(oldData);\n        if (deletePath.length === 1) {\n            newData.delete(deletePath[0]);\n            return newData;\n        }\n        const [head, ...tail] = deletePath;\n        newData.set(head, deleteNestedDataByPath(newData.get(head), tail));\n        return newData;\n    }\n    if (oldData instanceof Set) {\n        const setAsArray = deleteNestedDataByPath(Array.from(oldData), deletePath);\n        return new Set(setAsArray);\n    }\n    if (Array.isArray(oldData)) {\n        const newData = [\n            ...oldData\n        ];\n        if (deletePath.length === 1) {\n            return newData.filter((_, idx)=>idx.toString() !== deletePath[0]);\n        }\n        const [head, ...tail] = deletePath;\n        newData[head] = deleteNestedDataByPath(newData[head], tail);\n        return newData;\n    }\n    if (oldData instanceof Object) {\n        const newData = {\n            ...oldData\n        };\n        if (deletePath.length === 1) {\n            delete newData[deletePath[0]];\n            return newData;\n        }\n        const [head, ...tail] = deletePath;\n        newData[head] = deleteNestedDataByPath(newData[head], tail);\n        return newData;\n    }\n    return oldData;\n};\nvar setupStyleSheet = (nonce, target)=>{\n    if (!nonce) return;\n    const styleExists = document.querySelector(\"#_goober\") || target?.querySelector(\"#_goober\");\n    if (styleExists) return;\n    const styleTag = document.createElement(\"style\");\n    const textNode = document.createTextNode(\"\");\n    styleTag.appendChild(textNode);\n    styleTag.id = \"_goober\";\n    styleTag.setAttribute(\"nonce\", nonce);\n    if (target) {\n        target.appendChild(styleTag);\n    } else {\n        document.head.appendChild(styleTag);\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-devtools/build/chunk/V5T5VJKG.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-devtools/build/dev.js":
/*!************************************************************!*\
  !*** ./node_modules/@tanstack/query-devtools/build/dev.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TanstackQueryDevtools: () => (/* binding */ TanstackQueryDevtools),\n/* harmony export */   TanstackQueryDevtoolsPanel: () => (/* binding */ TanstackQueryDevtoolsPanel)\n/* harmony export */ });\n/* harmony import */ var _chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk/V5T5VJKG.js */ \"(ssr)/./node_modules/@tanstack/query-devtools/build/chunk/V5T5VJKG.js\");\n\n// src/TanstackQueryDevtools.tsx\nvar TanstackQueryDevtools = class {\n    #client;\n    #onlineManager;\n    #queryFlavor;\n    #version;\n    #isMounted;\n    #styleNonce;\n    #shadowDOMTarget;\n    #buttonPosition;\n    #position;\n    #initialIsOpen;\n    #errorTypes;\n    #Component;\n    #dispose;\n    constructor(config){\n        this.#isMounted = false;\n        const { client, queryFlavor, version, onlineManager, buttonPosition, position, initialIsOpen, errorTypes, styleNonce, shadowDOMTarget } = config;\n        this.#client = (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(client);\n        this.#queryFlavor = queryFlavor;\n        this.#version = version;\n        this.#onlineManager = onlineManager;\n        this.#styleNonce = styleNonce;\n        this.#shadowDOMTarget = shadowDOMTarget;\n        this.#buttonPosition = (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(buttonPosition);\n        this.#position = (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(position);\n        this.#initialIsOpen = (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(initialIsOpen);\n        this.#errorTypes = (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(errorTypes);\n    }\n    setButtonPosition(position) {\n        this.#buttonPosition[1](position);\n    }\n    setPosition(position) {\n        this.#position[1](position);\n    }\n    setInitialIsOpen(isOpen) {\n        this.#initialIsOpen[1](isOpen);\n    }\n    setErrorTypes(errorTypes) {\n        this.#errorTypes[1](errorTypes);\n    }\n    setClient(client) {\n        this.#client[1](client);\n    }\n    mount(el) {\n        if (this.#isMounted) {\n            throw new Error(\"Devtools is already mounted\");\n        }\n        const dispose = (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.render)(()=>{\n            const _self$ = this;\n            const [btnPosition] = this.#buttonPosition;\n            const [pos] = this.#position;\n            const [isOpen] = this.#initialIsOpen;\n            const [errors] = this.#errorTypes;\n            const [queryClient] = this.#client;\n            let Devtools;\n            if (this.#Component) {\n                Devtools = this.#Component;\n            } else {\n                Devtools = (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.lazy)(()=>__webpack_require__.e(/*! import() */ \"vendor-chunks/@tanstack\").then(__webpack_require__.bind(__webpack_require__, /*! ./DevtoolsComponent/SUXNJKMM.js */ \"(ssr)/./node_modules/@tanstack/query-devtools/build/DevtoolsComponent/SUXNJKMM.js\")));\n                this.#Component = Devtools;\n            }\n            (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setupStyleSheet)(this.#styleNonce, this.#shadowDOMTarget);\n            return (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Devtools, (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n                get queryFlavor () {\n                    return _self$.#queryFlavor;\n                },\n                get version () {\n                    return _self$.#version;\n                },\n                get onlineManager () {\n                    return _self$.#onlineManager;\n                },\n                get shadowDOMTarget () {\n                    return _self$.#shadowDOMTarget;\n                }\n            }, {\n                get client () {\n                    return queryClient();\n                },\n                get buttonPosition () {\n                    return btnPosition();\n                },\n                get position () {\n                    return pos();\n                },\n                get initialIsOpen () {\n                    return isOpen();\n                },\n                get errorTypes () {\n                    return errors();\n                }\n            }));\n        }, el);\n        this.#isMounted = true;\n        this.#dispose = dispose;\n    }\n    unmount() {\n        if (!this.#isMounted) {\n            throw new Error(\"Devtools is not mounted\");\n        }\n        this.#dispose?.();\n        this.#isMounted = false;\n    }\n};\n// src/TanstackQueryDevtoolsPanel.tsx\nvar TanstackQueryDevtoolsPanel = class {\n    #client;\n    #onlineManager;\n    #queryFlavor;\n    #version;\n    #isMounted;\n    #styleNonce;\n    #shadowDOMTarget;\n    #buttonPosition;\n    #position;\n    #initialIsOpen;\n    #errorTypes;\n    #onClose;\n    #Component;\n    #dispose;\n    constructor(config){\n        this.#isMounted = false;\n        const { client, queryFlavor, version, onlineManager, buttonPosition, position, initialIsOpen, errorTypes, styleNonce, shadowDOMTarget, onClose } = config;\n        this.#client = (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(client);\n        this.#queryFlavor = queryFlavor;\n        this.#version = version;\n        this.#onlineManager = onlineManager;\n        this.#styleNonce = styleNonce;\n        this.#shadowDOMTarget = shadowDOMTarget;\n        this.#buttonPosition = (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(buttonPosition);\n        this.#position = (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(position);\n        this.#initialIsOpen = (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(initialIsOpen);\n        this.#errorTypes = (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(errorTypes);\n        this.#onClose = (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(onClose);\n    }\n    setButtonPosition(position) {\n        this.#buttonPosition[1](position);\n    }\n    setPosition(position) {\n        this.#position[1](position);\n    }\n    setInitialIsOpen(isOpen) {\n        this.#initialIsOpen[1](isOpen);\n    }\n    setErrorTypes(errorTypes) {\n        this.#errorTypes[1](errorTypes);\n    }\n    setClient(client) {\n        this.#client[1](client);\n    }\n    setOnClose(onClose) {\n        this.#onClose[1](()=>onClose);\n    }\n    mount(el) {\n        if (this.#isMounted) {\n            throw new Error(\"Devtools is already mounted\");\n        }\n        const dispose = (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.render)(()=>{\n            const _self$ = this;\n            const [btnPosition] = this.#buttonPosition;\n            const [pos] = this.#position;\n            const [isOpen] = this.#initialIsOpen;\n            const [errors] = this.#errorTypes;\n            const [queryClient] = this.#client;\n            const [onClose] = this.#onClose;\n            let Devtools;\n            if (this.#Component) {\n                Devtools = this.#Component;\n            } else {\n                Devtools = (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.lazy)(()=>__webpack_require__.e(/*! import() */ \"vendor-chunks/@tanstack\").then(__webpack_require__.bind(__webpack_require__, /*! ./DevtoolsPanelComponent/LDUQ2GE4.js */ \"(ssr)/./node_modules/@tanstack/query-devtools/build/DevtoolsPanelComponent/LDUQ2GE4.js\")));\n                this.#Component = Devtools;\n            }\n            (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.setupStyleSheet)(this.#styleNonce, this.#shadowDOMTarget);\n            return (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Devtools, (0,_chunk_V5T5VJKG_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n                get queryFlavor () {\n                    return _self$.#queryFlavor;\n                },\n                get version () {\n                    return _self$.#version;\n                },\n                get onlineManager () {\n                    return _self$.#onlineManager;\n                },\n                get shadowDOMTarget () {\n                    return _self$.#shadowDOMTarget;\n                }\n            }, {\n                get client () {\n                    return queryClient();\n                },\n                get buttonPosition () {\n                    return btnPosition();\n                },\n                get position () {\n                    return pos();\n                },\n                get initialIsOpen () {\n                    return isOpen();\n                },\n                get errorTypes () {\n                    return errors();\n                },\n                get onClose () {\n                    return onClose();\n                }\n            }));\n        }, el);\n        this.#isMounted = true;\n        this.#dispose = dispose;\n    }\n    unmount() {\n        if (!this.#isMounted) {\n            throw new Error(\"Devtools is not mounted\");\n        }\n        this.#dispose?.();\n        this.#isMounted = false;\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWRldnRvb2xzL2J1aWxkL2Rldi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBK0c7QUFFL0csZ0NBQWdDO0FBQ2hDLElBQUlNLHdCQUF3QjtJQUMxQixDQUFDQyxNQUFNLENBQUM7SUFDUixDQUFDQyxhQUFhLENBQUM7SUFDZixDQUFDQyxXQUFXLENBQUM7SUFDYixDQUFDQyxPQUFPLENBQUM7SUFDVCxDQUFDQyxTQUFTLENBQVM7SUFDbkIsQ0FBQ0MsVUFBVSxDQUFDO0lBQ1osQ0FBQ0MsZUFBZSxDQUFDO0lBQ2pCLENBQUNDLGNBQWMsQ0FBQztJQUNoQixDQUFDQyxRQUFRLENBQUM7SUFDVixDQUFDQyxhQUFhLENBQUM7SUFDZixDQUFDQyxVQUFVLENBQUM7SUFDWixDQUFDQyxTQUFTLENBQUM7SUFDWCxDQUFDQyxPQUFPLENBQUM7SUFDVEMsWUFBWUMsTUFBTSxDQUFFO2FBVHBCLENBQUNWLFNBQVMsR0FBRztRQVVYLE1BQU0sRUFDSkosTUFBTSxFQUNORSxXQUFXLEVBQ1hDLE9BQU8sRUFDUEYsYUFBYSxFQUNiTSxjQUFjLEVBQ2RDLFFBQVEsRUFDUkMsYUFBYSxFQUNiQyxVQUFVLEVBQ1ZMLFVBQVUsRUFDVkMsZUFBZSxFQUNoQixHQUFHUTtRQUNKLElBQUksQ0FBQyxDQUFDZCxNQUFNLEdBQUdQLGdFQUFZQSxDQUFDTztRQUM1QixJQUFJLENBQUMsQ0FBQ0UsV0FBVyxHQUFHQTtRQUNwQixJQUFJLENBQUMsQ0FBQ0MsT0FBTyxHQUFHQTtRQUNoQixJQUFJLENBQUMsQ0FBQ0YsYUFBYSxHQUFHQTtRQUN0QixJQUFJLENBQUMsQ0FBQ0ksVUFBVSxHQUFHQTtRQUNuQixJQUFJLENBQUMsQ0FBQ0MsZUFBZSxHQUFHQTtRQUN4QixJQUFJLENBQUMsQ0FBQ0MsY0FBYyxHQUFHZCxnRUFBWUEsQ0FBQ2M7UUFDcEMsSUFBSSxDQUFDLENBQUNDLFFBQVEsR0FBR2YsZ0VBQVlBLENBQUNlO1FBQzlCLElBQUksQ0FBQyxDQUFDQyxhQUFhLEdBQUdoQixnRUFBWUEsQ0FBQ2dCO1FBQ25DLElBQUksQ0FBQyxDQUFDQyxVQUFVLEdBQUdqQixnRUFBWUEsQ0FBQ2lCO0lBQ2xDO0lBQ0FLLGtCQUFrQlAsUUFBUSxFQUFFO1FBQzFCLElBQUksQ0FBQyxDQUFDRCxjQUFjLENBQUMsRUFBRSxDQUFDQztJQUMxQjtJQUNBUSxZQUFZUixRQUFRLEVBQUU7UUFDcEIsSUFBSSxDQUFDLENBQUNBLFFBQVEsQ0FBQyxFQUFFLENBQUNBO0lBQ3BCO0lBQ0FTLGlCQUFpQkMsTUFBTSxFQUFFO1FBQ3ZCLElBQUksQ0FBQyxDQUFDVCxhQUFhLENBQUMsRUFBRSxDQUFDUztJQUN6QjtJQUNBQyxjQUFjVCxVQUFVLEVBQUU7UUFDeEIsSUFBSSxDQUFDLENBQUNBLFVBQVUsQ0FBQyxFQUFFLENBQUNBO0lBQ3RCO0lBQ0FVLFVBQVVwQixNQUFNLEVBQUU7UUFDaEIsSUFBSSxDQUFDLENBQUNBLE1BQU0sQ0FBQyxFQUFFLENBQUNBO0lBQ2xCO0lBQ0FxQixNQUFNQyxFQUFFLEVBQUU7UUFDUixJQUFJLElBQUksQ0FBQyxDQUFDbEIsU0FBUyxFQUFFO1lBQ25CLE1BQU0sSUFBSW1CLE1BQU07UUFDbEI7UUFDQSxNQUFNWCxVQUFVbEIsMERBQU1BLENBQUM7WUFDckIsTUFBTThCLFNBQVMsSUFBSTtZQUNuQixNQUFNLENBQUNDLFlBQVksR0FBRyxJQUFJLENBQUMsQ0FBQ2xCLGNBQWM7WUFDMUMsTUFBTSxDQUFDbUIsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDbEIsUUFBUTtZQUM1QixNQUFNLENBQUNVLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQ1QsYUFBYTtZQUNwQyxNQUFNLENBQUNrQixPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUNqQixVQUFVO1lBQ2pDLE1BQU0sQ0FBQ2tCLFlBQVksR0FBRyxJQUFJLENBQUMsQ0FBQzVCLE1BQU07WUFDbEMsSUFBSTZCO1lBQ0osSUFBSSxJQUFJLENBQUMsQ0FBQ2xCLFNBQVMsRUFBRTtnQkFDbkJrQixXQUFXLElBQUksQ0FBQyxDQUFDbEIsU0FBUztZQUM1QixPQUFPO2dCQUNMa0IsV0FBV2xDLHdEQUFJQSxDQUFDLElBQU0sZ1BBQU87Z0JBQzdCLElBQUksQ0FBQyxDQUFDZ0IsU0FBUyxHQUFHa0I7WUFDcEI7WUFDQWpDLG1FQUFlQSxDQUFDLElBQUksQ0FBQyxDQUFDUyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUNDLGVBQWU7WUFDdkQsT0FBT1QsbUVBQWVBLENBQUNnQyxVQUFVL0IsOERBQVVBLENBQUM7Z0JBQzFDLElBQUlJLGVBQWM7b0JBQ2hCLE9BQU9zQixPQUFPLENBQUN0QixXQUFXO2dCQUM1QjtnQkFDQSxJQUFJQyxXQUFVO29CQUNaLE9BQU9xQixPQUFPLENBQUNyQixPQUFPO2dCQUN4QjtnQkFDQSxJQUFJRixpQkFBZ0I7b0JBQ2xCLE9BQU91QixPQUFPLENBQUN2QixhQUFhO2dCQUM5QjtnQkFDQSxJQUFJSyxtQkFBa0I7b0JBQ3BCLE9BQU9rQixPQUFPLENBQUNsQixlQUFlO2dCQUNoQztZQUNGLEdBQUc7Z0JBQ0QsSUFBSU4sVUFBUztvQkFDWCxPQUFPNEI7Z0JBQ1Q7Z0JBQ0EsSUFBSXJCLGtCQUFpQjtvQkFDbkIsT0FBT2tCO2dCQUNUO2dCQUNBLElBQUlqQixZQUFXO29CQUNiLE9BQU9rQjtnQkFDVDtnQkFDQSxJQUFJakIsaUJBQWdCO29CQUNsQixPQUFPUztnQkFDVDtnQkFDQSxJQUFJUixjQUFhO29CQUNmLE9BQU9pQjtnQkFDVDtZQUNGO1FBQ0YsR0FBR0w7UUFDSCxJQUFJLENBQUMsQ0FBQ2xCLFNBQVMsR0FBRztRQUNsQixJQUFJLENBQUMsQ0FBQ1EsT0FBTyxHQUFHQTtJQUNsQjtJQUNBa0IsVUFBVTtRQUNSLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzFCLFNBQVMsRUFBRTtZQUNwQixNQUFNLElBQUltQixNQUFNO1FBQ2xCO1FBQ0EsSUFBSSxDQUFDLENBQUNYLE9BQU87UUFDYixJQUFJLENBQUMsQ0FBQ1IsU0FBUyxHQUFHO0lBQ3BCO0FBQ0Y7QUFFQSxxQ0FBcUM7QUFDckMsSUFBSTJCLDZCQUE2QjtJQUMvQixDQUFDL0IsTUFBTSxDQUFDO0lBQ1IsQ0FBQ0MsYUFBYSxDQUFDO0lBQ2YsQ0FBQ0MsV0FBVyxDQUFDO0lBQ2IsQ0FBQ0MsT0FBTyxDQUFDO0lBQ1QsQ0FBQ0MsU0FBUyxDQUFTO0lBQ25CLENBQUNDLFVBQVUsQ0FBQztJQUNaLENBQUNDLGVBQWUsQ0FBQztJQUNqQixDQUFDQyxjQUFjLENBQUM7SUFDaEIsQ0FBQ0MsUUFBUSxDQUFDO0lBQ1YsQ0FBQ0MsYUFBYSxDQUFDO0lBQ2YsQ0FBQ0MsVUFBVSxDQUFDO0lBQ1osQ0FBQ3NCLE9BQU8sQ0FBQztJQUNULENBQUNyQixTQUFTLENBQUM7SUFDWCxDQUFDQyxPQUFPLENBQUM7SUFDVEMsWUFBWUMsTUFBTSxDQUFFO2FBVnBCLENBQUNWLFNBQVMsR0FBRztRQVdYLE1BQU0sRUFDSkosTUFBTSxFQUNORSxXQUFXLEVBQ1hDLE9BQU8sRUFDUEYsYUFBYSxFQUNiTSxjQUFjLEVBQ2RDLFFBQVEsRUFDUkMsYUFBYSxFQUNiQyxVQUFVLEVBQ1ZMLFVBQVUsRUFDVkMsZUFBZSxFQUNmMEIsT0FBTyxFQUNSLEdBQUdsQjtRQUNKLElBQUksQ0FBQyxDQUFDZCxNQUFNLEdBQUdQLGdFQUFZQSxDQUFDTztRQUM1QixJQUFJLENBQUMsQ0FBQ0UsV0FBVyxHQUFHQTtRQUNwQixJQUFJLENBQUMsQ0FBQ0MsT0FBTyxHQUFHQTtRQUNoQixJQUFJLENBQUMsQ0FBQ0YsYUFBYSxHQUFHQTtRQUN0QixJQUFJLENBQUMsQ0FBQ0ksVUFBVSxHQUFHQTtRQUNuQixJQUFJLENBQUMsQ0FBQ0MsZUFBZSxHQUFHQTtRQUN4QixJQUFJLENBQUMsQ0FBQ0MsY0FBYyxHQUFHZCxnRUFBWUEsQ0FBQ2M7UUFDcEMsSUFBSSxDQUFDLENBQUNDLFFBQVEsR0FBR2YsZ0VBQVlBLENBQUNlO1FBQzlCLElBQUksQ0FBQyxDQUFDQyxhQUFhLEdBQUdoQixnRUFBWUEsQ0FBQ2dCO1FBQ25DLElBQUksQ0FBQyxDQUFDQyxVQUFVLEdBQUdqQixnRUFBWUEsQ0FBQ2lCO1FBQ2hDLElBQUksQ0FBQyxDQUFDc0IsT0FBTyxHQUFHdkMsZ0VBQVlBLENBQUN1QztJQUMvQjtJQUNBakIsa0JBQWtCUCxRQUFRLEVBQUU7UUFDMUIsSUFBSSxDQUFDLENBQUNELGNBQWMsQ0FBQyxFQUFFLENBQUNDO0lBQzFCO0lBQ0FRLFlBQVlSLFFBQVEsRUFBRTtRQUNwQixJQUFJLENBQUMsQ0FBQ0EsUUFBUSxDQUFDLEVBQUUsQ0FBQ0E7SUFDcEI7SUFDQVMsaUJBQWlCQyxNQUFNLEVBQUU7UUFDdkIsSUFBSSxDQUFDLENBQUNULGFBQWEsQ0FBQyxFQUFFLENBQUNTO0lBQ3pCO0lBQ0FDLGNBQWNULFVBQVUsRUFBRTtRQUN4QixJQUFJLENBQUMsQ0FBQ0EsVUFBVSxDQUFDLEVBQUUsQ0FBQ0E7SUFDdEI7SUFDQVUsVUFBVXBCLE1BQU0sRUFBRTtRQUNoQixJQUFJLENBQUMsQ0FBQ0EsTUFBTSxDQUFDLEVBQUUsQ0FBQ0E7SUFDbEI7SUFDQWlDLFdBQVdELE9BQU8sRUFBRTtRQUNsQixJQUFJLENBQUMsQ0FBQ0EsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFNQTtJQUN6QjtJQUNBWCxNQUFNQyxFQUFFLEVBQUU7UUFDUixJQUFJLElBQUksQ0FBQyxDQUFDbEIsU0FBUyxFQUFFO1lBQ25CLE1BQU0sSUFBSW1CLE1BQU07UUFDbEI7UUFDQSxNQUFNWCxVQUFVbEIsMERBQU1BLENBQUM7WUFDckIsTUFBTThCLFNBQVMsSUFBSTtZQUNuQixNQUFNLENBQUNDLFlBQVksR0FBRyxJQUFJLENBQUMsQ0FBQ2xCLGNBQWM7WUFDMUMsTUFBTSxDQUFDbUIsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDbEIsUUFBUTtZQUM1QixNQUFNLENBQUNVLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQ1QsYUFBYTtZQUNwQyxNQUFNLENBQUNrQixPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUNqQixVQUFVO1lBQ2pDLE1BQU0sQ0FBQ2tCLFlBQVksR0FBRyxJQUFJLENBQUMsQ0FBQzVCLE1BQU07WUFDbEMsTUFBTSxDQUFDZ0MsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDQSxPQUFPO1lBQy9CLElBQUlIO1lBQ0osSUFBSSxJQUFJLENBQUMsQ0FBQ2xCLFNBQVMsRUFBRTtnQkFDbkJrQixXQUFXLElBQUksQ0FBQyxDQUFDbEIsU0FBUztZQUM1QixPQUFPO2dCQUNMa0IsV0FBV2xDLHdEQUFJQSxDQUFDLElBQU0sMFBBQU87Z0JBQzdCLElBQUksQ0FBQyxDQUFDZ0IsU0FBUyxHQUFHa0I7WUFDcEI7WUFDQWpDLG1FQUFlQSxDQUFDLElBQUksQ0FBQyxDQUFDUyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUNDLGVBQWU7WUFDdkQsT0FBT1QsbUVBQWVBLENBQUNnQyxVQUFVL0IsOERBQVVBLENBQUM7Z0JBQzFDLElBQUlJLGVBQWM7b0JBQ2hCLE9BQU9zQixPQUFPLENBQUN0QixXQUFXO2dCQUM1QjtnQkFDQSxJQUFJQyxXQUFVO29CQUNaLE9BQU9xQixPQUFPLENBQUNyQixPQUFPO2dCQUN4QjtnQkFDQSxJQUFJRixpQkFBZ0I7b0JBQ2xCLE9BQU91QixPQUFPLENBQUN2QixhQUFhO2dCQUM5QjtnQkFDQSxJQUFJSyxtQkFBa0I7b0JBQ3BCLE9BQU9rQixPQUFPLENBQUNsQixlQUFlO2dCQUNoQztZQUNGLEdBQUc7Z0JBQ0QsSUFBSU4sVUFBUztvQkFDWCxPQUFPNEI7Z0JBQ1Q7Z0JBQ0EsSUFBSXJCLGtCQUFpQjtvQkFDbkIsT0FBT2tCO2dCQUNUO2dCQUNBLElBQUlqQixZQUFXO29CQUNiLE9BQU9rQjtnQkFDVDtnQkFDQSxJQUFJakIsaUJBQWdCO29CQUNsQixPQUFPUztnQkFDVDtnQkFDQSxJQUFJUixjQUFhO29CQUNmLE9BQU9pQjtnQkFDVDtnQkFDQSxJQUFJSyxXQUFVO29CQUNaLE9BQU9BO2dCQUNUO1lBQ0Y7UUFDRixHQUFHVjtRQUNILElBQUksQ0FBQyxDQUFDbEIsU0FBUyxHQUFHO1FBQ2xCLElBQUksQ0FBQyxDQUFDUSxPQUFPLEdBQUdBO0lBQ2xCO0lBQ0FrQixVQUFVO1FBQ1IsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDMUIsU0FBUyxFQUFFO1lBQ3BCLE1BQU0sSUFBSW1CLE1BQU07UUFDbEI7UUFDQSxJQUFJLENBQUMsQ0FBQ1gsT0FBTztRQUNiLElBQUksQ0FBQyxDQUFDUixTQUFTLEdBQUc7SUFDcEI7QUFDRjtBQUU2RCIsInNvdXJjZXMiOlsid2VicGFjazovL2dyb3ctd2l0aC11cy8uL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcXVlcnktZGV2dG9vbHMvYnVpbGQvZGV2LmpzPzYwNDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2lnbmFsLCByZW5kZXIsIGxhenksIHNldHVwU3R5bGVTaGVldCwgY3JlYXRlQ29tcG9uZW50LCBtZXJnZVByb3BzIH0gZnJvbSAnLi9jaHVuay9WNVQ1VkpLRy5qcyc7XG5cbi8vIHNyYy9UYW5zdGFja1F1ZXJ5RGV2dG9vbHMudHN4XG52YXIgVGFuc3RhY2tRdWVyeURldnRvb2xzID0gY2xhc3Mge1xuICAjY2xpZW50O1xuICAjb25saW5lTWFuYWdlcjtcbiAgI3F1ZXJ5Rmxhdm9yO1xuICAjdmVyc2lvbjtcbiAgI2lzTW91bnRlZCA9IGZhbHNlO1xuICAjc3R5bGVOb25jZTtcbiAgI3NoYWRvd0RPTVRhcmdldDtcbiAgI2J1dHRvblBvc2l0aW9uO1xuICAjcG9zaXRpb247XG4gICNpbml0aWFsSXNPcGVuO1xuICAjZXJyb3JUeXBlcztcbiAgI0NvbXBvbmVudDtcbiAgI2Rpc3Bvc2U7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIGNvbnN0IHtcbiAgICAgIGNsaWVudCxcbiAgICAgIHF1ZXJ5Rmxhdm9yLFxuICAgICAgdmVyc2lvbixcbiAgICAgIG9ubGluZU1hbmFnZXIsXG4gICAgICBidXR0b25Qb3NpdGlvbixcbiAgICAgIHBvc2l0aW9uLFxuICAgICAgaW5pdGlhbElzT3BlbixcbiAgICAgIGVycm9yVHlwZXMsXG4gICAgICBzdHlsZU5vbmNlLFxuICAgICAgc2hhZG93RE9NVGFyZ2V0XG4gICAgfSA9IGNvbmZpZztcbiAgICB0aGlzLiNjbGllbnQgPSBjcmVhdGVTaWduYWwoY2xpZW50KTtcbiAgICB0aGlzLiNxdWVyeUZsYXZvciA9IHF1ZXJ5Rmxhdm9yO1xuICAgIHRoaXMuI3ZlcnNpb24gPSB2ZXJzaW9uO1xuICAgIHRoaXMuI29ubGluZU1hbmFnZXIgPSBvbmxpbmVNYW5hZ2VyO1xuICAgIHRoaXMuI3N0eWxlTm9uY2UgPSBzdHlsZU5vbmNlO1xuICAgIHRoaXMuI3NoYWRvd0RPTVRhcmdldCA9IHNoYWRvd0RPTVRhcmdldDtcbiAgICB0aGlzLiNidXR0b25Qb3NpdGlvbiA9IGNyZWF0ZVNpZ25hbChidXR0b25Qb3NpdGlvbik7XG4gICAgdGhpcy4jcG9zaXRpb24gPSBjcmVhdGVTaWduYWwocG9zaXRpb24pO1xuICAgIHRoaXMuI2luaXRpYWxJc09wZW4gPSBjcmVhdGVTaWduYWwoaW5pdGlhbElzT3Blbik7XG4gICAgdGhpcy4jZXJyb3JUeXBlcyA9IGNyZWF0ZVNpZ25hbChlcnJvclR5cGVzKTtcbiAgfVxuICBzZXRCdXR0b25Qb3NpdGlvbihwb3NpdGlvbikge1xuICAgIHRoaXMuI2J1dHRvblBvc2l0aW9uWzFdKHBvc2l0aW9uKTtcbiAgfVxuICBzZXRQb3NpdGlvbihwb3NpdGlvbikge1xuICAgIHRoaXMuI3Bvc2l0aW9uWzFdKHBvc2l0aW9uKTtcbiAgfVxuICBzZXRJbml0aWFsSXNPcGVuKGlzT3Blbikge1xuICAgIHRoaXMuI2luaXRpYWxJc09wZW5bMV0oaXNPcGVuKTtcbiAgfVxuICBzZXRFcnJvclR5cGVzKGVycm9yVHlwZXMpIHtcbiAgICB0aGlzLiNlcnJvclR5cGVzWzFdKGVycm9yVHlwZXMpO1xuICB9XG4gIHNldENsaWVudChjbGllbnQpIHtcbiAgICB0aGlzLiNjbGllbnRbMV0oY2xpZW50KTtcbiAgfVxuICBtb3VudChlbCkge1xuICAgIGlmICh0aGlzLiNpc01vdW50ZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkRldnRvb2xzIGlzIGFscmVhZHkgbW91bnRlZFwiKTtcbiAgICB9XG4gICAgY29uc3QgZGlzcG9zZSA9IHJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBfc2VsZiQgPSB0aGlzO1xuICAgICAgY29uc3QgW2J0blBvc2l0aW9uXSA9IHRoaXMuI2J1dHRvblBvc2l0aW9uO1xuICAgICAgY29uc3QgW3Bvc10gPSB0aGlzLiNwb3NpdGlvbjtcbiAgICAgIGNvbnN0IFtpc09wZW5dID0gdGhpcy4jaW5pdGlhbElzT3BlbjtcbiAgICAgIGNvbnN0IFtlcnJvcnNdID0gdGhpcy4jZXJyb3JUeXBlcztcbiAgICAgIGNvbnN0IFtxdWVyeUNsaWVudF0gPSB0aGlzLiNjbGllbnQ7XG4gICAgICBsZXQgRGV2dG9vbHM7XG4gICAgICBpZiAodGhpcy4jQ29tcG9uZW50KSB7XG4gICAgICAgIERldnRvb2xzID0gdGhpcy4jQ29tcG9uZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgRGV2dG9vbHMgPSBsYXp5KCgpID0+IGltcG9ydCgnLi9EZXZ0b29sc0NvbXBvbmVudC9TVVhOSktNTS5qcycpKTtcbiAgICAgICAgdGhpcy4jQ29tcG9uZW50ID0gRGV2dG9vbHM7XG4gICAgICB9XG4gICAgICBzZXR1cFN0eWxlU2hlZXQodGhpcy4jc3R5bGVOb25jZSwgdGhpcy4jc2hhZG93RE9NVGFyZ2V0KTtcbiAgICAgIHJldHVybiBjcmVhdGVDb21wb25lbnQoRGV2dG9vbHMsIG1lcmdlUHJvcHMoe1xuICAgICAgICBnZXQgcXVlcnlGbGF2b3IoKSB7XG4gICAgICAgICAgcmV0dXJuIF9zZWxmJC4jcXVlcnlGbGF2b3I7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCB2ZXJzaW9uKCkge1xuICAgICAgICAgIHJldHVybiBfc2VsZiQuI3ZlcnNpb247XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBvbmxpbmVNYW5hZ2VyKCkge1xuICAgICAgICAgIHJldHVybiBfc2VsZiQuI29ubGluZU1hbmFnZXI7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBzaGFkb3dET01UYXJnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIF9zZWxmJC4jc2hhZG93RE9NVGFyZ2V0O1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGdldCBjbGllbnQoKSB7XG4gICAgICAgICAgcmV0dXJuIHF1ZXJ5Q2xpZW50KCk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBidXR0b25Qb3NpdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYnRuUG9zaXRpb24oKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IHBvc2l0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBwb3MoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IGluaXRpYWxJc09wZW4oKSB7XG4gICAgICAgICAgcmV0dXJuIGlzT3BlbigpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgZXJyb3JUeXBlcygpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3JzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICB9LCBlbCk7XG4gICAgdGhpcy4jaXNNb3VudGVkID0gdHJ1ZTtcbiAgICB0aGlzLiNkaXNwb3NlID0gZGlzcG9zZTtcbiAgfVxuICB1bm1vdW50KCkge1xuICAgIGlmICghdGhpcy4jaXNNb3VudGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEZXZ0b29scyBpcyBub3QgbW91bnRlZFwiKTtcbiAgICB9XG4gICAgdGhpcy4jZGlzcG9zZT8uKCk7XG4gICAgdGhpcy4jaXNNb3VudGVkID0gZmFsc2U7XG4gIH1cbn07XG5cbi8vIHNyYy9UYW5zdGFja1F1ZXJ5RGV2dG9vbHNQYW5lbC50c3hcbnZhciBUYW5zdGFja1F1ZXJ5RGV2dG9vbHNQYW5lbCA9IGNsYXNzIHtcbiAgI2NsaWVudDtcbiAgI29ubGluZU1hbmFnZXI7XG4gICNxdWVyeUZsYXZvcjtcbiAgI3ZlcnNpb247XG4gICNpc01vdW50ZWQgPSBmYWxzZTtcbiAgI3N0eWxlTm9uY2U7XG4gICNzaGFkb3dET01UYXJnZXQ7XG4gICNidXR0b25Qb3NpdGlvbjtcbiAgI3Bvc2l0aW9uO1xuICAjaW5pdGlhbElzT3BlbjtcbiAgI2Vycm9yVHlwZXM7XG4gICNvbkNsb3NlO1xuICAjQ29tcG9uZW50O1xuICAjZGlzcG9zZTtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgY29uc3Qge1xuICAgICAgY2xpZW50LFxuICAgICAgcXVlcnlGbGF2b3IsXG4gICAgICB2ZXJzaW9uLFxuICAgICAgb25saW5lTWFuYWdlcixcbiAgICAgIGJ1dHRvblBvc2l0aW9uLFxuICAgICAgcG9zaXRpb24sXG4gICAgICBpbml0aWFsSXNPcGVuLFxuICAgICAgZXJyb3JUeXBlcyxcbiAgICAgIHN0eWxlTm9uY2UsXG4gICAgICBzaGFkb3dET01UYXJnZXQsXG4gICAgICBvbkNsb3NlXG4gICAgfSA9IGNvbmZpZztcbiAgICB0aGlzLiNjbGllbnQgPSBjcmVhdGVTaWduYWwoY2xpZW50KTtcbiAgICB0aGlzLiNxdWVyeUZsYXZvciA9IHF1ZXJ5Rmxhdm9yO1xuICAgIHRoaXMuI3ZlcnNpb24gPSB2ZXJzaW9uO1xuICAgIHRoaXMuI29ubGluZU1hbmFnZXIgPSBvbmxpbmVNYW5hZ2VyO1xuICAgIHRoaXMuI3N0eWxlTm9uY2UgPSBzdHlsZU5vbmNlO1xuICAgIHRoaXMuI3NoYWRvd0RPTVRhcmdldCA9IHNoYWRvd0RPTVRhcmdldDtcbiAgICB0aGlzLiNidXR0b25Qb3NpdGlvbiA9IGNyZWF0ZVNpZ25hbChidXR0b25Qb3NpdGlvbik7XG4gICAgdGhpcy4jcG9zaXRpb24gPSBjcmVhdGVTaWduYWwocG9zaXRpb24pO1xuICAgIHRoaXMuI2luaXRpYWxJc09wZW4gPSBjcmVhdGVTaWduYWwoaW5pdGlhbElzT3Blbik7XG4gICAgdGhpcy4jZXJyb3JUeXBlcyA9IGNyZWF0ZVNpZ25hbChlcnJvclR5cGVzKTtcbiAgICB0aGlzLiNvbkNsb3NlID0gY3JlYXRlU2lnbmFsKG9uQ2xvc2UpO1xuICB9XG4gIHNldEJ1dHRvblBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gICAgdGhpcy4jYnV0dG9uUG9zaXRpb25bMV0ocG9zaXRpb24pO1xuICB9XG4gIHNldFBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gICAgdGhpcy4jcG9zaXRpb25bMV0ocG9zaXRpb24pO1xuICB9XG4gIHNldEluaXRpYWxJc09wZW4oaXNPcGVuKSB7XG4gICAgdGhpcy4jaW5pdGlhbElzT3BlblsxXShpc09wZW4pO1xuICB9XG4gIHNldEVycm9yVHlwZXMoZXJyb3JUeXBlcykge1xuICAgIHRoaXMuI2Vycm9yVHlwZXNbMV0oZXJyb3JUeXBlcyk7XG4gIH1cbiAgc2V0Q2xpZW50KGNsaWVudCkge1xuICAgIHRoaXMuI2NsaWVudFsxXShjbGllbnQpO1xuICB9XG4gIHNldE9uQ2xvc2Uob25DbG9zZSkge1xuICAgIHRoaXMuI29uQ2xvc2VbMV0oKCkgPT4gb25DbG9zZSk7XG4gIH1cbiAgbW91bnQoZWwpIHtcbiAgICBpZiAodGhpcy4jaXNNb3VudGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEZXZ0b29scyBpcyBhbHJlYWR5IG1vdW50ZWRcIik7XG4gICAgfVxuICAgIGNvbnN0IGRpc3Bvc2UgPSByZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgX3NlbGYkID0gdGhpcztcbiAgICAgIGNvbnN0IFtidG5Qb3NpdGlvbl0gPSB0aGlzLiNidXR0b25Qb3NpdGlvbjtcbiAgICAgIGNvbnN0IFtwb3NdID0gdGhpcy4jcG9zaXRpb247XG4gICAgICBjb25zdCBbaXNPcGVuXSA9IHRoaXMuI2luaXRpYWxJc09wZW47XG4gICAgICBjb25zdCBbZXJyb3JzXSA9IHRoaXMuI2Vycm9yVHlwZXM7XG4gICAgICBjb25zdCBbcXVlcnlDbGllbnRdID0gdGhpcy4jY2xpZW50O1xuICAgICAgY29uc3QgW29uQ2xvc2VdID0gdGhpcy4jb25DbG9zZTtcbiAgICAgIGxldCBEZXZ0b29scztcbiAgICAgIGlmICh0aGlzLiNDb21wb25lbnQpIHtcbiAgICAgICAgRGV2dG9vbHMgPSB0aGlzLiNDb21wb25lbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBEZXZ0b29scyA9IGxhenkoKCkgPT4gaW1wb3J0KCcuL0RldnRvb2xzUGFuZWxDb21wb25lbnQvTERVUTJHRTQuanMnKSk7XG4gICAgICAgIHRoaXMuI0NvbXBvbmVudCA9IERldnRvb2xzO1xuICAgICAgfVxuICAgICAgc2V0dXBTdHlsZVNoZWV0KHRoaXMuI3N0eWxlTm9uY2UsIHRoaXMuI3NoYWRvd0RPTVRhcmdldCk7XG4gICAgICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KERldnRvb2xzLCBtZXJnZVByb3BzKHtcbiAgICAgICAgZ2V0IHF1ZXJ5Rmxhdm9yKCkge1xuICAgICAgICAgIHJldHVybiBfc2VsZiQuI3F1ZXJ5Rmxhdm9yO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgdmVyc2lvbigpIHtcbiAgICAgICAgICByZXR1cm4gX3NlbGYkLiN2ZXJzaW9uO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgb25saW5lTWFuYWdlcigpIHtcbiAgICAgICAgICByZXR1cm4gX3NlbGYkLiNvbmxpbmVNYW5hZ2VyO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgc2hhZG93RE9NVGFyZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBfc2VsZiQuI3NoYWRvd0RPTVRhcmdldDtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBnZXQgY2xpZW50KCkge1xuICAgICAgICAgIHJldHVybiBxdWVyeUNsaWVudCgpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgYnV0dG9uUG9zaXRpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGJ0blBvc2l0aW9uKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBwb3NpdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gcG9zKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBpbml0aWFsSXNPcGVuKCkge1xuICAgICAgICAgIHJldHVybiBpc09wZW4oKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IGVycm9yVHlwZXMoKSB7XG4gICAgICAgICAgcmV0dXJuIGVycm9ycygpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgb25DbG9zZSgpIHtcbiAgICAgICAgICByZXR1cm4gb25DbG9zZSgpO1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgfSwgZWwpO1xuICAgIHRoaXMuI2lzTW91bnRlZCA9IHRydWU7XG4gICAgdGhpcy4jZGlzcG9zZSA9IGRpc3Bvc2U7XG4gIH1cbiAgdW5tb3VudCgpIHtcbiAgICBpZiAoIXRoaXMuI2lzTW91bnRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGV2dG9vbHMgaXMgbm90IG1vdW50ZWRcIik7XG4gICAgfVxuICAgIHRoaXMuI2Rpc3Bvc2U/LigpO1xuICAgIHRoaXMuI2lzTW91bnRlZCA9IGZhbHNlO1xuICB9XG59O1xuXG5leHBvcnQgeyBUYW5zdGFja1F1ZXJ5RGV2dG9vbHMsIFRhbnN0YWNrUXVlcnlEZXZ0b29sc1BhbmVsIH07XG4iXSwibmFtZXMiOlsiY3JlYXRlU2lnbmFsIiwicmVuZGVyIiwibGF6eSIsInNldHVwU3R5bGVTaGVldCIsImNyZWF0ZUNvbXBvbmVudCIsIm1lcmdlUHJvcHMiLCJUYW5zdGFja1F1ZXJ5RGV2dG9vbHMiLCJjbGllbnQiLCJvbmxpbmVNYW5hZ2VyIiwicXVlcnlGbGF2b3IiLCJ2ZXJzaW9uIiwiaXNNb3VudGVkIiwic3R5bGVOb25jZSIsInNoYWRvd0RPTVRhcmdldCIsImJ1dHRvblBvc2l0aW9uIiwicG9zaXRpb24iLCJpbml0aWFsSXNPcGVuIiwiZXJyb3JUeXBlcyIsIkNvbXBvbmVudCIsImRpc3Bvc2UiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsInNldEJ1dHRvblBvc2l0aW9uIiwic2V0UG9zaXRpb24iLCJzZXRJbml0aWFsSXNPcGVuIiwiaXNPcGVuIiwic2V0RXJyb3JUeXBlcyIsInNldENsaWVudCIsIm1vdW50IiwiZWwiLCJFcnJvciIsIl9zZWxmJCIsImJ0blBvc2l0aW9uIiwicG9zIiwiZXJyb3JzIiwicXVlcnlDbGllbnQiLCJEZXZ0b29scyIsInVubW91bnQiLCJUYW5zdGFja1F1ZXJ5RGV2dG9vbHNQYW5lbCIsIm9uQ2xvc2UiLCJzZXRPbkNsb3NlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-devtools/build/dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query-devtools/build/modern/ReactQueryDevtools.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@tanstack/react-query-devtools/build/modern/ReactQueryDevtools.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReactQueryDevtools: () => (/* binding */ ReactQueryDevtools)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/onlineManager.js\");\n/* harmony import */ var _tanstack_query_devtools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tanstack/query-devtools */ \"(ssr)/./node_modules/@tanstack/query-devtools/build/dev.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* __next_internal_client_entry_do_not_use__ ReactQueryDevtools auto */ // src/ReactQueryDevtools.tsx\n\n\n\n\nfunction ReactQueryDevtools(props) {\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__.useQueryClient)(props.client);\n    const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const { buttonPosition, position, initialIsOpen, errorTypes, styleNonce, shadowDOMTarget } = props;\n    const [devtools] = react__WEBPACK_IMPORTED_MODULE_0__.useState(new _tanstack_query_devtools__WEBPACK_IMPORTED_MODULE_1__.TanstackQueryDevtools({\n        client: queryClient,\n        queryFlavor: \"React Query\",\n        version: \"5\",\n        onlineManager: _tanstack_react_query__WEBPACK_IMPORTED_MODULE_4__.onlineManager,\n        buttonPosition,\n        position,\n        initialIsOpen,\n        errorTypes,\n        styleNonce,\n        shadowDOMTarget\n    }));\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        devtools.setClient(queryClient);\n    }, [\n        queryClient,\n        devtools\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (buttonPosition) {\n            devtools.setButtonPosition(buttonPosition);\n        }\n    }, [\n        buttonPosition,\n        devtools\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (position) {\n            devtools.setPosition(position);\n        }\n    }, [\n        position,\n        devtools\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        devtools.setInitialIsOpen(initialIsOpen || false);\n    }, [\n        initialIsOpen,\n        devtools\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        devtools.setErrorTypes(errorTypes || []);\n    }, [\n        errorTypes,\n        devtools\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (ref.current) {\n            devtools.mount(ref.current);\n        }\n        return ()=>{\n            devtools.unmount();\n        };\n    }, [\n        devtools\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n        dir: \"ltr\",\n        className: \"tsqd-parent-container\",\n        ref\n    });\n}\n //# sourceMappingURL=ReactQueryDevtools.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5LWRldnRvb2xzL2J1aWxkL21vZGVybi9SZWFjdFF1ZXJ5RGV2dG9vbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O3dFQUVBLDZCQUE2QjtBQUNFO0FBQ3VDO0FBQ0w7QUFDekI7QUFDeEMsU0FBU0ssbUJBQW1CQyxLQUFLO0lBQy9CLE1BQU1DLGNBQWNMLHFFQUFjQSxDQUFDSSxNQUFNRSxNQUFNO0lBQy9DLE1BQU1DLE1BQU1ULHlDQUFZLENBQUM7SUFDekIsTUFBTSxFQUNKVyxjQUFjLEVBQ2RDLFFBQVEsRUFDUkMsYUFBYSxFQUNiQyxVQUFVLEVBQ1ZDLFVBQVUsRUFDVkMsZUFBZSxFQUNoQixHQUFHVjtJQUNKLE1BQU0sQ0FBQ1csU0FBUyxHQUFHakIsMkNBQWMsQ0FDL0IsSUFBSUcsMkVBQXFCQSxDQUFDO1FBQ3hCSyxRQUFRRDtRQUNSWSxhQUFhO1FBQ2JDLFNBQVM7UUFDVG5CLGFBQWFBLGtFQUFBQTtRQUNiVTtRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQztJQUNGO0lBRUZoQiw0Q0FBZSxDQUFDO1FBQ2RpQixTQUFTSyxTQUFTLENBQUNmO0lBQ3JCLEdBQUc7UUFBQ0E7UUFBYVU7S0FBUztJQUMxQmpCLDRDQUFlLENBQUM7UUFDZCxJQUFJVyxnQkFBZ0I7WUFDbEJNLFNBQVNNLGlCQUFpQixDQUFDWjtRQUM3QjtJQUNGLEdBQUc7UUFBQ0E7UUFBZ0JNO0tBQVM7SUFDN0JqQiw0Q0FBZSxDQUFDO1FBQ2QsSUFBSVksVUFBVTtZQUNaSyxTQUFTTyxXQUFXLENBQUNaO1FBQ3ZCO0lBQ0YsR0FBRztRQUFDQTtRQUFVSztLQUFTO0lBQ3ZCakIsNENBQWUsQ0FBQztRQUNkaUIsU0FBU1EsZ0JBQWdCLENBQUNaLGlCQUFpQjtJQUM3QyxHQUFHO1FBQUNBO1FBQWVJO0tBQVM7SUFDNUJqQiw0Q0FBZSxDQUFDO1FBQ2RpQixTQUFTUyxhQUFhLENBQUNaLGNBQWMsRUFBRTtJQUN6QyxHQUFHO1FBQUNBO1FBQVlHO0tBQVM7SUFDekJqQiw0Q0FBZSxDQUFDO1FBQ2QsSUFBSVMsSUFBSWtCLE9BQU8sRUFBRTtZQUNmVixTQUFTVyxLQUFLLENBQUNuQixJQUFJa0IsT0FBTztRQUM1QjtRQUNBLE9BQU87WUFDTFYsU0FBU1ksT0FBTztRQUNsQjtJQUNGLEdBQUc7UUFBQ1o7S0FBUztJQUNiLE9BQU8sYUFBYSxHQUFHYixzREFBR0EsQ0FBQyxPQUFPO1FBQUUwQixLQUFLO1FBQU9DLFdBQVc7UUFBeUJ0QjtJQUFJO0FBQzFGO0FBR0UsQ0FDRiw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncm93LXdpdGgtdXMvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5LWRldnRvb2xzL2J1aWxkL21vZGVybi9SZWFjdFF1ZXJ5RGV2dG9vbHMuanM/ZDQ2MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcblxuLy8gc3JjL1JlYWN0UXVlcnlEZXZ0b29scy50c3hcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgb25saW5lTWFuYWdlciwgdXNlUXVlcnlDbGllbnQgfSBmcm9tIFwiQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5XCI7XG5pbXBvcnQgeyBUYW5zdGFja1F1ZXJ5RGV2dG9vbHMgfSBmcm9tIFwiQHRhbnN0YWNrL3F1ZXJ5LWRldnRvb2xzXCI7XG5pbXBvcnQgeyBqc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIFJlYWN0UXVlcnlEZXZ0b29scyhwcm9wcykge1xuICBjb25zdCBxdWVyeUNsaWVudCA9IHVzZVF1ZXJ5Q2xpZW50KHByb3BzLmNsaWVudCk7XG4gIGNvbnN0IHJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3Qge1xuICAgIGJ1dHRvblBvc2l0aW9uLFxuICAgIHBvc2l0aW9uLFxuICAgIGluaXRpYWxJc09wZW4sXG4gICAgZXJyb3JUeXBlcyxcbiAgICBzdHlsZU5vbmNlLFxuICAgIHNoYWRvd0RPTVRhcmdldFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IFtkZXZ0b29sc10gPSBSZWFjdC51c2VTdGF0ZShcbiAgICBuZXcgVGFuc3RhY2tRdWVyeURldnRvb2xzKHtcbiAgICAgIGNsaWVudDogcXVlcnlDbGllbnQsXG4gICAgICBxdWVyeUZsYXZvcjogXCJSZWFjdCBRdWVyeVwiLFxuICAgICAgdmVyc2lvbjogXCI1XCIsXG4gICAgICBvbmxpbmVNYW5hZ2VyLFxuICAgICAgYnV0dG9uUG9zaXRpb24sXG4gICAgICBwb3NpdGlvbixcbiAgICAgIGluaXRpYWxJc09wZW4sXG4gICAgICBlcnJvclR5cGVzLFxuICAgICAgc3R5bGVOb25jZSxcbiAgICAgIHNoYWRvd0RPTVRhcmdldFxuICAgIH0pXG4gICk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZGV2dG9vbHMuc2V0Q2xpZW50KHF1ZXJ5Q2xpZW50KTtcbiAgfSwgW3F1ZXJ5Q2xpZW50LCBkZXZ0b29sc10pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChidXR0b25Qb3NpdGlvbikge1xuICAgICAgZGV2dG9vbHMuc2V0QnV0dG9uUG9zaXRpb24oYnV0dG9uUG9zaXRpb24pO1xuICAgIH1cbiAgfSwgW2J1dHRvblBvc2l0aW9uLCBkZXZ0b29sc10pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChwb3NpdGlvbikge1xuICAgICAgZGV2dG9vbHMuc2V0UG9zaXRpb24ocG9zaXRpb24pO1xuICAgIH1cbiAgfSwgW3Bvc2l0aW9uLCBkZXZ0b29sc10pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGRldnRvb2xzLnNldEluaXRpYWxJc09wZW4oaW5pdGlhbElzT3BlbiB8fCBmYWxzZSk7XG4gIH0sIFtpbml0aWFsSXNPcGVuLCBkZXZ0b29sc10pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGRldnRvb2xzLnNldEVycm9yVHlwZXMoZXJyb3JUeXBlcyB8fCBbXSk7XG4gIH0sIFtlcnJvclR5cGVzLCBkZXZ0b29sc10pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChyZWYuY3VycmVudCkge1xuICAgICAgZGV2dG9vbHMubW91bnQocmVmLmN1cnJlbnQpO1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZGV2dG9vbHMudW5tb3VudCgpO1xuICAgIH07XG4gIH0sIFtkZXZ0b29sc10pO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIGpzeChcImRpdlwiLCB7IGRpcjogXCJsdHJcIiwgY2xhc3NOYW1lOiBcInRzcWQtcGFyZW50LWNvbnRhaW5lclwiLCByZWYgfSk7XG59XG5leHBvcnQge1xuICBSZWFjdFF1ZXJ5RGV2dG9vbHNcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZWFjdFF1ZXJ5RGV2dG9vbHMuanMubWFwIl0sIm5hbWVzIjpbIlJlYWN0Iiwib25saW5lTWFuYWdlciIsInVzZVF1ZXJ5Q2xpZW50IiwiVGFuc3RhY2tRdWVyeURldnRvb2xzIiwianN4IiwiUmVhY3RRdWVyeURldnRvb2xzIiwicHJvcHMiLCJxdWVyeUNsaWVudCIsImNsaWVudCIsInJlZiIsInVzZVJlZiIsImJ1dHRvblBvc2l0aW9uIiwicG9zaXRpb24iLCJpbml0aWFsSXNPcGVuIiwiZXJyb3JUeXBlcyIsInN0eWxlTm9uY2UiLCJzaGFkb3dET01UYXJnZXQiLCJkZXZ0b29scyIsInVzZVN0YXRlIiwicXVlcnlGbGF2b3IiLCJ2ZXJzaW9uIiwidXNlRWZmZWN0Iiwic2V0Q2xpZW50Iiwic2V0QnV0dG9uUG9zaXRpb24iLCJzZXRQb3NpdGlvbiIsInNldEluaXRpYWxJc09wZW4iLCJzZXRFcnJvclR5cGVzIiwiY3VycmVudCIsIm1vdW50IiwidW5tb3VudCIsImRpciIsImNsYXNzTmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query-devtools/build/modern/ReactQueryDevtools.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query-devtools/build/modern/ReactQueryDevtoolsPanel.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@tanstack/react-query-devtools/build/modern/ReactQueryDevtoolsPanel.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReactQueryDevtoolsPanel: () => (/* binding */ ReactQueryDevtoolsPanel)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/onlineManager.js\");\n/* harmony import */ var _tanstack_query_devtools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tanstack/query-devtools */ \"(ssr)/./node_modules/@tanstack/query-devtools/build/dev.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* __next_internal_client_entry_do_not_use__ ReactQueryDevtoolsPanel auto */ // src/ReactQueryDevtoolsPanel.tsx\n\n\n\n\nfunction ReactQueryDevtoolsPanel(props) {\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__.useQueryClient)(props.client);\n    const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const { errorTypes, styleNonce, shadowDOMTarget } = props;\n    const [devtools] = react__WEBPACK_IMPORTED_MODULE_0__.useState(new _tanstack_query_devtools__WEBPACK_IMPORTED_MODULE_1__.TanstackQueryDevtoolsPanel({\n        client: queryClient,\n        queryFlavor: \"React Query\",\n        version: \"5\",\n        onlineManager: _tanstack_react_query__WEBPACK_IMPORTED_MODULE_4__.onlineManager,\n        buttonPosition: \"bottom-left\",\n        position: \"bottom\",\n        initialIsOpen: true,\n        errorTypes,\n        styleNonce,\n        shadowDOMTarget,\n        onClose: props.onClose\n    }));\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        devtools.setClient(queryClient);\n    }, [\n        queryClient,\n        devtools\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        devtools.setOnClose(props.onClose ?? (()=>{}));\n    }, [\n        props.onClose,\n        devtools\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        devtools.setErrorTypes(errorTypes || []);\n    }, [\n        errorTypes,\n        devtools\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (ref.current) {\n            devtools.mount(ref.current);\n        }\n        return ()=>{\n            devtools.unmount();\n        };\n    }, [\n        devtools\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n        style: {\n            height: \"500px\",\n            ...props.style\n        },\n        className: \"tsqd-parent-container\",\n        ref\n    });\n}\n //# sourceMappingURL=ReactQueryDevtoolsPanel.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5LWRldnRvb2xzL2J1aWxkL21vZGVybi9SZWFjdFF1ZXJ5RGV2dG9vbHNQYW5lbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7NkVBRUEsa0NBQWtDO0FBQ0g7QUFDdUM7QUFDQTtBQUM5QjtBQUN4QyxTQUFTSyx3QkFBd0JDLEtBQUs7SUFDcEMsTUFBTUMsY0FBY0wscUVBQWNBLENBQUNJLE1BQU1FLE1BQU07SUFDL0MsTUFBTUMsTUFBTVQseUNBQVksQ0FBQztJQUN6QixNQUFNLEVBQUVXLFVBQVUsRUFBRUMsVUFBVSxFQUFFQyxlQUFlLEVBQUUsR0FBR1A7SUFDcEQsTUFBTSxDQUFDUSxTQUFTLEdBQUdkLDJDQUFjLENBQy9CLElBQUlHLGdGQUEwQkEsQ0FBQztRQUM3QkssUUFBUUQ7UUFDUlMsYUFBYTtRQUNiQyxTQUFTO1FBQ1RoQixhQUFhQSxrRUFBQUE7UUFDYmlCLGdCQUFnQjtRQUNoQkMsVUFBVTtRQUNWQyxlQUFlO1FBQ2ZUO1FBQ0FDO1FBQ0FDO1FBQ0FRLFNBQVNmLE1BQU1lLE9BQU87SUFDeEI7SUFFRnJCLDRDQUFlLENBQUM7UUFDZGMsU0FBU1MsU0FBUyxDQUFDaEI7SUFDckIsR0FBRztRQUFDQTtRQUFhTztLQUFTO0lBQzFCZCw0Q0FBZSxDQUFDO1FBQ2RjLFNBQVNVLFVBQVUsQ0FBQ2xCLE1BQU1lLE9BQU8sSUFBSyxNQUN0QztJQUNGLEdBQUc7UUFBQ2YsTUFBTWUsT0FBTztRQUFFUDtLQUFTO0lBQzVCZCw0Q0FBZSxDQUFDO1FBQ2RjLFNBQVNXLGFBQWEsQ0FBQ2QsY0FBYyxFQUFFO0lBQ3pDLEdBQUc7UUFBQ0E7UUFBWUc7S0FBUztJQUN6QmQsNENBQWUsQ0FBQztRQUNkLElBQUlTLElBQUlpQixPQUFPLEVBQUU7WUFDZlosU0FBU2EsS0FBSyxDQUFDbEIsSUFBSWlCLE9BQU87UUFDNUI7UUFDQSxPQUFPO1lBQ0xaLFNBQVNjLE9BQU87UUFDbEI7SUFDRixHQUFHO1FBQUNkO0tBQVM7SUFDYixPQUFPLGFBQWEsR0FBR1Ysc0RBQUdBLENBQ3hCLE9BQ0E7UUFDRXlCLE9BQU87WUFBRUMsUUFBUTtZQUFTLEdBQUd4QixNQUFNdUIsS0FBSztRQUFDO1FBQ3pDRSxXQUFXO1FBQ1h0QjtJQUNGO0FBRUo7QUFHRSxDQUNGLG1EQUFtRCIsInNvdXJjZXMiOlsid2VicGFjazovL2dyb3ctd2l0aC11cy8uL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcmVhY3QtcXVlcnktZGV2dG9vbHMvYnVpbGQvbW9kZXJuL1JlYWN0UXVlcnlEZXZ0b29sc1BhbmVsLmpzPzE4NDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5cbi8vIHNyYy9SZWFjdFF1ZXJ5RGV2dG9vbHNQYW5lbC50c3hcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgb25saW5lTWFuYWdlciwgdXNlUXVlcnlDbGllbnQgfSBmcm9tIFwiQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5XCI7XG5pbXBvcnQgeyBUYW5zdGFja1F1ZXJ5RGV2dG9vbHNQYW5lbCB9IGZyb20gXCJAdGFuc3RhY2svcXVlcnktZGV2dG9vbHNcIjtcbmltcG9ydCB7IGpzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZnVuY3Rpb24gUmVhY3RRdWVyeURldnRvb2xzUGFuZWwocHJvcHMpIHtcbiAgY29uc3QgcXVlcnlDbGllbnQgPSB1c2VRdWVyeUNsaWVudChwcm9wcy5jbGllbnQpO1xuICBjb25zdCByZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IHsgZXJyb3JUeXBlcywgc3R5bGVOb25jZSwgc2hhZG93RE9NVGFyZ2V0IH0gPSBwcm9wcztcbiAgY29uc3QgW2RldnRvb2xzXSA9IFJlYWN0LnVzZVN0YXRlKFxuICAgIG5ldyBUYW5zdGFja1F1ZXJ5RGV2dG9vbHNQYW5lbCh7XG4gICAgICBjbGllbnQ6IHF1ZXJ5Q2xpZW50LFxuICAgICAgcXVlcnlGbGF2b3I6IFwiUmVhY3QgUXVlcnlcIixcbiAgICAgIHZlcnNpb246IFwiNVwiLFxuICAgICAgb25saW5lTWFuYWdlcixcbiAgICAgIGJ1dHRvblBvc2l0aW9uOiBcImJvdHRvbS1sZWZ0XCIsXG4gICAgICBwb3NpdGlvbjogXCJib3R0b21cIixcbiAgICAgIGluaXRpYWxJc09wZW46IHRydWUsXG4gICAgICBlcnJvclR5cGVzLFxuICAgICAgc3R5bGVOb25jZSxcbiAgICAgIHNoYWRvd0RPTVRhcmdldCxcbiAgICAgIG9uQ2xvc2U6IHByb3BzLm9uQ2xvc2VcbiAgICB9KVxuICApO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGRldnRvb2xzLnNldENsaWVudChxdWVyeUNsaWVudCk7XG4gIH0sIFtxdWVyeUNsaWVudCwgZGV2dG9vbHNdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBkZXZ0b29scy5zZXRPbkNsb3NlKHByb3BzLm9uQ2xvc2UgPz8gKCgpID0+IHtcbiAgICB9KSk7XG4gIH0sIFtwcm9wcy5vbkNsb3NlLCBkZXZ0b29sc10pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGRldnRvb2xzLnNldEVycm9yVHlwZXMoZXJyb3JUeXBlcyB8fCBbXSk7XG4gIH0sIFtlcnJvclR5cGVzLCBkZXZ0b29sc10pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChyZWYuY3VycmVudCkge1xuICAgICAgZGV2dG9vbHMubW91bnQocmVmLmN1cnJlbnQpO1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZGV2dG9vbHMudW5tb3VudCgpO1xuICAgIH07XG4gIH0sIFtkZXZ0b29sc10pO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIGpzeChcbiAgICBcImRpdlwiLFxuICAgIHtcbiAgICAgIHN0eWxlOiB7IGhlaWdodDogXCI1MDBweFwiLCAuLi5wcm9wcy5zdHlsZSB9LFxuICAgICAgY2xhc3NOYW1lOiBcInRzcWQtcGFyZW50LWNvbnRhaW5lclwiLFxuICAgICAgcmVmXG4gICAgfVxuICApO1xufVxuZXhwb3J0IHtcbiAgUmVhY3RRdWVyeURldnRvb2xzUGFuZWxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZWFjdFF1ZXJ5RGV2dG9vbHNQYW5lbC5qcy5tYXAiXSwibmFtZXMiOlsiUmVhY3QiLCJvbmxpbmVNYW5hZ2VyIiwidXNlUXVlcnlDbGllbnQiLCJUYW5zdGFja1F1ZXJ5RGV2dG9vbHNQYW5lbCIsImpzeCIsIlJlYWN0UXVlcnlEZXZ0b29sc1BhbmVsIiwicHJvcHMiLCJxdWVyeUNsaWVudCIsImNsaWVudCIsInJlZiIsInVzZVJlZiIsImVycm9yVHlwZXMiLCJzdHlsZU5vbmNlIiwic2hhZG93RE9NVGFyZ2V0IiwiZGV2dG9vbHMiLCJ1c2VTdGF0ZSIsInF1ZXJ5Rmxhdm9yIiwidmVyc2lvbiIsImJ1dHRvblBvc2l0aW9uIiwicG9zaXRpb24iLCJpbml0aWFsSXNPcGVuIiwib25DbG9zZSIsInVzZUVmZmVjdCIsInNldENsaWVudCIsInNldE9uQ2xvc2UiLCJzZXRFcnJvclR5cGVzIiwiY3VycmVudCIsIm1vdW50IiwidW5tb3VudCIsInN0eWxlIiwiaGVpZ2h0IiwiY2xhc3NOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query-devtools/build/modern/ReactQueryDevtoolsPanel.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query-devtools/build/modern/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tanstack/react-query-devtools/build/modern/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReactQueryDevtools: () => (/* binding */ ReactQueryDevtools2),\n/* harmony export */   ReactQueryDevtoolsPanel: () => (/* binding */ ReactQueryDevtoolsPanel2)\n/* harmony export */ });\n/* harmony import */ var _ReactQueryDevtools_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ReactQueryDevtools.js */ \"(ssr)/./node_modules/@tanstack/react-query-devtools/build/modern/ReactQueryDevtools.js\");\n/* harmony import */ var _ReactQueryDevtoolsPanel_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ReactQueryDevtoolsPanel.js */ \"(ssr)/./node_modules/@tanstack/react-query-devtools/build/modern/ReactQueryDevtoolsPanel.js\");\n/* __next_internal_client_entry_do_not_use__ ReactQueryDevtools,ReactQueryDevtoolsPanel auto */ // src/index.ts\n\n\nvar ReactQueryDevtools2 =  false ? 0 : _ReactQueryDevtools_js__WEBPACK_IMPORTED_MODULE_0__.ReactQueryDevtools;\nvar ReactQueryDevtoolsPanel2 =  false ? 0 : _ReactQueryDevtoolsPanel_js__WEBPACK_IMPORTED_MODULE_1__.ReactQueryDevtoolsPanel;\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5LWRldnRvb2xzL2J1aWxkL21vZGVybi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O2dHQUVBLGVBQWU7QUFDcUM7QUFDVTtBQUM5RCxJQUFJRSxzQkFBc0JDLE1BQXNDLEdBQUcsQ0FFbEUsR0FBR0gsc0VBQTJCO0FBQy9CLElBQUlLLDJCQUEyQkYsTUFBc0MsR0FBRyxDQUV2RSxHQUFHRixnRkFBcUM7QUFJdkMsQ0FDRixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncm93LXdpdGgtdXMvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5LWRldnRvb2xzL2J1aWxkL21vZGVybi9pbmRleC5qcz9hZGUyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG4vLyBzcmMvaW5kZXgudHNcbmltcG9ydCAqIGFzIERldnRvb2xzIGZyb20gXCIuL1JlYWN0UXVlcnlEZXZ0b29scy5qc1wiO1xuaW1wb3J0ICogYXMgRGV2dG9vbHNQYW5lbCBmcm9tIFwiLi9SZWFjdFF1ZXJ5RGV2dG9vbHNQYW5lbC5qc1wiO1xudmFyIFJlYWN0UXVlcnlEZXZ0b29sczIgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJkZXZlbG9wbWVudFwiID8gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBudWxsO1xufSA6IERldnRvb2xzLlJlYWN0UXVlcnlEZXZ0b29scztcbnZhciBSZWFjdFF1ZXJ5RGV2dG9vbHNQYW5lbDIgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJkZXZlbG9wbWVudFwiID8gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBudWxsO1xufSA6IERldnRvb2xzUGFuZWwuUmVhY3RRdWVyeURldnRvb2xzUGFuZWw7XG5leHBvcnQge1xuICBSZWFjdFF1ZXJ5RGV2dG9vbHMyIGFzIFJlYWN0UXVlcnlEZXZ0b29scyxcbiAgUmVhY3RRdWVyeURldnRvb2xzUGFuZWwyIGFzIFJlYWN0UXVlcnlEZXZ0b29sc1BhbmVsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIkRldnRvb2xzIiwiRGV2dG9vbHNQYW5lbCIsIlJlYWN0UXVlcnlEZXZ0b29sczIiLCJwcm9jZXNzIiwiUmVhY3RRdWVyeURldnRvb2xzIiwiUmVhY3RRdWVyeURldnRvb2xzUGFuZWwyIiwiUmVhY3RRdWVyeURldnRvb2xzUGFuZWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query-devtools/build/modern/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryClientContext: () => (/* binding */ QueryClientContext),\n/* harmony export */   QueryClientProvider: () => (/* binding */ QueryClientProvider),\n/* harmony export */   useQueryClient: () => (/* binding */ useQueryClient)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* __next_internal_client_entry_do_not_use__ QueryClientContext,QueryClientProvider,useQueryClient auto */ // src/QueryClientProvider.tsx\n\n\nvar QueryClientContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(void 0);\nvar useQueryClient = (queryClient)=>{\n    const client = react__WEBPACK_IMPORTED_MODULE_0__.useContext(QueryClientContext);\n    if (queryClient) {\n        return queryClient;\n    }\n    if (!client) {\n        throw new Error(\"No QueryClient set, use QueryClientProvider to set one\");\n    }\n    return client;\n};\nvar QueryClientProvider = ({ client, children })=>{\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        client.mount();\n        return ()=>{\n            client.unmount();\n        };\n    }, [\n        client\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(QueryClientContext.Provider, {\n        value: client,\n        children\n    });\n};\n //# sourceMappingURL=QueryClientProvider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL21vZGVybi9RdWVyeUNsaWVudFByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OzJHQUVBLDhCQUE4QjtBQUNDO0FBQ1M7QUFDeEMsSUFBSUUsbUNBQXFCRixnREFBbUIsQ0FDMUMsS0FBSztBQUVQLElBQUlJLGlCQUFpQixDQUFDQztJQUNwQixNQUFNQyxTQUFTTiw2Q0FBZ0IsQ0FBQ0U7SUFDaEMsSUFBSUcsYUFBYTtRQUNmLE9BQU9BO0lBQ1Q7SUFDQSxJQUFJLENBQUNDLFFBQVE7UUFDWCxNQUFNLElBQUlFLE1BQU07SUFDbEI7SUFDQSxPQUFPRjtBQUNUO0FBQ0EsSUFBSUcsc0JBQXNCLENBQUMsRUFDekJILE1BQU0sRUFDTkksUUFBUSxFQUNUO0lBQ0NWLDRDQUFlLENBQUM7UUFDZE0sT0FBT00sS0FBSztRQUNaLE9BQU87WUFDTE4sT0FBT08sT0FBTztRQUNoQjtJQUNGLEdBQUc7UUFBQ1A7S0FBTztJQUNYLE9BQU8sYUFBYSxHQUFHTCxzREFBR0EsQ0FBQ0MsbUJBQW1CWSxRQUFRLEVBQUU7UUFBRUMsT0FBT1Q7UUFBUUk7SUFBUztBQUNwRjtBQUtFLENBQ0YsK0NBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3Jvdy13aXRoLXVzLy4vbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC1xdWVyeS9idWlsZC9tb2Rlcm4vUXVlcnlDbGllbnRQcm92aWRlci5qcz8xOGQ2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG4vLyBzcmMvUXVlcnlDbGllbnRQcm92aWRlci50c3hcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsganN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG52YXIgUXVlcnlDbGllbnRDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChcbiAgdm9pZCAwXG4pO1xudmFyIHVzZVF1ZXJ5Q2xpZW50ID0gKHF1ZXJ5Q2xpZW50KSA9PiB7XG4gIGNvbnN0IGNsaWVudCA9IFJlYWN0LnVzZUNvbnRleHQoUXVlcnlDbGllbnRDb250ZXh0KTtcbiAgaWYgKHF1ZXJ5Q2xpZW50KSB7XG4gICAgcmV0dXJuIHF1ZXJ5Q2xpZW50O1xuICB9XG4gIGlmICghY2xpZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gUXVlcnlDbGllbnQgc2V0LCB1c2UgUXVlcnlDbGllbnRQcm92aWRlciB0byBzZXQgb25lXCIpO1xuICB9XG4gIHJldHVybiBjbGllbnQ7XG59O1xudmFyIFF1ZXJ5Q2xpZW50UHJvdmlkZXIgPSAoe1xuICBjbGllbnQsXG4gIGNoaWxkcmVuXG59KSA9PiB7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY2xpZW50Lm1vdW50KCk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNsaWVudC51bm1vdW50KCk7XG4gICAgfTtcbiAgfSwgW2NsaWVudF0pO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIGpzeChRdWVyeUNsaWVudENvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IGNsaWVudCwgY2hpbGRyZW4gfSk7XG59O1xuZXhwb3J0IHtcbiAgUXVlcnlDbGllbnRDb250ZXh0LFxuICBRdWVyeUNsaWVudFByb3ZpZGVyLFxuICB1c2VRdWVyeUNsaWVudFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVF1ZXJ5Q2xpZW50UHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbIlJlYWN0IiwianN4IiwiUXVlcnlDbGllbnRDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsInVzZVF1ZXJ5Q2xpZW50IiwicXVlcnlDbGllbnQiLCJjbGllbnQiLCJ1c2VDb250ZXh0IiwiRXJyb3IiLCJRdWVyeUNsaWVudFByb3ZpZGVyIiwiY2hpbGRyZW4iLCJ1c2VFZmZlY3QiLCJtb3VudCIsInVubW91bnQiLCJQcm92aWRlciIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js\n");

/***/ })

};
;